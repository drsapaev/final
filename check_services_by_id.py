#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥ –ø–æ ID –∏–∑ –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
"""

import sqlite3
import json

def check_services_by_id():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏ –ø–æ ID –∏–∑ –∑–∞–ø–∏—Å–µ–π"""
    conn = sqlite3.connect('backend/clinic.db')
    cursor = conn.cursor()
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –£–°–õ–£–ì –ü–û ID –ò–ó –ó–ê–ü–ò–°–ï–ô")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —É—Å–ª—É–≥–∞–º–∏
    cursor.execute("SELECT id, patient_id, services, department FROM appointments WHERE services IS NOT NULL ORDER BY created_at DESC LIMIT 10")
    appointments = cursor.fetchall()
    
    print(f"üìÖ –ó–ê–ü–ò–°–ò –° –£–°–õ–£–ì–ê–ú–ò ({len(appointments)} –Ω–∞–π–¥–µ–Ω–æ):")
    
    for appt in appointments:
        appt_id, patient_id, services_json, department = appt
        print(f"\n  –ó–∞–ø–∏—Å—å {appt_id} (–ø–∞—Ü–∏–µ–Ω—Ç {patient_id}, –æ—Ç–¥–µ–ª: {department}):")
        
        try:
            services = json.loads(services_json) if isinstance(services_json, str) else services_json
            print(f"    –£—Å–ª—É–≥–∏ (ID): {services}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —É—Å–ª—É–≥—É –ø–æ ID
            for service_id in services:
                cursor.execute("SELECT id, name, service_code, category_code FROM services WHERE id = ?", (int(service_id),))
                service = cursor.fetchone()
                if service:
                    print(f"      ID {service_id}: {service[1]} (–∫–æ–¥: {service[2]}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {service[3]})")
                else:
                    print(f"      ID {service_id}: –£–°–õ–£–ì–ê –ù–ï –ù–ê–ô–î–ï–ù–ê!")
                    
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ª—É–≥: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—Å–ª—É–≥–∏ (—Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã)
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –£–°–õ–£–ì:")
    print("-" * 30)
    
    # –ò—â–µ–º —É—Å–ª—É–≥–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–æ–¥–∞–º–∏
    old_codes = ['D10', 'D11', 'D12', 'D13', 'D14', 'D20', 'D21', 'D22']
    for old_code in old_codes:
        cursor.execute("SELECT id, name, service_code, category_code FROM services WHERE service_code = ?", (old_code,))
        service = cursor.fetchone()
        if service:
            print(f"  ‚ùå {old_code}: ID {service[0]} - {service[1]} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {service[3]})")
        else:
            print(f"  ‚úÖ {old_code}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–¥—ã
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ö–û–î–û–í:")
    print("-" * 30)
    
    new_codes = ['P01', 'P02', 'P03', 'P04', 'P05', 'D_PROC01', 'D_PROC02', 'D_PROC03']
    for new_code in new_codes:
        cursor.execute("SELECT id, name, service_code, category_code FROM services WHERE service_code = ?", (new_code,))
        service = cursor.fetchone()
        if service:
            print(f"  ‚úÖ {new_code}: ID {service[0]} - {service[1]} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {service[3]})")
        else:
            print(f"  ‚ùå {new_code}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    conn.close()

if __name__ == "__main__":
    check_services_by_id()
