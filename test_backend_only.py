#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ backend —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏
"""
import requests
import json
import os
from datetime import datetime, date

BASE_URL = "http://localhost:8000/api/v1"

def test_backend_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç backend"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BACKEND —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: Health check
    print("\nüîç 1. Health Check")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
            results.append(True)
        else:
            print(f"   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        results.append(False)
    
    # –¢–µ—Å—Ç 2: Queue endpoints
    print("\nüîç 2. Queue Endpoints")
    
    # Test endpoint
    try:
        response = requests.get(f"{BASE_URL}/queue/test")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Test endpoint: {data.get('message')}")
            results.append(True)
        else:
            print(f"   ‚ùå Test endpoint: {response.status_code}")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Test endpoint –æ—à–∏–±–∫–∞: {e}")
        results.append(False)
    
    # Debug endpoint
    try:
        response = requests.get(f"{BASE_URL}/queue/debug")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Debug endpoint: {data.get('status')}")
            print(f"   üìä –¢–∞–±–ª–∏—Ü—ã –ë–î: {data.get('queue_tables')}")
            results.append(True)
        else:
            print(f"   ‚ùå Debug endpoint: {response.status_code}")
            results.append(False)
    except Exception as e:
        print(f"   ‚ùå Debug endpoint –æ—à–∏–±–∫–∞: {e}")
        results.append(False)
    
    # –¢–µ—Å—Ç 3: Join queue functionality
    print("\nüîç 3. Join Queue Functionality")
    
    test_cases = [
        {
            "name": "–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "data": {
                "token": "test-full-data",
                "patient_name": "–ü–æ–ª–Ω—ã–π –¢–µ—Å—Ç –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤–∏—á",
                "phone": "+998901234567"
            }
        },
        {
            "name": "–¢–æ–ª—å–∫–æ –∏–º—è –∏ —Ç–æ–∫–µ–Ω",
            "data": {
                "token": "test-minimal-data",
                "patient_name": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç"
            }
        },
        {
            "name": "–° Telegram ID",
            "data": {
                "token": "test-telegram",
                "patient_name": "Telegram –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "telegram_id": "@test_user"
            }
        }
    ]
    
    for test_case in test_cases:
        try:
            response = requests.post(f"{BASE_URL}/queue/join-fixed", json=test_case["data"])
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    print(f"   ‚úÖ {test_case['name']}: {result.get('message')}")
                    if result.get('number'):
                        print(f"      üé´ –ù–æ–º–µ—Ä: {result.get('number')}")
                    results.append(True)
                else:
                    print(f"   ‚ö†Ô∏è {test_case['name']}: {result.get('message')}")
                    results.append(True)  # –≠—Ç–æ —Ç–æ–∂–µ —É—Å–ø–µ—Ö, –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            else:
                print(f"   ‚ùå {test_case['name']}: HTTP {response.status_code}")
                results.append(False)
        except Exception as e:
            print(f"   ‚ùå {test_case['name']} –æ—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    # –¢–µ—Å—Ç 4: Error handling
    print("\nüîç 4. Error Handling")
    
    error_cases = [
        {
            "name": "–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω",
            "data": {"token": "", "patient_name": "–¢–µ—Å—Ç"}
        },
        {
            "name": "–ë–µ–∑ –∏–º–µ–Ω–∏",
            "data": {"token": "test", "patient_name": ""}
        },
        {
            "name": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "data": {"invalid": "data"}
        }
    ]
    
    for error_case in error_cases:
        try:
            response = requests.post(f"{BASE_URL}/queue/join-fixed", json=error_case["data"])
            if response.status_code == 200:
                result = response.json()
                if not result.get('success'):
                    print(f"   ‚úÖ {error_case['name']}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞")
                    results.append(True)
                else:
                    print(f"   ‚ö†Ô∏è {error_case['name']}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö")
                    results.append(True)
            else:
                print(f"   ‚úÖ {error_case['name']}: HTTP –æ—à–∏–±–∫–∞ {response.status_code} (–æ–∂–∏–¥–∞–µ–º–æ)")
                results.append(True)
        except Exception as e:
            print(f"   ‚ùå {error_case['name']} –æ—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    return results

def test_frontend_components():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîç 5. Frontend Components")
    
    components = [
        "frontend/src/pages/QueueJoin.jsx",
        "frontend/src/components/queue/OnlineQueueManager.jsx",
        "frontend/src/components/queue/QRScanner.jsx"
    ]
    
    results = []
    
    for component in components:
        if os.path.exists(component):
            print(f"   ‚úÖ {component}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            try:
                with open(component, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                if len(content) > 1000:  # –§–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    print(f"      üìù –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    results.append(True)
                else:
                    print(f"      ‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    results.append(False)
                    
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                results.append(False)
        else:
            print(f"   ‚ùå {component} - –ù–ï –ù–ê–ô–î–ï–ù")
            results.append(False)
    
    return results

def test_app_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ App.jsx"""
    print("\nüîç 6. App.jsx Integration")
    
    try:
        with open("frontend/src/App.jsx", 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = [
            ("QueueJoin –∏–º–ø–æ—Ä—Ç", "import QueueJoin" in content),
            ("–ú–∞—Ä—à—Ä—É—Ç /queue/join", '"/queue/join"' in content),
            ("QueueJoin –∫–æ–º–ø–æ–Ω–µ–Ω—Ç", "<QueueJoin" in content or "element={<QueueJoin" in content)
        ]
        
        results = []
        for check_name, check_result in checks:
            if check_result:
                print(f"   ‚úÖ {check_name}")
                results.append(True)
            else:
                print(f"   ‚ùå {check_name}")
                results.append(False)
        
        return results
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è App.jsx: {e}")
        return [False]

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –û–ù–õ–ê–ô–ù-–û–ß–ï–†–ï–î–ò")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    backend_results = test_backend_comprehensive()
    frontend_results = test_frontend_components()
    app_results = test_app_integration()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_results = backend_results + frontend_results + app_results
    passed = sum(all_results)
    total = len(all_results)
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    
    print(f"Backend —Ç–µ—Å—Ç—ã: {sum(backend_results)}/{len(backend_results)}")
    print(f"Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {sum(frontend_results)}/{len(frontend_results)}")
    print(f"App.jsx –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {sum(app_results)}/{len(app_results)}")
    
    print("=" * 60)
    print(f"üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} ({passed/total*100:.1f}%)")
    
    if passed >= total * 0.9:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∞!")
        status = "excellent"
    elif passed >= total * 0.7:
        print("‚úÖ –•–û–†–û–®–û! –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        status = "good"
    elif passed >= total * 0.5:
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –±–∞–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        status = "ok"
    else:
        print("‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º!")
        status = "bad"
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if status in ["excellent", "good"]:
        print("1. ‚úÖ Backend API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("2. ‚úÖ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("3. üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º frontend —Å–µ—Ä–≤–µ—Ä–∞")
        print("4. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:5173/queue/join?token=test")
    else:
        print("1. üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ backend API")
        print("2. üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã frontend")
        print("3. üîó –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    return status

if __name__ == "__main__":
    main()
