# Стандарты кодирования

## React/Frontend

- Используйте функциональные компоненты с хуками
- Применяйте TypeScript для строгой типизации
- Следуйте принципам чистой архитектуры React
- Используйте контекст для глобального состояния
- Применяйте мемоизацию для оптимизации производительности

## Python/Backend

- Следуйте PEP 8 для стиля кода
- Используйте type hints для всех функций
- Применяйте async/await для I/O операций
- Используйте Pydantic для валидации данных
- Следуйте принципам SOLID

## База данных

- Используйте SQLAlchemy ORM
- Применяйте миграции Alembic
- Всегда используйте транзакции для критических операций
- Включайте аудит-логирование для медицинских данных
- Используйте индексы для оптимизации запросов

## API Design

- Следуйте RESTful принципам
- Используйте HTTP статус коды правильно
- Включайте валидацию входных данных
- Применяйте rate limiting
- Документируйте API с помощью OpenAPI/Swagger

## Безопасность

- Хешируйте пароли с помощью bcrypt или argon2
- Используйте JWT токены для аутентификации
- Применяйте CORS правильно
- Валидируйте все входные данные
- Логируйте все критические операции

## Проверки кода

### Синтаксис и импорты
- **Проверяйте корректность импортов/экспортов** в Python, TypeScript, JavaScript
- **Валидируйте синтаксис** перед коммитом
- **Проверяйте зависимости** и их совместимость

### Логические ошибки
- **Обнаруживайте недостижимый код** и подозрительные условия
- **Проверяйте корректность формул** и вычислений
- **Предлагайте unit-тесты** для критических функций

### Интеграционные проблемы
- **Проверяйте соответствие Frontend ↔ Backend** (API, типы, JSON)
- **Выявляйте устаревшие endpoints** и неиспользуемые API
- **Валидируйте схемы данных** между компонентами

### Управление состоянием
- **Проверяйте инициализацию переменных** и состояние компонентов
- **Выявляйте возможную потерю данных** при навигации
- **Предлагайте правильные паттерны** управления состоянием

### Производительность
- **Выявляйте медленные запросы** к базе данных
- **Проверяйте дорогие циклы** и операции
- **Предлагайте оптимизацию** рендеринга и API вызовов

### Тестирование
- **Проверяйте покрытие тестами** критических функций
- **Выявляйте слабые тесты** и предлагайте улучшения
- **Валидируйте интеграционные тесты** для API