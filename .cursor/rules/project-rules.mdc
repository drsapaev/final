# Правила проекта клиники

## Общие принципы разработки

- **Никогда не откатывайте код к предыдущему состоянию**, если он уже был исправлен вручную
- **Всегда рассматривайте последние изменения в локальном проекте как единственный источник истины**
- **Перед переписыванием файла всегда сравнивайте с текущей версией (diff)**
- **При конфликте между сгенерированным кодом и ручными изменениями** → предлагайте решение слияния, не перезаписывайте
- **При сомнениях спрашивайте пользователя** перед заменой кода
- Избегайте дублирования кода — если появляются похожие функции, предлагайте рефакторинг в общее решение

## Качество кода

- Следуйте лучшим практикам для читаемости и поддерживаемости: чистая архитектура, разделение ответственности, консистентное форматирование, строгая типизация
- Используйте переменные окружения для всех секретов и конфигурации. Никогда не хардкодите чувствительную информацию
- Обеспечивайте безопасную обработку данных: хеширование паролей (bcrypt/argon2), контроль доступа на основе ролей, аудит-логирование, шифрование медицинских записей
- При работе с API или базами данных всегда включайте правильную обработку ошибок и валидацию входных данных

## Проверки и валидация

### Синтаксические ошибки
- Валидируйте Python, TypeScript, JavaScript код
- Убедитесь, что импорты/экспорты корректны

### Логические ошибки
- Обнаруживайте подозрительные условия, некорректные формулы или недостижимый код
- Предлагайте написание или улучшение unit-тестов

### Проблемы интеграции
- Проверяйте несоответствия между Frontend ↔ Backend (API ответы, типы, JSON структуры)
- Выделяйте устаревшие или неиспользуемые endpoints

### Управление состоянием и данными
- Выявляйте возможную потерю состояния, неинициализированные переменные или несохраненные данные
- Предлагайте правильное управление состоянием (Redux/Zustand/Context)

### Архитектура и дублирование
- Обнаруживайте мертвый код, неиспользуемые функции, дублированную логику
- Предлагайте рефакторинг длинных файлов на меньшие компоненты/модули

### Уязвимости безопасности
- Предотвращайте SQL Injection, XSS, утечку секретов
- Выделяйте небезопасные паттерны кода и хардкодированные учетные данные

### Узкие места производительности
- Выявляйте медленные запросы к БД или дорогие циклы
- Предлагайте оптимизацию для frontend рендеринга и API вызовов

### Проблемы тестирования
- Проверяйте, покрыты ли критические функции тестами
- Выделяйте слабые или бессмысленные тесты

## Тестирование и документация

- Предлагайте улучшения проактивно — не только исправления ошибок, но и рефакторинг и оптимизации
- Автоматически предлагайте модульные и интеграционные тесты для новых функций
- Четко документируйте изменения: обновляйте README, встроенные комментарии только при необходимости, поддерживайте документацию для разработчиков
- Обеспечивайте, чтобы каждая реализация проходила линтеры, проверки типов и автоматические тесты

## UI/UX принципы

- Соблюдайте современные принципы UI/UX: чистый дизайн, адаптивная верстка, поддержка темной/светлой темы, интуитивная навигация
- Для медицинских данных приоритизируйте соответствие стандартам конфиденциальности (GDPR/HIPAA) и включайте опции анонимизации где требуется

## Архитектура

- Поощряйте модульность и масштабируемость: проектируйте так, чтобы компоненты, сервисы или базы данных можно было заменить с минимальными усилиями
- При внедрении новых функций учитывайте будущую поддерживаемость и предлагайте паттерны, которые сохраняют систему расширяемой

## Стиль и поведение

### Стиль кода
- Следуйте принципам чистого кода (читаемость, простота, отсутствие дублирования)
- Используйте консистентные соглашения по именованию
- Документируйте важные функции и API четкими комментариями

### Поведение при разработке
- **Всегда сначала выделяйте проблемы, затем предлагайте безопасные исправления**
- **Никогда не перезаписывайте вручную исправленный код**
- **Всегда сохраняйте рабочую функциональность**
- **Запрашивайте подтверждение пользователя перед крупными рефакторингами**