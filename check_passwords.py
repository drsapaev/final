"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from backend.app.db.session import engine
from backend.app.core.security import verify_password, get_password_hash
from sqlalchemy import text

def check_passwords():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    test_passwords = ["admin", "test123", "registrar", "doctor"]
    
    try:
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT id, username, email, hashed_password
                FROM users 
                WHERE username IN ('admin', 'mcp_test', 'registrar')
            """))
            
            users = result.fetchall()
            
            for user_id, username, email, hashed_password in users:
                print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
                print(f"   Email: {email}")
                print(f"   –•–µ—à –ø–∞—Ä–æ–ª—è: {hashed_password[:50]}...")
                
                for test_password in test_passwords:
                    is_valid = verify_password(test_password, hashed_password)
                    print(f"   –ü–∞—Ä–æ–ª—å '{test_password}': {'‚úÖ' if is_valid else '‚ùå'}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                new_hash = get_password_hash("test123")
                print(f"   –ù–æ–≤—ã–π —Ö–µ—à –¥–ª—è 'test123': {new_hash[:50]}...")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_passwords()