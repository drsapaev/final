"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""
import requests
import json

BASE_URL = "http://localhost:8000/api/v1"

def get_auth_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        response = requests.post(
            f"{BASE_URL}/auth/minimal-login",
            json={"username": "admin", "password": "admin"},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            return data.get("access_token")
        else:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def test_mcp_with_auth():
    """–¢–µ—Å—Ç MCP endpoints —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_auth_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å MCP
    try:
        response = requests.get(f"{BASE_URL}/mcp/status", headers=headers, timeout=10)
        print(f"MCP Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ MCP Status: {data.get('healthy', False)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            if 'metrics' in data:
                metrics = data['metrics']
                print(f"  –ó–∞–ø—Ä–æ—Å–æ–≤: {metrics.get('requests_total', 0)}")
                print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {metrics.get('requests_success', 0)}")
                print(f"  –û—à–∏–±–æ–∫: {metrics.get('requests_failed', 0)}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_complaint_analysis_with_auth():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
    
    token = get_auth_token()
    if not token:
        return False
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±
    try:
        data = {
            "complaint": "–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –∏ —Ç–æ—à–Ω–æ—Ç–∞ —É–∂–µ 2 –¥–Ω—è",
            "patient_age": 35,
            "patient_gender": "female",
            "urgency_assessment": True
        }
        
        response = requests.post(
            f"{BASE_URL}/mcp/complaint/analyze",
            json=data,
            headers=headers,
            timeout=30
        )
        
        print(f"Complaint Analysis: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            if 'data' in result and 'data' in result['data']:
                analysis = result['data']['data']
                print(f"  –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã: {len(analysis.get('preliminary_diagnosis', []))}")
                print(f"  –°—Ä–æ—á–Ω–æ—Å—Ç—å: {analysis.get('urgency', 'N/A')}")
                print(f"  –û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {len(analysis.get('examinations', []))}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_icd10_suggestions_with_auth():
    """–¢–µ—Å—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ú–ö–ë-10 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ú–ö–ë-10 —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
    
    token = get_auth_token()
    if not token:
        return False
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        data = {
            "symptoms": ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–æ—à–Ω–æ—Ç–∞", "—Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å"],
            "diagnosis": "–ú–∏–≥—Ä–µ–Ω—å",
            "max_suggestions": 3
        }
        
        response = requests.post(
            f"{BASE_URL}/mcp/icd10/suggest",
            json=data,
            headers=headers,
            timeout=30
        )
        
        print(f"ICD-10 Suggestions: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10 –ø–æ–ª—É—á–µ–Ω—ã")
            
            if 'data' in result and 'suggestions' in result['data']:
                suggestions = result['data']['suggestions']
                print(f"  –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {len(suggestions)}")
                
                for i, suggestion in enumerate(suggestions[:3], 1):
                    print(f"    {i}. {suggestion.get('code', 'N/A')}: {suggestion.get('description', 'N/A')}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP API –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô")
    print("=" * 60)
    
    tests = [
        ("MCP Status", test_mcp_with_auth),
        ("–ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±", test_complaint_analysis_with_auth),
        ("–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10", test_icd10_suggestions_with_auth),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    for test_name, success in results.items():
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"{status_icon} {test_name}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    print("\n" + "-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í–°–ï MCP API –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã MCP API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("  ‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–± —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  ‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10 —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("  ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüåê API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("üîß MCP endpoints: http://localhost:8000/api/v1/mcp/*")
    else:
        print(f"‚ö†Ô∏è {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
