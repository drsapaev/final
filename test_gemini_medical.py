"""
–¢–µ—Å—Ç Gemini API –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á
"""
import os
import sys
import asyncio
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from backend.app.services.ai.ai_manager import get_ai_manager, AIProviderType

async def test_gemini_medical():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞—á...")
    
    ai_manager = get_ai_manager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    available_providers = ai_manager.get_available_providers()
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {available_providers}")
    
    if "gemini" not in available_providers:
        print("‚ùå Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_gemini_api.py")
        return
    
    print("‚úÖ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±
    test_complaints = [
        "–°–∏–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –∏ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤",
        "–û—Å—Ç—Ä–∞—è –±–æ–ª—å –≤ –≥—Ä—É–¥–∏, –æ—Ç–¥–∞—é—â–∞—è –≤ –ª–µ–≤—É—é —Ä—É–∫—É, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∞—è—Å—è –æ–¥—ã—à–∫–æ–π",
        "–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤—ã—Å—ã–ø–∞–Ω–∏—è –Ω–∞ –∫–æ–∂–µ, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ—Å—è –∑—É–¥–æ–º –∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ–º"
    ]
    
    for i, complaint in enumerate(test_complaints, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±—ã")
        print(f"üìù –ñ–∞–ª–æ–±–∞: {complaint}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            gemini_provider = ai_manager.get_provider(AIProviderType.GEMINI)
            
            if gemini_provider:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±
                result = await gemini_provider.analyze_complaint(
                    complaint=complaint,
                    patient_info={"age": 45, "gender": "female"}
                )
                
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                print(f"   –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑: {result.get('preliminary_diagnosis', 'N/A')}")
                print(f"   –°—Ä–æ—á–Ω–æ—Å—Ç—å: {result.get('urgency_level', 'N/A')}")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {result.get('recommendations', 'N/A')}")
            else:
                print("‚ùå Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10
    print(f"\nüîç –¢–µ—Å—Ç: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10")
    symptoms = ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–æ—à–Ω–æ—Ç–∞", "—Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å"]
    
    try:
        gemini_provider = ai_manager.get_provider(AIProviderType.GEMINI)
        
        if gemini_provider:
            result = await gemini_provider.suggest_icd10(
                symptoms=symptoms,
                diagnosis="–ú–∏–≥—Ä–µ–Ω—å"
            )
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ú–ö–ë-10:")
            print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–¥—ã: {result.get('suggested_codes', 'N/A')}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 'N/A')}")
        else:
            print("‚ùå Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_gemini_medical())
