"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ verify_password
"""
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from backend.app.db.session import engine
from backend.app.core.security import verify_password
from sqlalchemy import text

def test_password_verification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ verify_password...")
    
    try:
        with engine.connect() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è mcp_test
            result = conn.execute(text("""
                SELECT id, username, email, hashed_password
                FROM users 
                WHERE username = 'mcp_test'
            """))
            
            user_row = result.fetchone()
            
            if not user_row:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å mcp_test –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            user_id, username, email, hashed_password = user_row
            
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
            print(f"   Email: {email}")
            print(f"   –•–µ—à –ø–∞—Ä–æ–ª—è: {hashed_password[:50]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
            test_passwords = ["test123", "admin", "password", "mcp_test"]
            
            for password in test_passwords:
                try:
                    is_valid = verify_password(password, hashed_password)
                    print(f"   –ü–∞—Ä–æ–ª—å '{password}': {'‚úÖ' if is_valid else '‚ùå'}")
                except Exception as e:
                    print(f"   –ü–∞—Ä–æ–ª—å '{password}': ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º
            try:
                is_valid = verify_password("", hashed_password)
                print(f"   –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å: {'‚úÖ' if is_valid else '‚ùå'}")
            except Exception as e:
                print(f"   –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å: ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å None
            try:
                is_valid = verify_password(None, hashed_password)
                print(f"   None –ø–∞—Ä–æ–ª—å: {'‚úÖ' if is_valid else '‚ùå'}")
            except Exception as e:
                print(f"   None –ø–∞—Ä–æ–ª—å: ‚ùå –û—à–∏–±–∫–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_password_verification()