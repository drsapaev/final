#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.core.security import verify_password, get_password_hash
from app.db.session import SessionLocal
from sqlalchemy import text

def test_password_verification():
    """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π"""
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ö–µ—à–∞
    test_password = "admin123"
    hash1 = get_password_hash(test_password)
    hash2 = get_password_hash(test_password)
    
    print(f"üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:")
    print(f"–ü–∞—Ä–æ–ª—å: {test_password}")
    print(f"–•–µ—à 1: {hash1[:50]}...")
    print(f"–•–µ—à 2: {hash2[:50]}...")
    print(f"–•–µ—à–∏ —Ä–∞–∑–Ω—ã–µ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ): {hash1 != hash2}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    verify1 = verify_password(test_password, hash1)
    verify2 = verify_password(test_password, hash2)
    verify_wrong = verify_password("wrong_password", hash1)
    
    print(f"\n‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–µ–º 1: {verify1}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–µ–º 2: {verify2}")
    print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {verify_wrong}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å admin –∏–∑ –ë–î
    db = SessionLocal()
    try:
        result = db.execute(text("SELECT email, hashed_password FROM users WHERE email = 'admin@example.com';"))
        user_data = result.fetchone()
        
        if user_data:
            email, stored_hash = user_data
            print(f"\nüë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è admin –∏–∑ –ë–î:")
            print(f"Email: {email}")
            print(f"Stored hash: {stored_hash[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–æ–ª–µ–π
            passwords_to_test = ["admin123", "admin", "123", "Admin123", "ADMIN123"]
            
            for pwd in passwords_to_test:
                is_valid = verify_password(pwd, stored_hash)
                print(f"–ü–∞—Ä–æ–ª—å '{pwd}': {'‚úÖ' if is_valid else '‚ùå'}")
                
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π...")
    test_password_verification()

