#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ API —É—Å–ª—É–≥ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import requests
import json

BASE_URL = "http://localhost:8000/api/v1"

def check_services_without_auth():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º API —É—Å–ª—É–≥ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    url = f"{BASE_URL}/registrar/services"
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {url}")
    
    try:
        response = requests.get(url)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            services = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥: {len(services)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            procedure_categories = ['P', 'C', 'D_PROC']
            procedure_services = [s for s in services if s.get('category_code') in procedure_categories]
            
            print(f"\nüéØ –ü–†–û–¶–ï–î–£–†–´ ({len(procedure_services)} —É—Å–ª—É–≥):")
            for service in procedure_services:
                code = service.get('service_code', '–ë–µ–∑ –∫–æ–¥–∞')
                name = service.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                category = service.get('category_code', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                print(f"  {code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def check_minimal_login():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    login_url = f"{BASE_URL}/auth/minimal-login"
    
    print(f"\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: {login_url}")
    
    credentials = {
        "username": "registrar",
        "password": "registrar123"
    }
    
    try:
        response = requests.post(login_url, json=credentials)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –¢–æ–∫–µ–Ω: {data.get('access_token', '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞')[:30]}...")
            
            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
            token = data.get('access_token')
            if token:
                headers = {"Authorization": f"Bearer {token}"}
                services_url = f"{BASE_URL}/registrar/services"
                
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏ —Å —Ç–æ–∫–µ–Ω–æ–º...")
                services_response = requests.get(services_url, headers=headers)
                
                if services_response.status_code == 200:
                    data = services_response.json()
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    if isinstance(data, dict):
                        services_by_group = data.get('services_by_group', {})
                        categories = data.get('categories', [])
                        total_services = data.get('total_services', 0)
                        
                        print(f"\nüìä –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:")
                        print(f"  services_by_group: {len(services_by_group)} –≥—Ä—É–ø–ø")
                        print(f"  categories: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                        print(f"  total_services: {total_services}")
                        
                        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —É—Å–ª—É–≥
                        print(f"\nüìã –ì–†–£–ü–ü–´ –£–°–õ–£–ì:")
                        for group_name, services in services_by_group.items():
                            print(f"  {group_name}: {len(services)} —É—Å–ª—É–≥")
                            for service in services:
                                if isinstance(service, dict):
                                    code = service.get('service_code', '–ë–µ–∑ –∫–æ–¥–∞')
                                    name = service.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                                    category = service.get('category_code', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                                    print(f"    {code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                        procedure_categories = ['P', 'C', 'D_PROC']
                        procedure_services = []
                        
                        for group_name, services in services_by_group.items():
                            for service in services:
                                if isinstance(service, dict) and service.get('category_code') in procedure_categories:
                                    procedure_services.append(service)
                        
                        print(f"\nüéØ –ü–†–û–¶–ï–î–£–†–´ ({len(procedure_services)} —É—Å–ª—É–≥):")
                        for service in procedure_services:
                            code = service.get('service_code', '–ë–µ–∑ –∫–æ–¥–∞')
                            name = service.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            category = service.get('category_code', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                            print(f"  {code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
                    else:
                        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥: {services_response.status_code}")
                    print(f"–û—Ç–≤–µ—Ç: {services_response.text}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    check_services_without_auth()
    check_minimal_login()
