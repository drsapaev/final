#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É—Å–ª—É–≥ –≤ API
"""

import requests
import json

BASE_URL = "http://localhost:8000/api/v1"
USERNAME = "registrar"
PASSWORD = "registrar123"

def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    login_url = f"{BASE_URL}/auth/minimal-login"
    credentials = {
        "username": USERNAME,
        "password": PASSWORD
    }
    try:
        response = requests.post(login_url, json=credentials)
        response.raise_for_status()
        token = response.json().get("access_token")
        if token:
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:30]}...")
            return token
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def check_services_grouping():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —É—Å–ª—É–≥ –≤ API"""
    token = get_auth_token()
    if not token:
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    services_url = f"{BASE_URL}/registrar/services"
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —É—Å–ª—É–≥ –≤ API...")
    
    try:
        response = requests.get(services_url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        services_by_group = data.get('services_by_group', {})
        
        print(f"üìä –ì—Ä—É–ø–ø—ã —É—Å–ª—É–≥: {list(services_by_group.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
        for group_name, services in services_by_group.items():
            print(f"\nüè∑Ô∏è –ì–†–£–ü–ü–ê '{group_name}' ({len(services)} —É—Å–ª—É–≥):")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            procedure_services = []
            for service in services:
                category = service.get('category_code', '')
                if category in ['P', 'C', 'D_PROC']:
                    procedure_services.append(service)
            
            if procedure_services:
                print(f"  üéØ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –≥—Ä—É–ø–ø–µ '{group_name}':")
                for service in procedure_services:
                    service_id = service.get('id')
                    service_code = service.get('service_code')
                    category_code = service.get('category_code')
                    name = service.get('name')
                    print(f"    ID {service_id}: {service_code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_code})")
            else:
                print(f"  ‚ùå –ù–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä –≤ –≥—Ä—É–ø–ø–µ '{group_name}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–¶–ï–î–£–†:")
        print("-" * 40)
        
        all_procedures = []
        for group_name, services in services_by_group.items():
            for service in services:
                category = service.get('category_code', '')
                if category in ['P', 'C', 'D_PROC']:
                    all_procedures.append({
                        'group': group_name,
                        'service': service
                    })
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä: {len(all_procedures)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        physio_count = len([p for p in all_procedures if p['service']['category_code'] == 'P'])
        cosmo_count = len([p for p in all_procedures if p['service']['category_code'] == 'C'])
        derm_proc_count = len([p for p in all_procedures if p['service']['category_code'] == 'D_PROC'])
        
        print(f"–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è (P): {physio_count}")
        print(f"–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è (C): {cosmo_count}")
        print(f"–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (D_PROC): {derm_proc_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
        print(f"\nüìã –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ì–†–£–ü–ü–ê–ú:")
        print("-" * 40)
        
        for group_name, services in services_by_group.items():
            procedure_count = len([s for s in services if s.get('category_code') in ['P', 'C', 'D_PROC']])
            if procedure_count > 0:
                print(f"  {group_name}: {procedure_count} –ø—Ä–æ—Ü–µ–¥—É—Ä")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

def check_queue_grouping():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –æ—á–µ—Ä–µ–¥–µ–π"""
    token = get_auth_token()
    if not token:
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    queues_url = f"{BASE_URL}/registrar/queues/today"
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –æ—á–µ—Ä–µ–¥–µ–π...")
    
    try:
        response = requests.get(queues_url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        queues = data.get('queues', [])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {len(queues)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
        procedure_queues = []
        for queue in queues:
            specialty = queue.get('specialty', '')
            entries = queue.get('entries', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
            has_procedures = False
            for entry in entries:
                services = entry.get('services', [])
                service_codes = entry.get('service_codes', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã —É—Å–ª—É–≥
                for code in service_codes:
                    if (code.startswith('P') and code[1:].isdigit()) or \
                       (code.startswith('C') and code[1:].isdigit()) or \
                       (code.startswith('D_PROC') and code[6:].isdigit()) or \
                       code.startswith('PHYS_') or \
                       code.startswith('COSM_') or \
                       code.startswith('DERM_'):
                        has_procedures = True
                        break
                
                if has_procedures:
                    break
            
            if has_procedures:
                procedure_queues.append({
                    'specialty': specialty,
                    'entries_count': len(entries)
                })
        
        print(f"\nüéØ –û–ß–ï–†–ï–î–ò –° –ü–†–û–¶–ï–î–£–†–ê–ú–ò:")
        print("-" * 30)
        
        for queue in procedure_queues:
            print(f"  {queue['specialty']}: {queue['entries_count']} –∑–∞–ø–∏—Å–µ–π")
        
        if len(procedure_queues) > 1:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {len(procedure_queues)} –æ—á–µ—Ä–µ–¥–µ–π!")
            print("–ù—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö –≤ –æ–¥–Ω—É –æ—á–µ—Ä–µ–¥—å 'procedures'")
        else:
            print(f"\n‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

if __name__ == "__main__":
    check_services_grouping()
    check_queue_grouping()
