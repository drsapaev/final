"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: API, —à–∞–±–ª–æ–Ω—ã, —Å–µ—Ä–≤–∏—Å—ã, CRUD
"""
import asyncio
import json
from datetime import datetime
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.main import app
from app.db.session import SessionLocal
from app.models.user import User
from app.models.print_config import PrinterConfig, PrintTemplate, PrintJob
from app.crud import print_config as crud_print
from app.services.print_service import PrintService
from app.core.auth import create_access_token

client = TestClient(app)

def setup_test_printer(db: Session) -> PrinterConfig:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä"""
    printer_data = {
        "name": "test_ticket_printer",
        "display_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä —Ç–∞–ª–æ–Ω–æ–≤",
        "printer_type": "ESC/POS",
        "connection_type": "network",
        "ip_address": "192.168.1.100",
        "port": 9100,
        "paper_width": 58,
        "encoding": "utf-8",
        "active": True,
        "is_default": True
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    existing = db.query(PrinterConfig).filter(PrinterConfig.name == printer_data["name"]).first()
    if existing:
        return existing
    
    printer = PrinterConfig(**printer_data)
    db.add(printer)
    db.commit()
    db.refresh(printer)
    return printer

def setup_test_template(db: Session, printer_id: int) -> PrintTemplate:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω"""
    template_content = """
{{ clinic_name | upper }}
========================================
–¢–ê–õ–û–ù –û–ß–ï–†–ï–î–ò ‚Ññ {{ queue_number }}

–î–∞—Ç–∞: {{ date.strftime('%d.%m.%Y') }}
–í—Ä–µ–º—è: {{ time.strftime('%H:%M') }}

–í—Ä–∞—á: {{ doctor_name }}
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {{ specialty_name }}
{% if cabinet %}–ö–∞–±–∏–Ω–µ—Ç: {{ cabinet }}{% endif %}

–ü–∞—Ü–∏–µ–Ω—Ç: {{ patient_name or '–ù–µ —É–∫–∞–∑–∞–Ω' }}

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!
"""
    
    template_data = {
        "printer_id": printer_id,
        "name": "test_ticket_template",
        "display_name": "–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Ç–∞–ª–æ–Ω–∞",
        "template_type": "ticket",
        "template_content": template_content.strip(),
        "language": "ru",
        "font_size": 12,
        "active": True
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    existing = db.query(PrintTemplate).filter(
        PrintTemplate.name == template_data["name"],
        PrintTemplate.printer_id == printer_id
    ).first()
    if existing:
        return existing
    
    template = PrintTemplate(**template_data)
    db.add(template)
    db.commit()
    db.refresh(template)
    return template

def setup_test_user(db: Session) -> User:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = {
        "username": "test_registrar",
        "email": "test@clinic.com",
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "role": "Registrar",
        "is_active": True,
        "hashed_password": "test_hash"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
    existing = db.query(User).filter(User.username == user_data["username"]).first()
    if existing:
        return existing
    
    user = User(**user_data)
    db.add(user)
    db.commit()
    db.refresh(user)
    return user

def test_crud_operations():
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    db = SessionLocal()
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        printer = setup_test_printer(db)
        print(f"‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: {printer.display_name}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        found_printer = crud_print.get_printer_by_name(db, "test_ticket_printer")
        assert found_printer is not None, "–ü—Ä–∏–Ω—Ç–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω"
        print("‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
        template = setup_test_template(db, printer.id)
        print(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {template.display_name}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        templates = crud_print.get_print_templates(db, template_type="ticket")
        assert len(templates) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã"
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
        
    finally:
        db.close()

def test_print_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—á–∞—Ç–∏"""
    print("\nüñ®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PrintService...")
    
    db = SessionLocal()
    try:
        print_service = PrintService(db)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        status = print_service.get_printer_status("test_ticket_printer")
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {status['status']} - {status['message']}")
        
        # –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏)
        test_data = {
            "clinic_name": "–¢–ï–°–¢–û–í–ê–Ø –ö–õ–ò–ù–ò–ö–ê",
            "queue_number": "001",
            "date": datetime.now(),
            "time": datetime.now(),
            "doctor_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á",
            "specialty_name": "–¢–µ—Ä–∞–ø–∏—è",
            "cabinet": "101",
            "patient_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
        template = crud_print.get_print_templates(db, template_type="ticket")[0]
        if template:
            from jinja2 import Environment
            env = Environment()
            jinja_template = env.from_string(template.template_content)
            rendered = jinja_template.render(**test_data)
            print("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω:")
            print("=" * 40)
            print(rendered)
            print("=" * 40)
        
    finally:
        db.close()

def test_api_endpoints():
    """–¢–µ—Å—Ç API endpoints"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = setup_test_user(db)
        token = create_access_token(subject=user.username)
        headers = {"Authorization": f"Bearer {token}"}
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        response = client.get("/api/v1/print/printers", headers=headers)
        print(f"GET /printers: {response.status_code}")
        if response.status_code == 200:
            printers = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {printers.get('total', 0)}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        response = client.get("/api/v1/print/printers/test_ticket_printer/status", headers=headers)
        print(f"GET /printers/status: {response.status_code}")
        if response.status_code == 200:
            status = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {status.get('status')}")
        
        # –¢–µ—Å—Ç –ø–µ—á–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∞
        ticket_data = {
            "clinic_name": "–¢–ï–°–¢–û–í–ê–Ø –ö–õ–ò–ù–ò–ö–ê",
            "queue_number": "TEST-001",
            "doctor_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á",
            "specialty_name": "–¢–µ—Ä–∞–ø–∏—è",
            "cabinet": "101",
            "patient_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
            "source": "test"
        }
        
        response = client.post("/api/v1/print/ticket", json=ticket_data, headers=headers)
        print(f"POST /ticket: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—á–∞—Ç–∏: {result.get('message', 'OK')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {response.text}")
        
        # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π –ø–µ—á–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∞
        quick_ticket = {
            "queue_number": "QUICK-001",
            "doctor_name": "–ë—ã—Å—Ç—Ä—ã–π –í—Ä–∞—á", 
            "specialty": "–¢–µ—Ä–∞–ø–∏—è",
            "patient_name": "–ë—ã—Å—Ç—Ä—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
        }
        
        response = client.post("/api/v1/print/quick/queue-ticket", json=quick_ticket, headers=headers)
        print(f"POST /quick/queue-ticket: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å: {result.get('message', 'OK')}")
        
    finally:
        db.close()

def test_template_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏...")
    
    db = SessionLocal()
    try:
        user = setup_test_user(db)
        token = create_access_token(subject=user.username)
        headers = {"Authorization": f"Bearer {token}"}
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
        response = client.get("/api/v1/print/templates/types", headers=headers)
        print(f"GET /templates/types: {response.status_code}")
        if response.status_code == 200:
            types = response.json()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤: {len(types.get('template_types', []))}")
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {len(types.get('formats', []))}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        response = client.get("/api/v1/print/templates/templates", headers=headers)
        print(f"GET /templates: {response.status_code}")
        if response.status_code == 200:
            templates = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î: {len(templates)}")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω—ã)
        if response.status_code == 200 and len(templates) > 0:
            template_id = templates[0]["id"]
            preview_data = {
                "clinic_name": "–¢–ï–°–¢ –ü–†–ï–í–¨–Æ",
                "queue_number": "PREV-001",
                "doctor_name": "–ü—Ä–µ–≤—å—é –í—Ä–∞—á",
                "date": datetime.now().isoformat(),
                "time": datetime.now().isoformat()
            }
            
            response = client.post(
                f"/api/v1/print/templates/templates/{template_id}/preview",
                json=preview_data,
                headers=headers
            )
            print(f"POST /templates/preview: {response.status_code}")
            if response.status_code == 200:
                preview = response.json()
                print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
                print("-" * 30)
                print(preview.get("rendered_content", "")[:200] + "...")
                print("-" * 30)
        
    finally:
        db.close()

def test_print_jobs():
    """–¢–µ—Å—Ç –∑–∞–¥–∞–Ω–∏–π –ø–µ—á–∞—Ç–∏"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–µ—á–∞—Ç–∏...")
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏
        printer = setup_test_printer(db)
        user = setup_test_user(db)
        
        job_data = {
            "user_id": user.id,
            "printer_id": printer.id,
            "document_type": "ticket",
            "document_id": "TEST-JOB-001",
            "status": "completed",
            "print_data": {
                "queue_number": "JOB-001",
                "patient_name": "–¢–µ—Å—Ç–æ–≤–æ–µ –ó–∞–¥–∞–Ω–∏–µ"
            }
        }
        
        job = crud_print.create_print_job(db, job_data)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏: ID {job.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        jobs = crud_print.get_print_jobs(db, limit=10)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –ø–µ—á–∞—Ç–∏: {len(jobs)}")
        
        # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ API
        token = create_access_token(subject=user.username)
        headers = {"Authorization": f"Bearer {token}"}
        
        response = client.get("/api/v1/print/templates/jobs", headers=headers)
        print(f"GET /jobs: {response.status_code}")
        if response.status_code == 200:
            api_jobs = response.json()
            print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ API: {len(api_jobs)}")
        
    finally:
        db.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ï–ß–ê–¢–ò")
    print("=" * 50)
    
    try:
        # 1. –¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
        test_crud_operations()
        
        # 2. –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—á–∞—Ç–∏
        test_print_service()
        
        # 3. –¢–µ—Å—Ç API endpoints
        test_api_endpoints()
        
        # 4. –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
        test_template_management()
        
        # 5. –¢–µ—Å—Ç –∑–∞–¥–∞–Ω–∏–π –ø–µ—á–∞—Ç–∏
        test_print_jobs()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ PrintService —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ API endpoints –æ—Ç–≤–µ—á–∞—é—Ç")
        print("‚úÖ –®–∞–±–ª–æ–Ω—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è")
        print("‚úÖ –ó–∞–¥–∞–Ω–∏—è –ø–µ—á–∞—Ç–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è")
        print("\nüñ®Ô∏è –°–ò–°–¢–ï–ú–ê –ü–ï–ß–ê–¢–ò –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
