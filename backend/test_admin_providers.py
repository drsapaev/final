#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –æ–ø–ª–∞—Ç—ã
"""
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session

from app.crud.payment_webhook import (
    create_provider,
    delete_provider,
    get_all_providers,
    get_provider_by_code,
    get_provider_by_id,
    update_provider,
)
from app.db.session import SessionLocal
from app.schemas.payment_webhook import PaymentProviderCreate, PaymentProviderUpdate


def test_providers_crud():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    db: Session = SessionLocal()

    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")

        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        import time

        timestamp = int(time.time())
        provider_data = PaymentProviderCreate(
            name=f"Test Payme Provider {timestamp}",
            code=f"test_payme_{timestamp}",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Payme",
            is_active=True,
            secret_key="test_secret_key_123",
            webhook_url="https://example.com/webhook",
            api_url="https://api.payme.uz",
        )

        created_provider = create_provider(db, provider_data)
        print(
            f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ID={created_provider.id}, –∫–æ–¥={created_provider.code}"
        )

        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ ID
        print(f"\nüîç –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ ID {created_provider.id}")
        retrieved_provider = get_provider_by_id(db, created_provider.id)
        if retrieved_provider:
            print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω: {retrieved_provider.name}")
        else:
            print("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∫–æ–¥—É
        print(f"\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∫–æ–¥—É '{created_provider.code}'")
        provider_by_code = get_provider_by_code(db, created_provider.code)
        if provider_by_code:
            print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–¥—É: {provider_by_code.name}")
        else:
            print("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–¥—É")

        # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        print(f"\n‚úèÔ∏è –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {created_provider.id}")
        update_data = PaymentProviderUpdate(
            name="Updated Test Payme Provider",
            description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            is_active=False,
        )

        updated_provider = update_provider(db, created_provider.id, update_data)
        if updated_provider:
            print(
                f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_provider.name}, –∞–∫—Ç–∏–≤–µ–Ω: {updated_provider.is_active}"
            )
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")

        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print("\nüìã –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        all_providers = get_all_providers(db)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(all_providers)}")
        for provider in all_providers:
            print(
                f"   - {provider.name} ({provider.code}) - {'–∞–∫—Ç–∏–≤–µ–Ω' if provider.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            )

        # –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç 6: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {created_provider.id}")
        delete_success = delete_provider(db, created_provider.id)
        if delete_success:
            print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω
        deleted_provider = get_provider_by_id(db, created_provider.id)
        if not deleted_provider:
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback

        traceback.print_exc()
    finally:
        db.close()


if __name__ == "__main__":
    test_providers_crud()
