#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
"""
import asyncio
import json
import urllib.parse
import urllib.request
from datetime import datetime

import websockets


async def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        data = urllib.parse.urlencode(
            {"username": "admin", "password": "admin"}
        ).encode()
        req = urllib.request.Request(
            "http://127.0.0.1:8000/api/v1/login",
            data=data,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
        )

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                data = json.loads(response.read().decode())
                return data.get("access_token")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


async def test_ws_with_broadcast(token):
    """–¢–µ—Å—Ç WebSocket + Broadcast –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüîÑ –¢–µ—Å—Ç WebSocket + Broadcast (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)...")

    # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    print("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ WebSocket...")
    uri = "ws://127.0.0.1:8000/ws/queue?department=ENT&date=2025-08-28&token=" + token
    headers = {"Origin": "http://localhost:5173"}

    try:
        async with websockets.connect(uri, additional_headers=headers) as ws:
            print("üîó WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await ws.recv()
            data = json.loads(msg)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {data}")

            if data.get("type") == "queue.connected":
                print("üéØ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ –æ—á–µ—Ä–µ–¥–∏!")

                # 2. –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
                await asyncio.sleep(1)

                # 3. –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º API, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å broadcast
                print("\nüîî –í—ã–∑—ã–≤–∞—é API –¥–ª—è broadcast...")

                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–Ω—å
                print("üìÖ –û—Ç–∫—Ä—ã–≤–∞—é –¥–µ–Ω—å –¥–ª—è ENT...")
                try:
                    req = urllib.request.Request(
                        "http://127.0.0.1:8000/api/v1/appointments/open?department=ENT&date_str=2025-08-28&start_number=1",
                        headers={"Authorization": f"Bearer {token}"},
                        method="POST",
                    )
                    with urllib.request.urlopen(req) as response:
                        print(f"üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è: {response.status} OK")
                        response_data = response.read().decode()
                        print(f"üìÖ –û—Ç–≤–µ—Ç: {response_data}")
                except Exception as e:
                    print(f"üìÖ –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {e}")

                # 4. –ñ–¥—ë–º broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
                print("\n‚è≥ –û–∂–∏–¥–∞—é broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ (5 —Å–µ–∫)...")
                try:
                    msg = await asyncio.wait_for(ws.recv(), timeout=5.0)
                    data = json.loads(msg)
                    print(f"üéâ –ü–û–õ–£–ß–ï–ù–û BROADCAST –°–û–û–ë–©–ï–ù–ò–ï: {data}")
                    return True
                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç - broadcast –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
                except Exception as e:
                    print(f"üì® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    return False
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π WebSocket —Ç–µ—Å—Ç - {datetime.now()}")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = await get_auth_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return

    print(f"üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket + Broadcast
    success = await test_ws_with_broadcast(token)

    print("\n" + "=" * 60)
    if success:
        print("üéâ WebSocket + Broadcast —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 100%!")
    else:
        print("‚ö†Ô∏è WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ broadcast –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç")
    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")


if __name__ == "__main__":
    asyncio.run(main())
