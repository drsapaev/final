#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏
"""
import json
import urllib.parse
import urllib.request
from datetime import datetime, timedelta

BASE_URL = "http://127.0.0.1:8000"


def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin123"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def test_reports_summary_basic(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–≤–æ–¥–∫–µ"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–≤–æ–¥–∫–µ...")

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç—á—ë—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    today = datetime.now().strftime("%Y-%m-%d")
    params = {"from": today, "to": today}

    param_strings = [f"{k}={v}" for k, v in params.items()]
    reports_url = f"{BASE_URL}/api/v1/reports/summary?{'&'.join(param_strings)}"

    try:
        req = urllib.request.Request(reports_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                report_data = json.loads(response_text)

                print(f"    ‚úÖ –û—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
                if isinstance(report_data, dict):
                    print("    ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á—ë—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (JSON –æ–±—ä–µ–∫—Ç)")

                    # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if report_data:
                        print(f"    üìã –ö–ª—é—á–∏ –æ—Ç—á—ë—Ç–∞: {list(report_data.keys())}")
                    else:
                        print("    ‚ö†Ô∏è –û—Ç—á—ë—Ç –ø—É—Å—Ç–æ–π (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")

                    return True
                else:
                    print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á—ë—Ç–∞: {type(report_data)}")
                    return False
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        return False


def test_reports_summary_different_departments(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤...")

    periods = [
        (
            "—Å–µ–≥–æ–¥–Ω—è",
            datetime.now().strftime("%Y-%m-%d"),
            datetime.now().strftime("%Y-%m-%d"),
        ),
        (
            "–≤—á–µ—Ä–∞",
            (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),
            (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),
        ),
        (
            "–Ω–µ–¥–µ–ª—è",
            (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d"),
            datetime.now().strftime("%Y-%m-%d"),
        ),
        (
            "–º–µ—Å—è—Ü",
            (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d"),
            datetime.now().strftime("%Y-%m-%d"),
        ),
    ]

    success_count = 0

    for period_name, date_from, date_to in periods:
        try:
            reports_url = (
                f"{BASE_URL}/api/v1/reports/summary?from={date_from}&to={date_to}"
            )

            req = urllib.request.Request(reports_url)
            req.add_header("Authorization", f"Bearer {token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    print(f"        ‚úÖ –û—Ç—á—ë—Ç –∑–∞ {period_name}: –ø–æ–ª—É—á–µ–Ω")
                    success_count += 1
                else:
                    print(f"        ‚ö†Ô∏è –û—Ç—á—ë—Ç –∑–∞ {period_name}: —Å—Ç–∞—Ç—É—Å {response.status}")

        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á—ë—Ç–∞ –∑–∞ {period_name}: {e}")

    print(f"    üìä –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {success_count}/{len(periods)}")
    return success_count > 0


def test_reports_summary_different_dates(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç...")

    dates = [
        datetime.now().strftime("%Y-%m-%d"),  # –°–µ–≥–æ–¥–Ω—è
        (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),  # –í—á–µ—Ä–∞
        (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d"),  # –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
        (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d"),  # –ú–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    ]

    success_count = 0

    for date in dates:
        try:
            reports_url = f"{BASE_URL}/api/v1/reports/summary?from={date}&to={date}"

            req = urllib.request.Request(reports_url)
            req.add_header("Authorization", f"Bearer {token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    print(f"        ‚úÖ –û—Ç—á—ë—Ç –∑–∞ {date}: –ø–æ–ª—É—á–µ–Ω")
                    success_count += 1
                else:
                    print(f"        ‚ö†Ô∏è –û—Ç—á—ë—Ç –∑–∞ {date}: —Å—Ç–∞—Ç—É—Å {response.status}")

        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á—ë—Ç–∞ –∑–∞ {date}: {e}")

    print(f"    üìä –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {success_count}/{len(dates)}")
    return success_count > 0


def test_reports_summary_missing_parameters(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

    # –¢–µ—Å—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'from'
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        reports_url = f"{BASE_URL}/api/v1/reports/summary?to={today}"

        req = urllib.request.Request(reports_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 422:
                print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'from' (422)")
                return True
            else:
                print(
                    f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'from': {response.status}"
                )
                return False
    except urllib.error.HTTPError as e:
        if e.code == 422:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'from' (422)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'from': {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'from': {e}")
        return False


def test_reports_summary_invalid_parameters(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    print("\n‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")

    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
    try:
        reports_url = (
            f"{BASE_URL}/api/v1/reports/summary?from=invalid-date&to=2025-08-29"
        )

        req = urllib.request.Request(reports_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 422:
                print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã (422)")
                return True
            else:
                print(
                    f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã: {response.status}"
                )
                return False
    except urllib.error.HTTPError as e:
        if e.code == 422:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã (422)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã: {e}")
        return False


def test_reports_summary_unauthorized():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á—ë—Ç–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á—ë—Ç–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    try:
        today = datetime.now().strftime("%Y-%m-%d")
        reports_url = f"{BASE_URL}/api/v1/reports/summary?from={today}&to={today}"

        req = urllib.request.Request(reports_url)

        with urllib.request.urlopen(req) as response:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response.status}")
            return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


def test_reports_summary_invalid_token():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á—ë—Ç–∞–º —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ç—á—ë—Ç–∞–º —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")

    try:
        today = datetime.now().strftime("%Y-%m-%d")
        reports_url = f"{BASE_URL}/api/v1/reports/summary?from={today}&to={today}"
        invalid_token = "invalid_token_12345"

        req = urllib.request.Request(reports_url)
        req.add_header("Authorization", f"Bearer {invalid_token}")

        with urllib.request.urlopen(req) as response:
            print(
                f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {response.status}"
            )
            return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {e}")
        return False


def test_reports_summary_data_analysis(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞...")

    try:
        today = datetime.now().strftime("%Y-%m-%d")
        reports_url = f"{BASE_URL}/api/v1/reports/summary?from={today}&to={today}"

        req = urllib.request.Request(reports_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                report_data = json.loads(response_text)

                print("    üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞:")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞
                if isinstance(report_data, dict):
                    for key, value in report_data.items():
                        if isinstance(value, (int, float)):
                            print(f"        üìà {key}: {value} (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)")
                        elif isinstance(value, str):
                            print(f"        üìù {key}: {value} (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)")
                        elif isinstance(value, list):
                            print(f"        üìã {key}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        elif isinstance(value, dict):
                            print(f"        üóÇÔ∏è {key}: –æ–±—ä–µ–∫—Ç —Å {len(value)} –ø–æ–ª—è–º–∏")
                        else:
                            print(f"        ‚ùì {key}: {type(value).__name__}")

                    return True
                else:
                    print(f"    ‚ùå –û—Ç—á—ë—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º: {type(report_data)}")
                    return False
            else:
                print(
                    f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {response.status}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—á—ë—Ç–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = get_auth_token()
    if not token:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–ë–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–≤–æ–¥–∫–µ", lambda: test_reports_summary_basic(token)),
        (
            "–û—Ç—á—ë—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤",
            lambda: test_reports_summary_different_departments(token),
        ),
        ("–û—Ç—á—ë—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç", lambda: test_reports_summary_different_dates(token)),
        (
            "–û—Ç—á—ë—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
            lambda: test_reports_summary_missing_parameters(token),
        ),
        (
            "–û—Ç—á—ë—Ç—ã —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
            lambda: test_reports_summary_invalid_parameters(token),
        ),
        ("–î–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", test_reports_summary_unauthorized),
        ("–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º", test_reports_summary_invalid_token),
        ("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞", lambda: test_reports_summary_data_analysis(token)),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            print(f"\n{'='*60}")
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–¢–ß–Å–¢–ù–û–°–¢–ò:")

    for test_name, result in results:
        status = "–£–°–ü–ï–®–ù–û" if result else "–û–®–ò–ë–ö–ê"
        print(f"  ‚úÖ {test_name}: {status}")

    success_count = sum(1 for _, result in results if result)
    total_count = len(results)

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 80)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
