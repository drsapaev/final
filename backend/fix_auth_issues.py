#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.db.session import SessionLocal
from app.models.user import User
from app.models.role_permission import Role, user_roles_table
from sqlalchemy import select
from datetime import datetime, timedelta
from jose import jwt
from app.core.config import settings

def fix_auth_issues():
    with SessionLocal() as db:
        print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin@example.com
        user = db.query(User).filter(User.username == 'admin@example.com').first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username} (ID: {user.id})")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
        user_roles_query = select(user_roles_table).where(user_roles_table.c.user_id == user.id)
        user_roles = db.execute(user_roles_query).fetchall()

        if not user_roles:
            print("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...")

            # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å Admin –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            admin_role = db.query(Role).filter(Role.name == "Admin").first()
            if not admin_role:
                admin_role = Role(name="Admin", description="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
                db.add(admin_role)
                db.commit()
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å Admin")

            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            insert_stmt = user_roles_table.insert().values(user_id=user.id, role_id=admin_role.id)
            db.execute(insert_stmt)
            db.commit()
            print(f"‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username}")
        else:
            print("‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–æ–ª–∏:")
            for ur in user_roles:
                role = db.query(Role).filter(Role.id == ur.role_id).first()
                print(f"   - {role.name if role else 'Unknown'}")

        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω...")
        payload = {'sub': str(user.id), 'user_id': user.id, 'username': user.username}
        token = jwt.encode({**payload, 'exp': datetime.utcnow() + timedelta(hours=1)},
                          settings.SECRET_KEY,
                          algorithm=getattr(settings, 'ALGORITHM', 'HS256'))
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {token[:50]}...")

        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
        import requests

        headers = {'Authorization': f'Bearer {token}'}

        # –¢–µ—Å—Ç /auth/me
        try:
            response = requests.get('http://localhost:8000/api/v1/auth/me', headers=headers)
            print(f"üîç /auth/me: {response.status_code}")
            if response.status_code == 200:
                print("‚úÖ /auth/me —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå /auth/me: {response.text}")
        except Exception as e:
            print(f"‚ùå /auth/me: {e}")

        # –¢–µ—Å—Ç /admin/wizard-settings
        try:
            response = requests.get('http://localhost:8000/api/v1/admin/wizard-settings', headers=headers)
            print(f"üîç /admin/wizard-settings: {response.status_code}")
            if response.status_code == 200:
                print("‚úÖ /admin/wizard-settings —Ä–∞–±–æ—Ç–∞–µ—Ç")
            elif response.status_code == 401:
                print("‚ùå /admin/wizard-settings: –ù–µ—Ç —Ä–æ–ª–∏ Admin")
            else:
                print(f"‚ùå /admin/wizard-settings: {response.text}")
        except Exception as e:
            print(f"‚ùå /admin/wizard-settings: {e}")

        # –¢–µ—Å—Ç /users/users
        try:
            response = requests.get('http://localhost:8000/api/v1/users/users', headers=headers)
            print(f"üîç /users/users: {response.status_code}")
            if response.status_code == 200:
                print("‚úÖ /users/users —Ä–∞–±–æ—Ç–∞–µ—Ç")
            elif response.status_code == 401:
                print("‚ùå /users/users: –ù–µ—Ç —Ä–æ–ª–∏ Admin")
            else:
                print(f"‚ùå /users/users: {response.text}")
        except Exception as e:
            print(f"‚ùå /users/users: {e}")

if __name__ == "__main__":
    fix_auth_issues()
