#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–Ω–∏–∫–∏
"""
import json
import time
import urllib.parse
import urllib.request
from datetime import datetime, timedelta

BASE_URL = "http://127.0.0.1:8000"


def test_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω"""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    login_attempts = [
        {"username": "admin", "password": "admin"},
        {"username": "test", "password": "test"},
        {"username": "user", "password": "user"}
    ]

    for login_data in login_attempts:
        try:
            form_data = urllib.parse.urlencode(login_data).encode("utf-8")
            req = urllib.request.Request(login_url, data=form_data)
            req.add_header("Content-Type", "application/x-www-form-urlencoded")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    token_data = json.loads(response_text)
                    token = token_data["access_token"]
                    print(f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω —Å {login_data['username']}")
                    return token
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —Å {login_data['username']}: {e}")
            continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    print("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)")
    return None


def test_create_patient(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞...")

    patient_data = {
        "first_name": "–ú–∞—Ä–∏—è",
        "last_name": "–°–∏–¥–æ—Ä–æ–≤–∞",
        "birth_date": "1985-05-15",
        "gender": "F",
        "phone": "+998901234568",
    }

    patient_url = f"{BASE_URL}/api/v1/patients/patients"

    try:
        req = urllib.request.Request(
            patient_url, data=json.dumps(patient_data).encode("utf-8")
        )
        req.add_header("Content-Type", "application/json")
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status in [200, 201]:
                response_text = response.read().decode("utf-8")
                patient = json.loads(response_text)
                print(
                    f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {patient['first_name']} {patient['last_name']} (ID: {patient['id']})"
                )
                return patient["id"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        return None


def test_create_visit(token, patient_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞...")

    visit_data = {"patient_id": patient_id, "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"}

    visit_url = f"{BASE_URL}/api/v1/visits/visits"

    try:
        req = urllib.request.Request(
            visit_url, data=json.dumps(visit_data).encode("utf-8")
        )
        req.add_header("Content-Type", "application/json")
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status in [200, 201]:
                response_text = response.read().decode("utf-8")
                visit = json.loads(response_text)
                print(
                    f"‚úÖ –í–∏–∑–∏—Ç —Å–æ–∑–¥–∞–Ω: ID {visit['id']} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {visit['patient_id']}"
                )
                return visit["id"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {e}")
        return None


def test_reschedule_visit(token, visit_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å...")

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")

    # new_date –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ query parameter, –∞ –Ω–µ –≤ JSON body
    reschedule_url = (
        f"{BASE_URL}/api/v1/visits/visits/{visit_id}/reschedule?new_date={tomorrow}"
    )

    try:
        req = urllib.request.Request(reschedule_url)
        req.add_header("Authorization", f"Bearer {token}")
        req.get_method = lambda: "POST"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º POST, –∞ –Ω–µ PUT

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                result = json.loads(response_text)
                print(f"    ‚úÖ –í–∏–∑–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞ {tomorrow}: {result}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤–∏–∑–∏—Ç–∞: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤–∏–∑–∏—Ç–∞: {e}")
        return False


def test_reschedule_tomorrow(token, visit_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")

    reschedule_url = f"{BASE_URL}/api/v1/visits/visits/{visit_id}/reschedule/tomorrow"

    try:
        req = urllib.request.Request(reschedule_url)
        req.add_header("Authorization", f"Bearer {token}")
        req.get_method = lambda: "POST"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º POST, –∞ –Ω–µ PUT

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                result = json.loads(response_text)
                print(f"    ‚úÖ –í–∏–∑–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {result}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
        return False


def test_get_visit_status(token, visit_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑–∏—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑–∏—Ç–∞...")

    # –≠–Ω–¥–ø–æ–∏–Ω—Ç /status - —ç—Ç–æ POST –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –∞ –Ω–µ GET –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /visits/{visit_id}
    status_url = f"{BASE_URL}/api/v1/visits/visits/{visit_id}"

    try:
        req = urllib.request.Request(status_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                visit = json.loads(response_text)
                status = visit.get("status", "N/A")
                print(f"    ‚úÖ –°—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {status}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False


def test_get_visit_details(token, visit_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–∑–∏—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–∑–∏—Ç–∞...")

    details_url = f"{BASE_URL}/api/v1/visits/visits/{visit_id}"

    try:
        req = urllib.request.Request(details_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                result = json.loads(response_text)
                # –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç VisitWithServices —Å –ø–æ–ª—è–º–∏ visit –∏ services
                if "visit" in result:
                    visit = result["visit"]
                    print(
                        f"    ‚úÖ –î–µ—Ç–∞–ª–∏ –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã: ID {visit['id']}, —Å—Ç–∞—Ç—É—Å: {visit.get('status', 'N/A')}"
                    )
                    return True
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {result}")
                    return False
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
        return False


def test_public_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    public_endpoints = [
        "/api/v1/health",
        "/api/v1/status",
        "/api/v1/queue/stats",
        "/api/v1/appointments/stats"
    ]
    
    success_count = 0
    for endpoint in public_endpoints:
        try:
            req = urllib.request.Request(f"{BASE_URL}{endpoint}")
            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    print(f"‚úÖ {endpoint}: OK")
                    success_count += 1
                else:
                    print(f"‚ö†Ô∏è {endpoint}: HTTP {response.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è {endpoint}: {e}")
    
    print(f"\nüìä –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {success_count}/{len(public_endpoints)} —Ä–∞–±–æ—Ç–∞—é—Ç")
    return success_count > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤–∏–∑–∏—Ç–æ–≤ –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 70)

    # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    token = test_login()
    if not token:
        print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)")
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        test_public_endpoints()
        return

    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patient_id = test_create_patient(token)
    if not patient_id:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        return

    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
    visit_id = test_create_visit(token, patient_id)
    if not visit_id:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç")
        return

    # –®–∞–≥ 4: –ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
    reschedule_success = test_reschedule_visit(token, visit_id)

    # –®–∞–≥ 5: –ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    tomorrow_success = test_reschedule_tomorrow(token, visit_id)

    # –®–∞–≥ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑–∏—Ç–∞
    status_success = test_get_visit_status(token, visit_id)

    # –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–∑–∏—Ç–∞
    details_success = test_get_visit_details(token, visit_id)

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–ï–†–ï–ù–û–°–ê –í–ò–ó–ò–¢–û–í:")
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {'–£–°–ü–ï–®–ù–û' if patient_id else '–û–®–ò–ë–ö–ê'}")
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞: {'–£–°–ü–ï–®–ù–û' if visit_id else '–û–®–ò–ë–ö–ê'}")
    print(
        f"  ‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å: {'–£–°–ü–ï–®–ù–û' if reschedule_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(
        f"  ‚úÖ –ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {'–£–°–ü–ï–®–ù–û' if tomorrow_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∑–∏—Ç–∞: {'–£–°–ü–ï–®–ù–û' if status_success else '–û–®–ò–ë–ö–ê'}")
    print(
        f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≤–∏–∑–∏—Ç–∞: {'–£–°–ü–ï–®–ù–û' if details_success else '–û–®–ò–ë–ö–ê'}"
    )

    success_count = sum(
        [
            bool(patient_id),
            bool(visit_id),
            reschedule_success,
            tomorrow_success,
            status_success,
            details_success,
        ]
    )
    total_count = 6

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 70)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
