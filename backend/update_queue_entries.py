#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä
"""

import sqlite3

def update_queue_entries():
    """–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    conn = sqlite3.connect('clinic.db')
    cursor = conn.cursor()
    
    print("üîß –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–ü–ò–°–ò –í –û–ß–ï–†–ï–î–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –æ—á–µ—Ä–µ–¥–µ–π
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%queue%'")
    queue_tables = cursor.fetchall()
    print(f"üìã –¢–∞–±–ª–∏—Ü—ã –æ—á–µ—Ä–µ–¥–µ–π: {[t[0] for t in queue_tables]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É daily_queues
    try:
        cursor.execute("SELECT id, specialty, created_at FROM daily_queues ORDER BY created_at DESC LIMIT 10")
        daily_queues = cursor.fetchall()
        print(f"\nüìÖ –ü–û–°–õ–ï–î–ù–ò–ï –û–ß–ï–†–ï–î–ò ({len(daily_queues)} –Ω–∞–π–¥–µ–Ω–æ):")
        for queue in daily_queues:
            print(f"  ID {queue[0]}: {queue[1]} (—Å–æ–∑–¥–∞–Ω–∞: {queue[2]})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ daily_queues: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É online_queue_entries
    try:
        cursor.execute("SELECT id, queue_id, services, service_codes FROM online_queue_entries ORDER BY created_at DESC LIMIT 10")
        entries = cursor.fetchall()
        print(f"\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò –í –û–ß–ï–†–ï–î–ò ({len(entries)} –Ω–∞–π–¥–µ–Ω–æ):")
        for entry in entries:
            print(f"  ID {entry[0]}: –æ—á–µ—Ä–µ–¥—å {entry[1]}, —É—Å–ª—É–≥–∏: {entry[2]}, –∫–æ–¥—ã: {entry[3]}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ online_queue_entries: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
    print(f"\nüîç –ü–†–û–í–ï–†–Ø–ï–ú –ó–ê–ü–ò–°–ò –° –ü–†–û–¶–ï–î–£–†–ê–ú–ò:")
    print("-" * 40)
    
    try:
        # –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
        cursor.execute("""
            SELECT oqe.id, oqe.queue_id, dq.specialty, oqe.services, oqe.service_codes
            FROM online_queue_entries oqe
            JOIN daily_queues dq ON oqe.queue_id = dq.id
            WHERE oqe.service_codes IS NOT NULL
            ORDER BY oqe.created_at DESC
            LIMIT 10
        """)
        entries_with_services = cursor.fetchall()
        
        for entry in entries_with_services:
            entry_id, queue_id, specialty, services, service_codes = entry
            print(f"\n  –ó–∞–ø–∏—Å—å {entry_id} (–æ—á–µ—Ä–µ–¥—å: {specialty}):")
            print(f"    –£—Å–ª—É–≥–∏: {services}")
            print(f"    –ö–æ–¥—ã: {service_codes}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –∫–æ–¥–∞—Ö
            if service_codes:
                import json
                try:
                    codes = json.loads(service_codes) if isinstance(service_codes, str) else service_codes
                    procedure_codes = []
                    for code in codes:
                        if (code.startswith('P') and code[1:].isdigit()) or \
                           (code.startswith('C') and code[1:].isdigit()) or \
                           (code.startswith('D_PROC') and code[6:].isdigit()) or \
                           code.startswith('PHYS_') or \
                           code.startswith('COSM_') or \
                           code.startswith('DERM_'):
                            procedure_codes.append(code)
                    
                    if procedure_codes:
                        print(f"    üéØ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã: {procedure_codes}")
                        if specialty != 'procedures':
                            print(f"    ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –æ—á–µ—Ä–µ–¥–∏ '{specialty}', –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ 'procedures'")
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–æ–≤: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–µ–π: {e}")
    
    conn.close()

if __name__ == "__main__":
    update_queue_entries()
