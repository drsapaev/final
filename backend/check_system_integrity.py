"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–µ–ø–ª–æ–µ–º –∏–ª–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import json
import sqlite3
import sys
from pathlib import Path

import requests


def check_database_roles():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        conn = sqlite3.connect("clinic.db")
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏
        critical_users = [
            "admin",
            "registrar",
            "lab",
            "doctor",
            "cashier",
            "cardio",
            "derma",
            "dentist",
        ]

        for username in critical_users:
            cursor.execute(
                "SELECT role, is_active FROM users WHERE username = ?", (username,)
            )
            result = cursor.fetchone()

            if not result:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

            role, is_active = result
            if not is_active:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return False

            print(f"‚úÖ {username}: —Ä–æ–ª—å '{role}', –∞–∫—Ç–∏–≤–µ–Ω")

        conn.close()
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
        response = requests.post(
            "http://127.0.0.1:8000/api/v1/auth/login",
            data={
                "username": "admin",
                "password": "admin123",
                "grant_type": "password",
            },
        )

        if response.status_code != 200:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞")
            return False

        token = response.json().get("access_token")
        headers = {"Authorization": f"Bearer {token}"}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoints
        endpoints = [
            ("/api/v1/cardio/ecg", "Cardio API"),
            ("/api/v1/derma/examinations", "Derma API"),
            ("/api/v1/dental/examinations", "Dental API"),
            ("/api/v1/lab/tests", "Lab API"),
        ]

        for endpoint, name in endpoints:
            try:
                response = requests.get(
                    f"http://127.0.0.1:8000{endpoint}", headers=headers
                )
                if response.status_code in [200, 404]:  # 404 –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                    print(f"‚úÖ {name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"‚ùå {name}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    return False
            except Exception as e:
                print(f"‚ùå {name}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
                return False

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {e}")
        return False


def check_frontend_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã frontend"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ frontend...")

    frontend_path = Path("../frontend/src")
    if not frontend_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    critical_files = [
        "App.jsx",
        "pages/Login.jsx",
        "pages/UserSelect.jsx",
        "pages/CardiologistPanel.jsx",
        "pages/DermatologistPanel.jsx",
        "pages/DentistPanel.jsx",
    ]

    for file_path in critical_files:
        full_path = frontend_path / file_path
        if not full_path.exists():
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        print(f"‚úÖ {file_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    return True


def check_role_consistency():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–π –º–µ–∂–¥—É frontend –∏ backend"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–æ–ª–µ–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    expected_roles = [
        "Admin",
        "Registrar",
        "Lab",
        "Doctor",
        "Cashier",
        "cardio",
        "derma",
        "dentist",
    ]

    try:
        conn = sqlite3.connect("clinic.db")
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT role FROM users WHERE role IS NOT NULL")
        db_roles = {row[0] for row in cursor.fetchall()}
        conn.close()

        missing_roles = set(expected_roles) - db_roles
        if missing_roles:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –≤ –ë–î: {missing_roles}")
            return False

        extra_roles = db_roles - set(expected_roles)
        if extra_roles:
            print(f"‚ö†Ô∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤ –ë–î: {extra_roles}")

        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
    print("=" * 70)

    checks = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database_roles),
        ("API endpoints", check_api_endpoints),
        ("Frontend —Ñ–∞–π–ª—ã", check_frontend_files),
        ("–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–π", check_role_consistency),
    ]

    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
            results.append((name, False))

    # –ò—Ç–æ–≥–∏
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 70)

    passed = 0
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {name}")
        if result:
            passed += 1

    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{len(results)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if passed == len(results):
        print("üéâ –°–ò–°–¢–ï–ú–ê –¶–ï–õ–û–°–¢–ù–ê! –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
