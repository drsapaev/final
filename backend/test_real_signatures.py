#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏ Payme
"""
import hashlib
import hmac
import json
import time
import urllib.parse
import urllib.request

BASE_URL = "http://127.0.0.1:8000"


def generate_payme_signature(data: dict, secret_key: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è Payme"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    sorted_data = dict(sorted(data.items()))

    # –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    sign_string = ""
    for key, value in sorted_data.items():
        if key != "signature" and value is not None:
            sign_string += f"{key}={value};"

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª ";"
    sign_string = sign_string.rstrip(";")

    # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å—å
    signature = hmac.new(
        secret_key.encode("utf-8"), sign_string.encode("utf-8"), hashlib.sha256
    ).hexdigest()

    return signature


def test_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω"""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
                return token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        return None


def test_payme_webhook_with_real_signature():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ Payme —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ Payme —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é...")

    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    webhook_data = {
        "id": f"payme_test_{int(time.time())}",
        "state": 2,  # 2 = –æ–ø–ª–∞—á–µ–Ω–æ
        "amount": 50000,  # –°—É–º–º–∞ –≤ —Ç–∏–π–∏–Ω–∞—Ö
        "time": int(time.time()),
        "account": {"visit_id": "1", "payment_id": "1"},
        "create_time": int(time.time()) - 300,  # 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        "perform_time": int(time.time()),
        "cancel_time": None,
        "reason": None,
        "receivers": [],
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    secret_key = "test_secret_key_12345"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
    signature = generate_payme_signature(webhook_data, secret_key)
    print(f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—å: {signature[:20]}...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/payme"

    try:
        req = urllib.request.Request(
            webhook_url, data=json.dumps(webhook_data).encode("utf-8")
        )
        req.add_header("Content-Type", "application/json")
        req.add_header("X-Payme-Signature", signature)

        with urllib.request.urlopen(req) as response:
            response_text = response.read().decode("utf-8")
            print(f"üì° –°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: {response.status}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

            if response.status == 200:
                result = json.loads(response_text)
                if result.get("ok"):
                    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    if result.get("webhook_id"):
                        print(f"üìã ID –≤–µ–±—Ö—É–∫–∞: {result['webhook_id']}")
                        return result["webhook_id"]
                else:
                    print(f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –æ—à–∏–±–∫–æ–π: {result.get('message')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        if hasattr(e, "code"):
            print(f"üì° HTTP –∫–æ–¥: {e.code}")
        if hasattr(e, "read"):
            try:
                error_text = e.read().decode("utf-8")
                print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
            except:
                pass

    return None


def check_webhook_status(webhook_id: int, token: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞"""
    if not webhook_id:
        print("‚ùå –ù–µ—Ç ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False

    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞ {webhook_id}...")

    webhook_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/{webhook_id}"

    try:
        req = urllib.request.Request(webhook_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                webhook = json.loads(response_text)
                print("‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞–π–¥–µ–Ω:")
                print(f"  - –°—Ç–∞—Ç—É—Å: {webhook.get('status', 'N/A')}")
                print(f"  - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {webhook.get('provider', 'N/A')}")
                print(f"  - –°—É–º–º–∞: {webhook.get('amount', 'N/A')} —Ç–∏–π–∏–Ω")
                print(f"  - ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {webhook.get('transaction_id', 'N/A')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {response.read().decode('utf-8')}")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏")
    print("=" * 60)

    # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    token = test_login()
    if not token:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        return

    # –®–∞–≥ 2: –¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é
    webhook_id = test_payme_webhook_with_real_signature()

    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞
    if webhook_id:
        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\n‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        time.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        check_webhook_status(webhook_id, token)

    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
