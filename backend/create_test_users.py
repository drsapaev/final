#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
"""
import os
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.db.base_class import Base
from app.models.user import User
from app.core.security import get_password_hash

os.environ["DATABASE_URL"] = "sqlite:///./clinic.db"
os.environ["PYTHONPATH"] = "C:\\final\\backend"

SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./clinic.db")
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def create_test_users():
    db = SessionLocal()
    try:
        print("üîß –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=================================")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        test_users = [
            {
                "username": "registrar",
                "email": "registrar@clinic.com",
                "full_name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤",
                "role": "registrar",
                "password": "registrar123"
            },
            {
                "username": "lab",
                "email": "lab@clinic.com", 
                "full_name": "–õ–∞–±–æ—Ä–∞–Ω—Ç –ü–µ—Ç—Ä–æ–≤",
                "role": "lab",
                "password": "lab123"
            },
            {
                "username": "doctor",
                "email": "doctor@clinic.com",
                "full_name": "–î–æ–∫—Ç–æ—Ä –°–∏–¥–æ—Ä–æ–≤",
                "role": "doctor", 
                "password": "doctor123"
            },
            {
                "username": "cashier",
                "email": "cashier@clinic.com",
                "full_name": "–ö–∞—Å—Å–∏—Ä –ö–æ–∑–ª–æ–≤",
                "role": "cashier",
                "password": "cashier123"
            },
            {
                "username": "cardio",
                "email": "cardio@clinic.com",
                "full_name": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥ –í–æ–ª–∫–æ–≤",
                "role": "cardio",
                "password": "cardio123"
            },
            {
                "username": "derma",
                "email": "derma@clinic.com",
                "full_name": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥ –ú–æ—Ä–æ–∑–æ–≤",
                "role": "derma",
                "password": "derma123"
            },
            {
                "username": "dentist",
                "email": "dentist@clinic.com",
                "full_name": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ –õ–µ–±–µ–¥–µ–≤",
                "role": "dentist",
                "password": "dentist123"
            }
        ]
        
        created_count = 0
        updated_count = 0
        
        for user_data in test_users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(User.username == user_data["username"]).first()
            
            if existing_user:
                print(f"   ‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                existing_user.hashed_password = get_password_hash(user_data["password"])
                existing_user.is_active = True
                db.commit()
                updated_count += 1
            else:
                print(f"   ‚ûï –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']}...")
                new_user = User(
                    username=user_data["username"],
                    email=user_data["email"],
                    full_name=user_data["full_name"],
                    hashed_password=get_password_hash(user_data["password"]),
                    role=user_data["role"],
                    is_active=True,
                    is_superuser=False,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow()
                )
                db.add(new_user)
                db.commit()
                db.refresh(new_user)
                created_count += 1
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —Å–æ–∑–¥–∞–Ω —Å ID: {new_user.id}")
        
        print(f"\nüìä –ò–¢–û–ì–ò:")
        print(f"   ‚ûï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {created_count}")
        print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}")
        print(f"   üìù –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {created_count + updated_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"\nüë• –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        all_users = db.query(User).all()
        for user in all_users:
            print(f"   - {user.username} ({user.role}) - {'‚úÖ' if user.is_active else '‚ùå'}")
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    create_test_users()
