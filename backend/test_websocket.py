#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏
"""
import asyncio
import json
import urllib.parse
import urllib.request
from datetime import datetime

import websockets

BASE_URL = "http://127.0.0.1:8000"
WS_URL = "ws://127.0.0.1:8000/ws/queue"
WS_NOAUTH_URL = "ws://127.0.0.1:8000/ws/noauth"


def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin123"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


async def test_websocket_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        async with websockets.connect(WS_NOAUTH_URL) as websocket:
            print("    ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ñ–¥—ë–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {response}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = "ping"
                await websocket.send(test_message)
                print("    ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                return True
            except asyncio.TimeoutError:
                print("    ‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç)")
                return True  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_websocket_with_auth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")

    token = get_auth_token()
    if not token:
        print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return False

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ /ws/queue —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ department –∏ date
        today = datetime.now().strftime("%Y-%m-%d")
        ws_url_with_params = f"{WS_URL}?department=THERAPY&date={today}&token={token}"

        async with websockets.connect(ws_url_with_params) as websocket:
            print("    ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

            # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {response}")
                return True
            except asyncio.TimeoutError:
                print("    ‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ (—Ç–∞–π–º–∞—É—Ç)")
                return True  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ WebSocket —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: {e}")
        return False


async def test_websocket_broadcast():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º broadcast —á–µ—Ä–µ–∑ WebSocket"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º broadcast —á–µ—Ä–µ–∑ WebSocket...")

    token = get_auth_token()
    if not token:
        print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return False

    try:
        # –°–æ–∑–¥–∞—ë–º –¥–≤–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è broadcast
        today = datetime.now().strftime("%Y-%m-%d")
        ws_url_with_params = f"{WS_URL}?department=THERAPY&date={today}&token={token}"

        # –ü–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        websocket1 = await websockets.connect(ws_url_with_params)
        print("    ‚úÖ –ü–µ—Ä–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –í—Ç–æ—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        websocket2 = await websockets.connect(ws_url_with_params)
        print("    ‚úÖ –í—Ç–æ—Ä–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö
        try:
            response1 = await asyncio.wait_for(websocket1.recv(), timeout=2.0)
            print(f"    ‚úÖ –ü–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {response1}")

            response2 = await asyncio.wait_for(websocket2.recv(), timeout=2.0)
            print(f"    ‚úÖ –í—Ç–æ—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {response2}")
        except asyncio.TimeoutError:
            print("    ‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (—Ç–∞–π–º–∞—É—Ç)")

        print("    ‚úÖ –û–±–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã –∫ broadcast")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP API
        # (—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
        broadcast_url = f"{BASE_URL}/api/v1/queue/stats?department=THERAPY&date={datetime.now().strftime('%Y-%m-%d')}"
        req = urllib.request.Request(broadcast_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                print("    ‚úÖ HTTP –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å broadcast)")
            else:
                print(f"    ‚ö†Ô∏è HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {response.status}")

        # –ñ–¥—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ–±–æ–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
        try:
            # –ñ–¥—ë–º –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            response1 = await asyncio.wait_for(websocket1.recv(), timeout=5.0)
            print(f"    ‚úÖ –ü–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ: {response1}")

            # –ñ–¥—ë–º –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
            response2 = await asyncio.wait_for(websocket2.recv(), timeout=5.0)
            print(f"    ‚úÖ –í—Ç–æ—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ: {response2}")

            return True

        except asyncio.TimeoutError:
            print("    ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (—Ç–∞–π–º–∞—É—Ç)")
            return True  # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç broadcast

        finally:
            await websocket1.close()
            await websocket2.close()

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ WebSocket broadcast: {e}")
        return False


async def test_websocket_reconnection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket...")

    try:
        # –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        websocket1 = await websockets.connect(WS_NOAUTH_URL)
        print("    ‚úÖ –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        try:
            response1 = await asyncio.wait_for(websocket1.recv(), timeout=2.0)
            print(f"    ‚úÖ –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ: {response1}")
        except asyncio.TimeoutError:
            print("    ‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await websocket1.close()
        print("    ‚úÖ –ü–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

        # –í—Ç–æ—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        websocket2 = await websockets.connect(WS_NOAUTH_URL)
        print("    ‚úÖ –í—Ç–æ—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        try:
            response2 = await asyncio.wait_for(websocket2.recv(), timeout=2.0)
            print(f"    ‚úÖ –í—Ç–æ—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ: {response2}")
        except asyncio.TimeoutError:
            print("    ‚ö†Ô∏è –í—Ç–æ—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = "reconnect_test"
        await websocket2.send(test_message)
        print("    ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        await websocket2.close()
        print("    ‚úÖ –í—Ç–æ—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

        return True

    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_websocket_error_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ WebSocket"""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ WebSocket...")

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É WebSocket
        invalid_url = "ws://127.0.0.1:8000/invalid_ws"

        try:
            async with websockets.connect(invalid_url) as websocket:
                print("    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É WebSocket")
                return False
        except websockets.exceptions.InvalidURI:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ URI")
            return True
        except Exception as e:
            print(f"    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return True

    except Exception as e:
        print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 70)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–ë–∞–∑–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_websocket_connection),
        ("WebSocket —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", test_websocket_with_auth),
        ("WebSocket broadcast", test_websocket_broadcast),
        ("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket", test_websocket_reconnection),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket", test_websocket_error_handling),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø WEBSOCKET:")

    for test_name, result in results:
        status = "–£–°–ü–ï–®–ù–û" if result else "–û–®–ò–ë–ö–ê"
        print(f"  ‚úÖ {test_name}: {status}")

    success_count = sum(1 for _, result in results if result)
    total_count = len(results)

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 70)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    asyncio.run(main())
