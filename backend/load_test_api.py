import asyncio
import httpx
import time
import sys

async def test_endpoint(client, endpoint):
    try:
        response = await client.get(f"http://127.0.0.1:8000{endpoint}")
        return response.status_code, float(response.elapsed.total_seconds()) if hasattr(response, 'elapsed') else 0.1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
        return 500, 0

async def load_test():
    endpoints = [
        "/api/v1/health",
        "/api/v1/status"
    ]
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 100")
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            start_time = time.time()
            
            tasks = []
            for _ in range(100):
                for endpoint in endpoints:
                    task = test_endpoint(client, endpoint)
                    tasks.append(task)
            
            results = await asyncio.gather(*tasks)
            
            end_time = time.time()
            total_time = end_time - start_time
            
            successful_requests = sum(1 for status, _ in results if status == 200)
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}")
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_requests/len(results)*100):.1f}%")
            
            if successful_requests >= len(results) * 0.8:
                print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
                return True
            else:
                print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å {successful_requests/len(results)*100:.1f}% < 80%")
                return False
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

if __name__ == "__main__":
    result = asyncio.run(load_test())
    sys.exit(0 if result else 1)
