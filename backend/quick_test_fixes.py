#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import requests

def quick_test_fixes():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("üîß –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    try:
        auth_response = requests.post(
            "http://localhost:8000/api/v1/auth/login",
            data={"username": "admin", "password": "admin123"},
            headers={"Content-Type": "application/x-www-form-urlencoded"}
        )
        
        if auth_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}")
            return
        
        token = auth_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ endpoints
    test_endpoints = [
        ("/api/v1/mobile/stats", "Mobile Stats"),
        ("/api/v1/telegram/bot-status", "Telegram Status"),
        ("/api/v1/analytics/quick-stats", "Analytics Quick Stats"),
        ("/api/v1/analytics/dashboard", "Analytics Dashboard")
    ]
    
    results = {"passed": 0, "total": 0}
    
    for endpoint, name in test_endpoints:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", headers=headers, timeout=5)
            
            if response.status_code == 200:
                print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç!")
                results["passed"] += 1
            elif response.status_code == 500:
                print(f"   ‚ùå {name}: 500 Internal Server Error")
                try:
                    error_detail = response.json()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_detail.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')[:100]}...")
                except:
                    print(f"   –¢–µ–∫—Å—Ç: {response.text[:100]}...")
            else:
                print(f"   ‚ö†Ô∏è {name}: –°—Ç–∞—Ç—É—Å {response.status_code}")
            
            results["total"] += 1
            
        except Exception as e:
            print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {e}")
            results["total"] += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['passed']}/{results['total']}")
    print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {(results['passed']/results['total']*100):.1f}%")
    
    if results['passed'] == results['total']:
        print("üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
    elif results['passed'] > results['total'] // 2:
        print("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –ù–£–ñ–ù–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")

if __name__ == "__main__":
    quick_test_fixes()
