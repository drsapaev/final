#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import json
from datetime import datetime, timedelta

import requests

BASE_URL = "http://localhost:8000/api/v1"


def get_auth_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    login_data = {"username": "admin", "password": "admin123"}

    response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
    if response.status_code == 200:
        return response.json().get("access_token")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
        return None


def test_analytics_endpoint(endpoint, params=None):
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    token = get_auth_token()
    if not token:
        return False

    headers = {"Authorization": f"Bearer {token}"}

    try:
        response = requests.get(
            f"{BASE_URL}/analytics/{endpoint}", headers=headers, params=params
        )

        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ {endpoint}: {json.dumps(data, indent=2, ensure_ascii=False)}")
            return True
        else:
            print(f"‚ùå {endpoint}: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("=" * 50)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)

    params = {
        "start_date": start_date.strftime("%Y-%m-%d"),
        "end_date": end_date.strftime("%Y-%m-%d"),
    }

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    endpoints = [
        ("payment-providers", params),
        ("appointment-flow", params),
        ("revenue-breakdown", params),
    ]

    success_count = 0
    total_count = len(endpoints)

    for endpoint, endpoint_params in endpoints:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint}...")
        if test_analytics_endpoint(endpoint, endpoint_params):
            success_count += 1

    print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}/{total_count}")

    if success_count == total_count:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")


if __name__ == "__main__":
    main()
