#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
"""
import subprocess
import sys
import time
import threading
import os
from pathlib import Path


class AutoContinueRunner:
    def __init__(self, command, success_check=None, max_wait_time=30):
        self.command = command
        self.success_check = success_check
        self.max_wait_time = max_wait_time
        self.process = None
        self.success = False

    def run_command(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        try:
            print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(self.command)}")
            self.process = subprocess.Popen(
                self.command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1,
            )

            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            for line in iter(self.process.stdout.readline, ''):
                print(line.rstrip())

            self.process.wait()
            self.success = True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            self.success = False

    def check_success(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if self.success_check:
            return self.success_check()
        return self.success

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º"""
        print("=" * 60)
        print("üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –° –ü–†–û–í–ï–†–ö–û–ô –°–¢–ê–¢–£–°–ê")
        print("=" * 60)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        command_thread = threading.Thread(target=self.run_command, daemon=True)
        command_thread.start()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
        start_time = time.time()
        while command_thread.is_alive():
            if time.time() - start_time > self.max_wait_time:
                print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({self.max_wait_time}—Å)")
                break
            time.sleep(0.5)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if self.check_success():
            print("=" * 60)
            print("‚úÖ –ö–û–ú–ê–ù–î–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            return True
        else:
            print("=" * 60)
            print("‚ùå –ö–û–ú–ê–ù–î–ê –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–û–ô")
            print("=" * 60)
            return False


def check_server_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    import requests

    try:
        response = requests.get("http://localhost:8000/api/v1/health", timeout=2)
        return response.status_code == 200
    except:
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python run_with_auto_continue.py <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã...]"
        )
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python run_with_auto_continue.py uvicorn app.main:app --reload")
        print("  python run_with_auto_continue.py python test_connection.py")
        sys.exit(1)

    command = sys.argv[1:]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    success_check = None
    if "uvicorn" in command or "run_server" in command:
        success_check = check_server_health
        max_wait = 30
    else:
        max_wait = 10

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
    runner = AutoContinueRunner(command, success_check, max_wait)
    success = runner.run()

    if success:
        print("üéâ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
