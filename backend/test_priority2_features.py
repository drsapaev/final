#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ API, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ 2FA
"""

import urllib.request
import urllib.parse
import json
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"
ADMIN_CREDENTIALS = {
    "username": "admin",
    "password": "admin123"
}

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def get_auth_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º form-encoded –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        data = urllib.parse.urlencode(ADMIN_CREDENTIALS).encode('utf-8')
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/auth/login",
            data=data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        response = urllib.request.urlopen(req, timeout=10)
        if response.getcode() == 200:
            result = json.loads(response.read().decode())
            return result.get('access_token')
        else:
            log(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.getcode()}", "ERROR")
            return None
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}", "ERROR")
        return None

def test_mobile_api():
    """–¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ API"""
    log("üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ API")
    
    token = get_auth_token()
    if not token:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ API", "ERROR")
        return False
    
    headers = {'Authorization': f'Bearer {token}'}
    
    tests = [
        ("/api/v1/mobile/public/health", "–ü—É–±–ª–∏—á–Ω—ã–π health check"),
        ("/api/v1/mobile/public/services", "–ü—É–±–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏"),
    ]
    
    results = []
    for endpoint, description in tests:
        try:
            req = urllib.request.Request(
                f"{BASE_URL}{endpoint}",
                headers=headers
            )
            response = urllib.request.urlopen(req, timeout=10)
            
            if response.getcode() in [200, 201]:
                log(f"‚úÖ {description}: {response.getcode()}")
                results.append(True)
            else:
                log(f"‚ö†Ô∏è {description}: {response.getcode()}")
                results.append(False)
                
        except Exception as e:
            log(f"‚ùå {description}: {e}", "ERROR")
            results.append(False)
    
    return all(results)

def test_notifications():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    log("üîî –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    token = get_auth_token()
    if not token:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "ERROR")
        return False
    
    headers = {'Authorization': f'Bearer {token}'}
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try:
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/notifications/notification-status",
            headers=headers
        )
        response = urllib.request.urlopen(req, timeout=10)
        
        if response.getcode() == 200:
            result = json.loads(response.read().decode())
            log(f"‚úÖ –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω: {result}")
            return True
        else:
            log(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.getcode()}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", "ERROR")
        return False

def test_analytics():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    log("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    
    token = get_auth_token()
    if not token:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", "ERROR")
        return False
    
    headers = {'Authorization': f'Bearer {token}'}
    
    # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    try:
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/analytics/quick-stats",
            headers=headers
        )
        response = urllib.request.urlopen(req, timeout=10)
        
        if response.getcode() == 200:
            result = json.loads(response.read().decode())
            log(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {result}")
            return True
        else:
            log(f"‚ö†Ô∏è –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {response.getcode()}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", "ERROR")
        return False

def test_2fa():
    """–¢–µ—Å—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    log("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é")
    
    token = get_auth_token()
    if not token:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 2FA", "ERROR")
        return False
    
    headers = {'Authorization': f'Bearer {token}'}
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ 2FA
    try:
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/2fa/status",
            headers=headers
        )
        response = urllib.request.urlopen(req, timeout=10)
        
        if response.getcode() == 200:
            result = json.loads(response.read().decode())
            log(f"‚úÖ –°—Ç–∞—Ç—É—Å 2FA –ø–æ–ª—É—á–µ–Ω: {result}")
            return True
        else:
            log(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å 2FA: {response.getcode()}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ 2FA: {e}", "ERROR")
        return False

def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    log("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    token = get_auth_token()
    if not token:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞", "ERROR")
        return False
    
    headers = {'Authorization': f'Bearer {token}'}
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ API
    try:
        patient_data = {
            "first_name": "–¢–µ—Å—Ç",
            "last_name": "–ü–∞—Ü–∏–µ–Ω—Ç",
            "email": "test.patient@example.com",
            "phone": "+998901234567",
            "birth_date": "1990-01-01"
        }
        
        data = json.dumps(patient_data).encode('utf-8')
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/patients/",
            data=data,
            headers={**headers, 'Content-Type': 'application/json'}
        )
        
        response = urllib.request.urlopen(req, timeout=10)
        if response.getcode() in [200, 201]:
            result = json.loads(response.read().decode())
            patient_id = result.get('id')
            log(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {patient_id}")
            
            # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_data = {
                "patient_id": patient_id,
                "appointment_date": (datetime.now() + timedelta(days=1)).isoformat(),
                "doctor_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á",
                "department": "–¢–ï–†–ê–ü–ò–Ø"
            }
            
            data = json.dumps(notification_data).encode('utf-8')
            req = urllib.request.Request(
                f"{BASE_URL}/api/v1/notifications/send-appointment-reminder",
                data=data,
                headers={**headers, 'Content-Type': 'application/json'}
            )
            
            response = urllib.request.urlopen(req, timeout=10)
            if response.getcode() in [200, 201]:
                log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                log(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.getcode()}")
                return False
                
        else:
            log(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {response.getcode()}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2")
    log("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_functions = [
        ("–ú–æ–±–∏–ª—å–Ω–æ–µ API", test_mobile_api),
        ("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", test_notifications),
        ("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", test_analytics),
        ("–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", test_2fa),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç", test_integration)
    ]
    
    results = []
    for test_name, test_func in test_functions:
        log(f"üìã –ó–∞–ø—É—Å–∫: {test_name}")
        try:
            result = test_func()
            results.append(result)
            log(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if result else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        except Exception as e:
            log(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            results.append(False)
        log("")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    log("=" * 60)
    log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    log(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    log(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(sum(results)/len(results)*100):.1f}%")
    
    if sum(results) >= len(results) * 0.8:
        log("üéâ –§–£–ù–ö–¶–ò–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê 2 –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!", "SUCCESS")
        log("‚úÖ –ú–æ–±–∏–ª—å–Ω–æ–µ API –¥–æ—Å—Ç—É–ø–Ω–æ")
        log("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        log("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        log("‚úÖ 2FA –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        log("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    elif sum(results) >= len(results) * 0.6:
        log("‚ö†Ô∏è –§–£–ù–ö–¶–ò–ò –ü–†–ò–û–†–ò–¢–ï–¢–ê 2 –†–ê–ë–û–¢–ê–Æ–¢ –ß–ê–°–¢–ò–ß–ù–û", "WARNING")
        log("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return True
    else:
        log("‚ùå –ï—Å—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ 2", "ERROR")
        log("–ú–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
