#!/usr/bin/env python3
"""
–¢–µ—Å—Ç edge cases —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏
"""
import json
import time
import urllib.parse
import urllib.request

BASE_URL = "http://127.0.0.1:8000"


def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin123"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def test_print_ticket_pdf_edge_cases(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ –±–∏–ª–µ—Ç–∞ –≤ PDF"""
    print("\nüé´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ –±–∏–ª–µ—Ç–∞ –≤ PDF...")

    edge_cases = [
        {
            "department": "A",
            "ticket_number": "1",
            "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ department",
        },
        {
            "department": "A" * 64,
            "ticket_number": "1",
            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ department",
        },
        {"department": "", "ticket_number": "1", "description": "–ü—É—Å—Ç–æ–π department"},
        {
            "department": "THERAPY",
            "ticket_number": "0",
            "description": "–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ = 0",
        },
        {
            "department": "THERAPY",
            "ticket_number": "-1",
            "description": "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞",
        },
        {
            "department": "THERAPY",
            "ticket_number": "abc",
            "description": "–ù–µ—á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞",
        },
    ]

    success_count = 0
    total_count = len(edge_cases)

    for case in edge_cases:
        try:
            print(f"    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {case['description']}")

            params = {
                "department": case["department"],
                "ticket_number": case["ticket_number"],
            }

            param_strings = [f"{k}={v}" for k, v in params.items()]
            print_url = f"{BASE_URL}/api/v1/print/ticket.pdf?{'&'.join(param_strings)}"

            req = urllib.request.Request(print_url)
            req.add_header("Authorization", f"Bearer {token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_data = response.read()
                    print(f"        ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(response_data)} –±–∞–π—Ç")
                    success_count += 1
                else:
                    print(f"        ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status}")

        except urllib.error.HTTPError as e:
            if e.code == 422:
                print("        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω (422)")
                success_count += 1
            else:
                print(f"        ‚ùå HTTP –∫–æ–¥ {e.code}")
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞: {e}")

    print(f"    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    return success_count >= total_count * 0.7


def test_print_invoice_pdf_edge_cases(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å—á—ë—Ç–∞ –≤ PDF"""
    print("\nüßæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å—á—ë—Ç–∞ –≤ PDF...")

    edge_cases = [
        {"visit_id": "1", "description": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID –≤–∏–∑–∏—Ç–∞"},
        {"visit_id": "0", "description": "ID –≤–∏–∑–∏—Ç–∞ = 0"},
        {"visit_id": "-1", "description": "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –≤–∏–∑–∏—Ç–∞"},
        {"visit_id": "abc", "description": "–ù–µ—á–∏—Å–ª–æ–≤–æ–π ID –≤–∏–∑–∏—Ç–∞"},
        {"visit_id": "999999999", "description": "–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π ID –≤–∏–∑–∏—Ç–∞"},
    ]

    success_count = 0
    total_count = len(edge_cases)

    for case in edge_cases:
        try:
            print(f"    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {case['description']}")

            params = {"visit_id": case["visit_id"]}
            param_strings = [f"{k}={v}" for k, v in params.items()]
            print_url = f"{BASE_URL}/api/v1/print/invoice.pdf?{'&'.join(param_strings)}"

            req = urllib.request.Request(print_url)
            req.add_header("Authorization", f"Bearer {token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_data = response.read()
                    print(f"        ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(response_data)} –±–∞–π—Ç")
                    success_count += 1
                else:
                    print(f"        ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status}")

        except urllib.error.HTTPError as e:
            if e.code == 422:
                print("        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω (422)")
                success_count += 1
            elif e.code == 404:
                print("        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω (404): –í–∏–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                success_count += 1
            else:
                print(f"        ‚ùå HTTP –∫–æ–¥ {e.code}")
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞: {e}")

    print(f"    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    return success_count >= total_count * 0.7


def test_print_security_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

    security_cases = [
        {"token": "", "description": "–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω"},
        {"token": "invalid_token", "description": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"},
        {"token": "Bearer", "description": "–¢–æ–ª—å–∫–æ 'Bearer' –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"},
        {"token": "Bearer ", "description": "Bearer —Å –ø—Ä–æ–±–µ–ª–æ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"},
        {"token": "'; DROP TABLE users; --", "description": "SQL Injection –ø–æ–ø—ã—Ç–∫–∞"},
        {"token": "<script>alert('xss')</script>", "description": "XSS –ø–æ–ø—ã—Ç–∫–∞"},
    ]

    success_count = 0
    total_count = len(security_cases)

    for case in security_cases:
        try:
            print(f"    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {case['description']}")

            print_url = (
                f"{BASE_URL}/api/v1/print/ticket.pdf?department=THERAPY&ticket_number=1"
            )

            req = urllib.request.Request(print_url)
            if case["token"]:
                req.add_header("Authorization", f'Bearer {case["token"]}')

            with urllib.request.urlopen(req) as response:
                print(f"        ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø: {response.status}")

        except urllib.error.HTTPError as e:
            if e.code == 401:
                print("        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω (401): –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø")
                success_count += 1
            elif e.code == 422:
                print("        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω (422): –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                success_count += 1
            else:
                print(f"        ‚ö†Ô∏è HTTP –∫–æ–¥ {e.code}")
        except Exception as e:
            print(f"        ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω: {e}")
            success_count += 1

    print(f"    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    return success_count >= total_count * 0.8


def test_print_performance_edge_cases(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        print("    üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥...")

        start_time = time.time()
        for i in range(5):
            params = {"department": "THERAPY", "ticket_number": str(i + 1)}
            param_strings = [f"{k}={v}" for k, v in params.items()]
            print_url = f"{BASE_URL}/api/v1/print/ticket.pdf?{'&'.join(param_strings)}"

            req = urllib.request.Request(print_url)
            req.add_header("Authorization", f"Bearer {token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response.read()
                else:
                    raise Exception(f"HTTP {response.status}")

        end_time = time.time()
        total_time = end_time - start_time
        avg_time = total_time / 5

        print(f"        ‚úÖ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {total_time:.2f}—Å (—Å—Ä–µ–¥–Ω–µ–µ: {avg_time:.2f}—Å)")
        return True

    except Exception as e:
        print(f"        ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è edge cases"""
    print("üöÄ –¢–µ—Å—Ç edge cases —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = get_auth_token()
    if not token:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ edge case —Ç–µ—Å—Ç—ã
    tests = [
        (
            "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ PDF –±–∏–ª–µ—Ç–æ–≤",
            lambda: test_print_ticket_pdf_edge_cases(token),
        ),
        (
            "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ PDF —Å—á–µ—Ç–æ–≤",
            lambda: test_print_invoice_pdf_edge_cases(token),
        ),
        ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", test_print_security_edge_cases),
        (
            "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            lambda: test_print_performance_edge_cases(token),
        ),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            print(f"\n{'='*60}")
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 80)
    print("üîç –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø EDGE CASES –°–ò–°–¢–ï–ú–´ –ü–ï–ß–ê–¢–ò:")

    for test_name, result in results:
        status = "–£–°–ü–ï–®–ù–û" if result else "–û–®–ò–ë–ö–ê"
        print(f"  ‚úÖ {test_name}: {status}")

    success_count = sum(1 for _, result in results if result)
    total_count = len(results)

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï EDGE CASE –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ edge case —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ edge cases, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 80)
    print("üéâ –¢–µ—Å—Ç edge cases –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
