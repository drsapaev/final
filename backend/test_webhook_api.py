#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤
"""
import json
import urllib.parse
import urllib.request

BASE_URL = "http://127.0.0.1:8000"


def test_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω"""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
                return token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        return None


def test_webhook_list(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤...")

    webhook_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment"

    try:
        req = urllib.request.Request(webhook_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
            response_text = response.read().decode("utf-8")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

            if response.status == 200:
                webhooks = json.loads(response_text)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–µ–±—Ö—É–∫–æ–≤: {len(webhooks)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_transaction_list(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    print("\nüí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

    transaction_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/transactions"

    try:
        req = urllib.request.Request(transaction_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
            response_text = response.read().decode("utf-8")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

            if response.status == 200:
                transactions = json.loads(response_text)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_webhook_summary(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –≤–µ–±—Ö—É–∫–æ–≤"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –≤–µ–±—Ö—É–∫–æ–≤...")

    summary_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/summary"

    try:
        req = urllib.request.Request(summary_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
            response_text = response.read().decode("utf-8")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

            if response.status == 200:
                summary = json.loads(response_text)
                print(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤")
    print("=" * 50)

    # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    token = test_login()
    if not token:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
        return

    # –®–∞–≥ 2: –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
    test_webhook_list(token)

    # –®–∞–≥ 3: –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    test_transaction_list(token)

    # –®–∞–≥ 4: –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏
    test_webhook_summary(token)

    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
