"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ EMR —Å–∏—Å—Ç–µ–º—ã
"""
import requests
import json
from datetime import datetime

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000/api/v1"

def test_emr_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMR endpoints"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EMR –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoints
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ EMR endpoints...")
    
    endpoints_to_test = [
        "/emr/templates",
        "/emr/templates/default/load",
        "/health"
    ]
    
    for endpoint in endpoints_to_test:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}")
            print(f"‚úÖ {endpoint}: {response.status_code}")
            if response.status_code == 200:
                print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            elif response.status_code == 401:
                print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–æ–∂–∏–¥–∞–µ–º–æ)")
            else:
                print(f"   –û—à–∏–±–∫–∞: {response.text}")
        except Exception as e:
            print(f"‚ùå {endpoint}: –û—à–∏–±–∫–∞ - {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API...")
    try:
        response = requests.get(f"{BASE_URL}/docs")
        if response.status_code == 200:
            print("‚úÖ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print(f"‚ùå Swagger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Swagger: {e}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö...")
    try:
        response = requests.get(f"{BASE_URL}/openapi.json")
        if response.status_code == 200:
            openapi_data = response.json()
            emr_paths = [path for path in openapi_data.get("paths", {}).keys() if "/emr/" in path]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(emr_paths)} EMR endpoints:")
            for path in emr_paths:
                print(f"   - {path}")
        else:
            print(f"‚ùå OpenAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAPI: {e}")
    
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")

def test_emr_templates_structure():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ EMR"""
    print("\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –®–ê–ë–õ–û–ù–û–í")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —à–∞–±–ª–æ–Ω–æ–≤
    try:
        from app.services.emr_templates import EMRTemplateService
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = EMRTemplateService.get_default_templates()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(templates)} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:")
        
        for i, template in enumerate(templates, 1):
            print(f"\n{i}. {template['template_name']}")
            print(f"   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {template['specialty']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {template['description']}")
            print(f"   –°–µ–∫—Ü–∏–π: {len(template['sections'])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
            for section in template['sections']:
                print(f"     - {section['section_title']} ({len(section['fields'])} –ø–æ–ª–µ–π)")
        
        print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")

def test_emr_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π EMR"""
    print("\nüóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô EMR")
    print("=" * 50)
    
    try:
        from app.models.emr_template import EMRTemplate, EMRVersion
        from app.schemas.emr_template import EMRTemplateCreate, EMRTemplateOut
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ EMR –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
        print(f"   - EMRTemplate: {EMRTemplate.__tablename__}")
        print(f"   - EMRVersion: {EMRVersion.__tablename__}")
        print(f"   - EMRTemplateCreate: {EMRTemplateCreate.__name__}")
        print(f"   - EMRTemplateOut: {EMRTemplateOut.__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã
        test_template_data = {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω",
            "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "specialty": "general",
            "template_structure": {"test": "data"},
            "is_active": True,
            "is_public": True
        }
        
        template_schema = EMRTemplateCreate(**test_template_data)
        print(f"‚úÖ –°—Ö–µ–º–∞ EMRTemplateCreate —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")

if __name__ == "__main__":
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EMR –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_emr_endpoints()
    test_emr_templates_structure()
    test_emr_models()
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
