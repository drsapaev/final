#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π EMR —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import os
import asyncio
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'app')))

from app.db.session import SessionLocal
from app.services.emr_ai_enhanced import emr_ai_enhanced
from app.services.emr_versioning_enhanced import emr_versioning_enhanced
from app.services.emr_lab_integration import emr_lab_integration


async def test_emr_ai_enhanced():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞ EMR"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û AI –°–ï–†–í–ò–°–ê EMR")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞...")
        patient_data = {
            "age": 45,
            "gender": "male",
            "medical_history": ["hypertension", "diabetes"],
            "allergies": ["penicillin"]
        }
        
        template = await emr_ai_enhanced.generate_smart_template(
            specialty="cardiology",
            patient_data=patient_data
        )
        
        print(f"   ‚úÖ –®–∞–±–ª–æ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(template)} –ø–æ–ª–µ–π")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫...")
        current_data = {
            "complaints": "–±–æ–ª—å –≤ –≥—Ä—É–¥–∏",
            "diagnosis": ""
        }
        
        suggestions = await emr_ai_enhanced.get_smart_suggestions(
            current_data=current_data,
            field_name="diagnosis",
            specialty="cardiology"
        )
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {len(suggestions)}")
        
        # –¢–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...")
        template_structure = {
            "complaints": {"type": "textarea", "auto_fill": True},
            "allergies": {"type": "textarea", "auto_fill": True}
        }
        
        filled_data = await emr_ai_enhanced.auto_fill_emr_fields(
            template_structure=template_structure,
            patient_data=patient_data,
            specialty="cardiology"
        )
        
        print(f"   ‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {len(filled_data)}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        emr_data = {
            "complaints": "–±–æ–ª—å –≤ –≥—Ä—É–¥–∏",
            "diagnosis": "—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            "icd10": "I20.9"
        }
        
        validation = await emr_ai_enhanced.validate_emr_data(
            emr_data=emr_data,
            specialty="cardiology"
        )
        
        print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ' if validation['is_valid'] else '‚ùå'}")
        print(f"   –û—à–∏–±–∫–∏: {len(validation['errors'])}")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(validation['warnings'])}")
        
        # –¢–µ—Å—Ç ICD-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ICD-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        icd_suggestions = await emr_ai_enhanced.generate_icd10_suggestions(
            diagnosis_text="–±–æ–ª—å –≤ —Å–µ—Ä–¥—Ü–µ",
            specialty="cardiology"
        )
        
        print(f"   ‚úÖ ICD-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(icd_suggestions)}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã AI —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö AI —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False


async def test_emr_versioning_enhanced():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è EMR"""
    print("\nüìö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –í–ï–†–°–ò–û–ù–ò–†–û–í–ê–ù–ò–Ø EMR")
    print("=" * 50)
    
    try:
        db = SessionLocal()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º...")
        emr_id = 1
        version_data = {
            "complaints": "–±–æ–ª—å –≤ –≥—Ä—É–¥–∏",
            "diagnosis": "—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            "icd10": "I20.9"
        }
        previous_version = {
            "complaints": "—É—Å—Ç–∞–ª–æ—Å—Ç—å",
            "diagnosis": "–∞—Å—Ç–µ–Ω–∏—è"
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é
        version = await emr_versioning_enhanced.create_version_with_analysis(
            db=db,
            emr_id=emr_id,
            version_data=version_data,
            change_type="updated",
            change_description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞",
            changed_by=1,
            previous_version=previous_version
        )
        
        print(f"   ‚úÖ –í–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID {version.id}")
        
        # –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π...")
        comparison = await emr_versioning_enhanced.get_version_comparison(
            db=db,
            emr_id=emr_id,
            version1_id=1,
            version2_id=2
        )
        
        print(f"   ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {comparison['comparison']['fields_changed']} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏...")
        timeline = await emr_versioning_enhanced.get_version_timeline(
            db=db,
            emr_id=emr_id,
            limit=10
        )
        
        print(f"   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è: {len(timeline)} –≤–µ—Ä—Å–∏–π")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Å–∏–π...")
        statistics = await emr_versioning_enhanced.get_version_statistics(
            db=db,
            emr_id=emr_id
        )
        
        print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {statistics['total_versions']} –≤–µ—Ä—Å–∏–π")
        
        db.close()
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


async def test_emr_lab_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ EMR —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò EMR –° –õ–ê–ë–û–†–ê–¢–û–†–ò–ï–ô")
    print("=" * 50)
    
    try:
        db = SessionLocal()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        patient_id = 1
        date_from = datetime.utcnow() - timedelta(days=30)
        
        lab_results = await emr_lab_integration.get_patient_lab_results(
            db=db,
            patient_id=patient_id,
            date_from=date_from
        )
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(lab_results)}")
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å EMR
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å EMR...")
        emr_id = 1
        lab_result_ids = [1, 2, 3]
        
        integration_result = await emr_lab_integration.integrate_lab_results_with_emr(
            db=db,
            emr_id=emr_id,
            lab_result_ids=lab_result_ids
        )
        
        print(f"   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {integration_result['integrated_results']}")
        
        # –¢–µ—Å—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        abnormal_results = await emr_lab_integration.get_abnormal_lab_results(
            db=db,
            patient_id=patient_id,
            date_from=date_from
        )
        
        print(f"   ‚úÖ –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(abnormal_results)}")
        
        # –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        lab_summary = await emr_lab_integration.generate_lab_summary_for_emr(
            db=db,
            patient_id=patient_id,
            emr_id=emr_id
        )
        
        print(f"   ‚úÖ –°–≤–æ–¥–∫–∞: {lab_summary['summary']['total_tests']} —Ç–µ—Å—Ç–æ–≤")
        
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–∞—á–∞...")
        notification = await emr_lab_integration.notify_doctor_about_lab_results(
            db=db,
            patient_id=patient_id,
            doctor_id=1,
            result_id=1
        )
        
        print(f"   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification['type']}")
        
        db.close()
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π: {e}")
        return False


async def test_emr_export_import():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ EMR"""
    print("\nüì§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê EMR")
    print("=" * 50)
    
    try:
        from app.services.emr_export_service import EMRExportService
        
        export_service = EMRExportService()
        
        # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON...")
        emr_data = {
            "id": 1,
            "complaints": "–±–æ–ª—å –≤ –≥—Ä—É–¥–∏",
            "diagnosis": "—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            "icd10": "I20.9",
            "recommendations": "–∫–æ–Ω—Ç—Ä–æ–ª—å –ê–î"
        }
        
        json_export = await export_service.export_emr_to_json(
            emr_data=emr_data,
            include_versions=True
        )
        
        print(f"   ‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç: {len(json_export)} –ø–æ–ª–µ–π")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ JSON
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ JSON...")
        import_data = await export_service.import_emr_from_json(json_export)
        
        print(f"   ‚úÖ JSON –∏–º–ø–æ—Ä—Ç: {len(import_data)} –ø–æ–ª–µ–π")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞...")
        validation = await export_service.validate_import_data(json_export)
        
        print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞: {'‚úÖ' if validation['is_valid'] else '‚ùå'}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô EMR –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    tests = [
        ("AI Enhanced Service", test_emr_ai_enhanced),
        ("Versioning Enhanced", test_emr_versioning_enhanced),
        ("Lab Integration", test_emr_lab_integration),
        ("Export/Import", test_emr_export_import)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:25} {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ EMR —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
