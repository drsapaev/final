#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç CI/CD –¥–ª—è GitHub Actions
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
"""

import os
import sys
import urllib.request
import urllib.parse
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è GitHub Actions
BASE_URL = os.getenv("TEST_BASE_URL", "http://127.0.0.1:8000")
MAX_RETRIES = int(os.getenv("MAX_RETRIES", "3"))
RETRY_DELAY = int(os.getenv("RETRY_DELAY", "5"))

def log(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è GitHub Actions"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")
    sys.stdout.flush()

def wait_for_server():
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    for attempt in range(MAX_RETRIES):
        try:
            response = urllib.request.urlopen(f"{BASE_URL}/api/v1/health", timeout=10)
            if response.getcode() == 200:
                log("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
                return True
        except Exception as e:
            log(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}: {e}")
            if attempt < MAX_RETRIES - 1:
                time.sleep(RETRY_DELAY)
    
    log("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è", "ERROR")
    return False

def test_endpoint_with_retry(endpoint, expected_status=200, description=""):
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    log(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {endpoint} {description}")
    
    for attempt in range(MAX_RETRIES):
        try:
            response = urllib.request.urlopen(f"{BASE_URL}{endpoint}", timeout=10)
            if response.getcode() == expected_status:
                log(f"‚úÖ {endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: {response.getcode()})")
                return True
            else:
                log(f"‚ö†Ô∏è {endpoint} –≤–µ—Ä–Ω—É–ª {response.getcode()}, –æ–∂–∏–¥–∞–ª–∏ {expected_status}")
                return False
        except Exception as e:
            if attempt < MAX_RETRIES - 1:
                log(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}: {e}")
                time.sleep(RETRY_DELAY)
            else:
                log(f"‚ùå {endpoint} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}", "ERROR")
                return False
    
    return False

def test_health_endpoints():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è"""
    log("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è")
    
    tests = [
        ("/api/v1/health", 200, "–æ—Å–Ω–æ–≤–Ω–æ–π health check"),
        ("/api/v1/status", 200, "—Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    ]
    
    results = []
    for endpoint, expected_status, description in tests:
        result = test_endpoint_with_retry(endpoint, expected_status, description)
        results.append(result)
    
    return all(results)

def test_queue_endpoints():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏"""
    log("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏")
    
    today = datetime.now().strftime("%Y-%m-%d")
    params = urllib.parse.urlencode({
        "department": "THERAPY",
        "date": today
    })
    
    endpoint = f"/api/v1/queue/stats?{params}"
    return test_endpoint_with_retry(endpoint, 200, "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏")

def test_payment_webhooks():
    """–¢–µ—Å—Ç –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    log("üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç—ã")
    
    test_payload = {
        "method": "checkPerformTransaction",
        "params": {
            "id": "test_123",
            "account": {"order_id": "test_order"},
            "amount": 100000
        }
    }
    
    try:
        data = json.dumps(test_payload).encode('utf-8')
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/webhooks/payment/payme",
            data=data,
            headers={'Content-Type': 'application/json'}
        )
        
        response = urllib.request.urlopen(req, timeout=10)
        if response.getcode() in [200, 201, 422]:
            log(f"‚úÖ –í–µ–±—Ö—É–∫–∏ Payme —Ä–∞–±–æ—Ç–∞—é—Ç (–∫–æ–¥: {response.getcode()})")
            return True
        else:
            log(f"‚ö†Ô∏è –í–µ–±—Ö—É–∫–∏ Payme –≤–µ—Ä–Ω—É–ª–∏ {response.getcode()}")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ Payme: {e}", "ERROR")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    log("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ë–î
        today = datetime.now().strftime("%Y-%m-%d")
        params = urllib.parse.urlencode({
            "department": "THERAPY",
            "date": today
        })
        
        response = urllib.request.urlopen(
            f"{BASE_URL}/api/v1/queue/stats?{params}",
            timeout=10
        )
        
        if response.getcode() == 200:
            log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            log(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: –∫–æ–¥ {response.getcode()}")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CI/CD –¥–ª—è GitHub Actions")
    log("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    log(f"   BASE_URL: {BASE_URL}")
    log(f"   MAX_RETRIES: {MAX_RETRIES}")
    log(f"   RETRY_DELAY: {RETRY_DELAY}")
    log("")
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if not wait_for_server():
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", "ERROR")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_functions = [
        ("–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∑–¥–æ—Ä–æ–≤—å—è", test_health_endpoints),
        ("–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏", test_queue_endpoints),
        ("–í–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç—ã", test_payment_webhooks),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection)
    ]
    
    results = []
    for test_name, test_func in test_functions:
        log(f"üìã –ó–∞–ø—É—Å–∫: {test_name}")
        try:
            result = test_func()
            results.append(result)
            log(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–•' if result else '‚ùå –ù–ï–£–î–ê–ß–ê'}")
        except Exception as e:
            log(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            results.append(False)
        log("")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    log("=" * 60)
    log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    log(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    log(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    log(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(sum(results)/len(results)*100):.1f}%")
    
    if sum(results) >= len(results) * 0.8:
        log("üéâ CI/CD –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!", "SUCCESS")
        log("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        log("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        log("‚úÖ –í–µ–±—Ö—É–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã")
        return True
    elif sum(results) >= len(results) * 0.6:
        log("‚ö†Ô∏è CI/CD –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û", "WARNING")
        log("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return True
    else:
        log("‚ùå –ï—Å—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å CI/CD", "ERROR")
        log("–ú–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
