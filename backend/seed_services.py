#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥
–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ –∏ –±–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.db.session import _get_db_url_from_env_or_settings
from app.models.clinic import ServiceCategory
from app.models.service import Service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def seed_service_categories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥"""
    categories = [
        {
            'code': 'cardiology',
            'name_ru': '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è',
            'name_uz': 'Kardiologiya',
            'name_en': 'Cardiology',
            'specialty': 'cardiology',
            'active': True
        },
        {
            'code': 'dermatology',
            'name_ru': '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è',
            'name_uz': 'Dermatologiya',
            'name_en': 'Dermatology',
            'specialty': 'dermatology',
            'active': True
        },
        {
            'code': 'cosmetology',
            'name_ru': '–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è',
            'name_uz': 'Kosmetologiya',
            'name_en': 'Cosmetology',
            'specialty': 'cosmetology',
            'active': True
        },
        {
            'code': 'dentistry',
            'name_ru': '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
            'name_uz': 'Stomatologiya',
            'name_en': 'Dentistry',
            'specialty': 'dentistry',
            'active': True
        },
        {
            'code': 'laboratory',
            'name_ru': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
            'name_uz': 'Laboratoriya',
            'name_en': 'Laboratory',
            'specialty': 'laboratory',
            'active': True
        },
        {
            'code': 'other',
            'name_ru': '–ü—Ä–æ—á–∏–µ —É—Å–ª—É–≥–∏',
            'name_uz': 'Boshqa xizmatlar',
            'name_en': 'Other services',
            'specialty': 'other',
            'active': True
        }
    ]
    
    return categories

def seed_services():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É—Å–ª—É–≥"""
    services = [
        # –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è
        {
            'code': 'consultation.cardiology',
            'name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞',
            'department': 'cardiology',
            'unit': '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            'price': 50000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        },
        {
            'code': 'echo.cardiography',
            'name': '–≠—Ö–æ–ö–ì',
            'department': 'cardiology',
            'unit': '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
            'price': 80000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        },
        {
            'code': 'ecg',
            'name': '–≠–ö–ì',
            'department': 'cardiology',
            'unit': '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
            'price': 25000.00,
            'currency': 'UZS',
            'duration_minutes': 15,
            'active': True
        },
        
        # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è
        {
            'code': 'consultation.dermatology',
            'name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞',
            'department': 'dermatology',
            'unit': '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            'price': 40000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        },
        {
            'code': 'derm.skin_diagnostics',
            'name': '–î–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏—è',
            'department': 'dermatology',
            'unit': '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
            'price': 30000.00,
            'currency': 'UZS',
            'duration_minutes': 20,
            'active': True
        },
        
        # –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è
        {
            'code': 'cosmetology.botox',
            'name': '–ë–æ—Ç—É–ª–æ—Ç–æ–∫—Å–∏–Ω',
            'department': 'cosmetology',
            'unit': '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞',
            'price': 150000.00,
            'currency': 'UZS',
            'duration_minutes': 60,
            'active': True
        },
        {
            'code': 'cosmetology.mesotherapy',
            'name': '–ú–µ–∑–æ—Ç–µ—Ä–∞–ø–∏—è',
            'department': 'cosmetology',
            'unit': '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞',
            'price': 120000.00,
            'currency': 'UZS',
            'duration_minutes': 45,
            'active': True
        },
        {
            'code': 'cosmetology.peel',
            'name': '–ü–∏–ª–∏–Ω–≥',
            'department': 'cosmetology',
            'unit': '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞',
            'price': 40000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        },
        {
            'code': 'cosmetology.laser',
            'name': '–õ–∞–∑–µ—Ä–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
            'department': 'cosmetology',
            'unit': '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞',
            'price': 80000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        },
        
        # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
        {
            'code': 'consultation.dentistry',
            'name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞',
            'department': 'dentistry',
            'unit': '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
            'price': 35000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        },
        
        # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
        {
            'code': 'lab.cbc',
            'name': '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
            'department': 'laboratory',
            'unit': '–∞–Ω–∞–ª–∏–∑',
            'price': 15000.00,
            'currency': 'UZS',
            'duration_minutes': 5,
            'active': True
        },
        {
            'code': 'lab.biochem',
            'name': '–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏',
            'department': 'laboratory',
            'unit': '–∞–Ω–∞–ª–∏–∑',
            'price': 25000.00,
            'currency': 'UZS',
            'duration_minutes': 5,
            'active': True
        },
        {
            'code': 'lab.urine',
            'name': '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –º–æ—á–∏',
            'department': 'laboratory',
            'unit': '–∞–Ω–∞–ª–∏–∑',
            'price': 10000.00,
            'currency': 'UZS',
            'duration_minutes': 5,
            'active': True
        },
        {
            'code': 'lab.coag',
            'name': '–ö–æ–∞–≥—É–ª–æ–≥—Ä–∞–º–º–∞',
            'department': 'laboratory',
            'unit': '–∞–Ω–∞–ª–∏–∑',
            'price': 20000.00,
            'currency': 'UZS',
            'duration_minutes': 5,
            'active': True
        },
        {
            'code': 'lab.hormones',
            'name': '–ì–æ—Ä–º–æ–Ω—ã',
            'department': 'laboratory',
            'unit': '–∞–Ω–∞–ª–∏–∑',
            'price': 30000.00,
            'currency': 'UZS',
            'duration_minutes': 5,
            'active': True
        },
        {
            'code': 'lab.infection',
            'name': '–ò–Ω—Ñ–µ–∫—Ü–∏–∏/—Å–µ—Ä–æ–ª–æ–≥–∏—è',
            'department': 'laboratory',
            'unit': '–∞–Ω–∞–ª–∏–∑',
            'price': 25000.00,
            'currency': 'UZS',
            'duration_minutes': 5,
            'active': True
        },
        
        # –ü—Ä–æ—á–∏–µ
        {
            'code': 'other.general',
            'name': '–ü—Ä–æ—á–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã',
            'department': 'other',
            'unit': '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞',
            'price': 20000.00,
            'currency': 'UZS',
            'duration_minutes': 30,
            'active': True
        }
    ]
    
    return services

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_url = _get_db_url_from_env_or_settings()
        engine = create_engine(db_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        
        with SessionLocal() as db:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            with engine.connect() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É service_categories
                result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='service_categories'"))
                if not result.fetchone():
                    logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ service_categories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏.")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É services
                result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='services'"))
                if not result.fetchone():
                    logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ services –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏.")
                    return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
            logger.info("üìÇ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥...")
            categories_data = seed_service_categories()
            categories_created = 0
            
            for cat_data in categories_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                existing = db.query(ServiceCategory).filter(ServiceCategory.code == cat_data['code']).first()
                if not existing:
                    category = ServiceCategory(**cat_data)
                    db.add(category)
                    categories_created += 1
                    logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_data['name_ru']} ({cat_data['code']})")
                else:
                    logger.info(f"  ‚è≠Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cat_data['name_ru']} ({cat_data['code']})")
            
            db.commit()
            logger.info(f"üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_created}")
            
            # –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
            logger.info("üõ†Ô∏è –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏...")
            services_data = seed_services()
            services_created = 0
            
            for service_data in services_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
                existing = db.query(Service).filter(Service.code == service_data['code']).first()
                if not existing:
                    service = Service(**service_data)
                    db.add(service)
                    services_created += 1
                    logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service_data['name']} ({service_data['code']})")
                else:
                    logger.info(f"  ‚è≠Ô∏è –£—Å–ª—É–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {service_data['name']} ({service_data['code']})")
            
            db.commit()
            logger.info(f"üõ†Ô∏è –°–æ–∑–¥–∞–Ω–æ —É—Å–ª—É–≥: {services_created}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_categories = db.query(ServiceCategory).count()
            total_services = db.query(Service).count()
            
            logger.info("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"  üìÇ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: {total_categories}")
            logger.info(f"  üõ†Ô∏è –í—Å–µ–≥–æ —É—Å–ª—É–≥ –≤ –ë–î: {total_services}")
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
