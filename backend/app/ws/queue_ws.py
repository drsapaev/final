from __future__ import annotations

import asyncio
import logging
import os
from collections import defaultdict
from typing import Dict, Set

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, status

log = logging.getLogger("ws.queue")
log.setLevel(logging.INFO)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å INFO

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ handlers
if not log.handlers:
    # –°–æ–∑–¥–∞—ë–º handler –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    handler = logging.StreamHandler()
    handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(name)s: %(levelname)s: %(message)s')
    handler.setFormatter(formatter)
    log.addHandler(handler)
    log.info("WS logger initialized with console handler")

router = APIRouter()

# -----------------------------------------------------------------------------
# –ú–µ–Ω–µ–¥–∂–µ—Ä WS-–∫–æ–º–Ω–∞—Ç
# -----------------------------------------------------------------------------
class WSManager:
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.rooms = defaultdict(set)
            print(f"üîß WSManager: —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä")
        return cls._instance
    
    def __init__(self) -> None:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ __new__
        pass

    async def connect(self, ws: WebSocket, room: str) -> None:
        log.info("WSManager: connecting to room %s", room)
        self.rooms[room].add(ws)
        log.info("WSManager: room %s now has %d connections", room, len(self.rooms[room]))

    def disconnect(self, ws: WebSocket, room: str) -> None:
        log.info("WSManager: disconnecting from room %s", room)
        s = self.rooms.get(room)
        if not s:
            return
        s.discard(ws)
        if not s:
            self.rooms.pop(room, None)
            log.info("WSManager: room %s removed (empty)", room)
        else:
            log.info("WSManager: room %s now has %d connections", room, len(s))

    async def _send_one(self, ws: WebSocket, data) -> None:
        try:
            await ws.send_json(data)
            log.info("WSManager: sent message to websocket in room")
        except Exception as e:
            log.error("WSManager: error sending to websocket: %s", e)
            # —É–¥–∞–ª–∏—Ç—å ¬´–º–µ—Ä—Ç–≤—ã–π¬ª —Å–æ–∫–µ—Ç –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
            for r, set_ws in list(self.rooms.items()):
                if ws in set_ws:
                    set_ws.discard(ws)
                    if not set_ws:
                        self.rooms.pop(r, None)
                        log.info("WSManager: removed dead websocket from room %s", r)

    def broadcast(self, room: str, data) -> None:
        log.info("WSManager: broadcasting to room %s, data: %s", room, data)
        log.info("WSManager: room %s has %d connections", room, len(self.rooms.get(room, set())))
        log.info("WSManager: all rooms: %s", list(self.rooms.keys()))
        
        for ws in list(self.rooms.get(room, set())):
            log.info("WSManager: sending to websocket in room %s", room)
            # –£–±–∏—Ä–∞–µ–º asyncio.create_task –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            # asyncio.create_task(self._send_one(ws, data))
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º _send_one —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            # –ù–æ _send_one - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
            try:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
                import asyncio
                try:
                    loop = asyncio.get_running_loop()
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞—ë–º task
                    asyncio.create_task(self._send_one(ws, data))
                except RuntimeError:
                    # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
                    asyncio.run(self._send_one(ws, data))
            except Exception as e:
                log.error("WSManager: error creating task: %s", e)


ws_manager = WSManager()
print(f"üîß WSManager: —Å–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä {id(ws_manager)}")

def _origin_allowed(origin: str | None) -> bool:
    if os.getenv("CORS_DISABLE", "0") == "1":
        return True
    if not origin:
        return False
    allowed = [
        o.strip()
        for o in os.getenv(
            "CORS_ORIGINS", "http://localhost:5173,http://localhost:3000"
        ).split(",")
        if o.strip()
    ]
    return origin in allowed

def _auth_ok(headers, token_qs: str | None) -> bool:
    if os.getenv("WS_DEV_ALLOW", "0") == "1":
        return True
    auth = headers.get("authorization") or headers.get("Authorization")
    if auth and auth.lower().startswith("bearer "):
        return True
    if token_qs:
        return True
    return False

# -----------------------------------------------------------------------------
# DEBUG: –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π —Å–æ–∫–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
# -----------------------------------------------------------------------------
@router.websocket("/ws/noauth")
async def ws_noauth(websocket: WebSocket):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ —Å—Ä–∞–∑—É –∏ —à–ª—ë–º –ø—Ä–∏–≤–µ—Ç
    await websocket.accept()
    await websocket.send_json({"type": "connected", "room": "noauth"})
    try:
        while True:
            await websocket.receive_text()
    except WebSocketDisconnect:
        pass

# -----------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–æ–∫–µ—Ç –æ—á–µ—Ä–µ–¥–∏: –°–ù–ê–ß–ê–õ–ê accept(), –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
# -----------------------------------------------------------------------------
@router.websocket("/ws/queue")
async def ws_queue(websocket: WebSocket, department: str, date: str, token: str | None = None):
    origin = websocket.headers.get("origin")
    log.info("WS connect origin=%s path=%s query=%s", origin, websocket.url.path, websocket.url.query)

    # ‚úÖ DEV shortcut: –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω DEV-—Ä–µ–∂–∏–º, —Å—Ä–∞–∑—É –ø—Ä–∏–Ω–∏–º–∞–µ–º
    if os.getenv("WS_DEV_ALLOW", "0") == "1":
        await websocket.accept()
        await websocket.send_json({"type": "dev.accepted", "room": f"{department}::{date}"})
        return

    # Origin
    if not _origin_allowed(origin):
        await websocket.accept()
        await websocket.send_json({"type": "error", "reason": "origin not allowed"})
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
        return

    # Auth
    if not _auth_ok(websocket.headers, token):
        await websocket.accept()
        await websocket.send_json({"type": "error", "reason": "auth required"})
        await websocket.close(code=status.WS_1008_POLICY_VIOLATION)
        return

    # ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ ‚Äî accept
    await websocket.accept()

    room = f"{department.strip()}::{date.strip()}"
    await ws_manager.connect(websocket, room)

    try:
        await websocket.send_json({"type": "queue.connected", "room": room})
        while True:
            try:
                await websocket.receive_text()
            except Exception:
                await asyncio.sleep(0.05)
    except WebSocketDisconnect:
        pass
    finally:
        ws_manager.disconnect(websocket, room)
