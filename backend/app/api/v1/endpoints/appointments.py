# app/api/v1/endpoints/appointments.py
from datetime import datetime
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.orm import Session

from app.api.deps import get_db, get_current_user, require_roles
from app.services.online_queue import load_stats, _broadcast  # –î–æ–±–∞–≤–ª—è–µ–º _broadcast
from app.models.setting import Setting
from app.services.online_queue import get_or_create_day

router = APIRouter(prefix="/appointments", tags=["appointments"])


# --- helpers ---------------------------------------------------------------

def _pick_date(date_str: Optional[str], date: Optional[str], d: Optional[str]) -> str:
    """–ë–µ—Ä—ë–º –¥–∞—Ç—É –∏–∑ –ª—é–±–æ–≥–æ –∏–∑ 3—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤; –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî 422."""
    v = (date_str or date or d)
    if not v:
        raise HTTPException(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            detail="date is required (use ?date_str=YYYY-MM-DD or ?date=... or ?d=...)",
        )
    return v


def _upsert_queue_setting(db: Session, key: str, value: str) -> None:
    """–ü—Ä–æ—Å—Ç–æ–π upsert –≤ —Ç–∞–±–ª–∏—Ü—É settings (category='queue'). –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º created_at/updated_at."""
    now = datetime.utcnow()
    row = (
        db.query(Setting)
        .filter(Setting.category == "queue", Setting.key == key)
        .with_for_update(read=True)
        .first()
    )
    if row:
        row.value = value
        row.updated_at = now
    else:
        row = Setting(category="queue", key=key, value=value, created_at=now, updated_at=now)
        db.add(row)
    # –∫–æ–º–º–∏—Ç –¥–µ–ª–∞—Ç—å –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—É –Ω–∞—Å ‚Äî —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–≤—É—Ö –∞–ø–¥–µ–π—Ç–æ–≤)


# --- endpoints -------------------------------------------------------------

@router.post("/open", name="open_day", dependencies=[Depends(require_roles("Admin"))])
def open_day(
    department: str = Query(..., description="–ù–∞–ø—Ä–∏–º–µ—Ä ENT"),
    date_str: str = Query(..., description="YYYY-MM-DD"),
    start_number: int = Query(..., ge=0),
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),  # –ø—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏–ª—Å—è
):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–µ–Ω—å –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏:
    - queue::{dep}::{date}::open = 1
    - queue::{dep}::{date}::start_number = {start_number}
    (last_ticket –Ω–µ —Ç—Ä–æ–≥–∞–µ–º; –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –≤—ã–¥–∞—á–∏ —Ç–∞–ª–æ–Ω–æ–≤)
    """
    key_prefix = f"{department}::{date_str}"

    _upsert_queue_setting(db, f"{key_prefix}::open", "1")
    _upsert_queue_setting(db, f"{key_prefix}::start_number", str(start_number))
    db.commit()

    # –≤–µ—Ä–Ω—ë–º –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç + —Å–≤–æ–¥–∫—É
    stats = load_stats(db, department=department, date_str=date_str)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast –≤ WebSocket
    try:
        print(f"üîî Attempting to import _broadcast...")
        print(f"üîî _broadcast imported successfully")
        print(f"üîî Calling _broadcast({department}, {date_str}, stats)")
        print(f"üîî Stats object: {stats}")
        print(f"üîî Stats type: {type(stats)}")
        _broadcast(department, date_str, stats)
        print(f"üîî _broadcast called successfully")
    except Exception as e:
        # –ù–µ —Ä–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ broadcast –Ω–µ —É–¥–∞–ª—Å—è
        print(f"‚ö†Ô∏è Broadcast error in open_day: {e}")
        import traceback
        traceback.print_exc()
    return {
        "ok": True,
        "department": department,
        "date_str": date_str,
        "start_number": start_number,
        "is_open": True,
        "last_ticket": getattr(stats, "last_ticket", None),
        "waiting": getattr(stats, "waiting", None),
        "serving": getattr(stats, "serving", None),
        "done": getattr(stats, "done", None),
    }


@router.get("/stats", name="stats")
def stats(
    department: str = Query(...),
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –¥–∞—Ç—ã; –≤–Ω—É—Ç—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    date_str: Optional[str] = Query(None),
    date: Optional[str] = Query(None),
    d: Optional[str] = Query(None),
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    eff_date = _pick_date(date_str, date, d)
    s = load_stats(db, department=department, date_str=eff_date)
    # load_stats –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dataclass DayStats ‚Äî —Ä–∞—Å–ø–∞–∫—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    return {
        "department": department,
        "date_str": eff_date,
        "is_open": getattr(s, "is_open", False),
        "start_number": getattr(s, "start_number", 0),
        "last_ticket": getattr(s, "last_ticket", 0),
        "waiting": getattr(s, "waiting", 0),
        "serving": getattr(s, "serving", 0),
        "done": getattr(s, "done", 0),
    }


@router.post("/close", name="close_day", dependencies=[Depends(require_roles("Admin"))])
def close_day(
    department: str = Query(..., description="–ù–∞–ø—Ä–∏–º–µ—Ä ENT"),
    date_str: str = Query(..., description="YYYY-MM-DD"),
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user),
):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –æ–Ω–ª–∞–π–Ω-–Ω–∞–±–æ—Ä (–∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º —Å–µ–π—á–∞—Å¬ª).
    –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç OnlineDay.is_open = False –¥–ª—è department+date.
    """
    get_or_create_day(db, department=department, date_str=date_str, open_flag=False)
    db.commit()
    s = load_stats(db, department=department, date_str=date_str)
    return {
        "ok": True,
        "department": department,
        "date_str": date_str,
        "is_open": s.is_open,
        "start_number": s.start_number,
        "last_ticket": s.last_ticket,
        "waiting": s.waiting,
        "serving": s.serving,
        "done": s.done,
    }


@router.get("/qrcode", name="qrcode_png")
def qrcode_png(
    department: str = Query(...),
    date_str: Optional[str] = Query(None),
    date: Optional[str] = Query(None),
    d: Optional[str] = Query(None),
    current_user=Depends(get_current_user),
):
    """
    –ú–∞—Ä—à—Ä—É—Ç-–∑–∞–≥–ª—É—à–∫–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞, –≥–¥–µ —É–∂–µ —Ä–∏—Å—É–µ—Ç—Å—è QR
    (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PNG ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ç—É—Ç).
    """
    eff_date = _pick_date(date_str, date, d)
    payload = f"{department}::{eff_date}"
    return {"format": "text", "data": payload}
