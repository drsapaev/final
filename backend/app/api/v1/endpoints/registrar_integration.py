"""
API endpoints –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
–û—Å–Ω–æ–≤–∞: detail.md —Å—Ç—Ä. 85-183
"""
from datetime import date, datetime
from typing import List, Optional, Dict, Any
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.orm import Session

from app.api.deps import get_db, require_roles
from app.models.user import User
from app.crud import clinic as crud_clinic
from app.crud import online_queue as crud_queue

router = APIRouter()

# ===================== –°–ü–†–ê–í–û–ß–ù–ò–ö –£–°–õ–£–ì –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¢–£–†–´ =====================

@router.get("/registrar/services")
def get_registrar_services(
    specialty: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"),
    active_only: bool = Query(True, description="–¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏"),
    db: Session = Depends(get_db),
    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–∞–∫–∂–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º —Ä–æ–ª—è–º –≤—Ä–∞—á–µ–π
    current_user: User = Depends(require_roles("Admin", "Registrar", "Doctor", "cardio", "derma", "dentist", "Lab"))
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    –ò–∑ detail.md —Å—Ç—Ä. 112: "–£—Å–ª—É–≥–∏ (—á–µ–∫‚Äë–ª–∏—Å—Ç, –≥—Ä—É–ø–ø–∞–º–∏ ‚Äî –¥–µ—Ä–º–∞/–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è/–∫–∞—Ä–¥–∏–æ/–≠–ö–ì/–≠—Ö–æ–ö–ì/—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è/–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è)"
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥
        categories = crud_clinic.get_service_categories(db, specialty=specialty, active_only=active_only)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        from app.models.service import Service
        query = db.query(Service)
        
        if active_only:
            query = query.filter(Service.active == True)
        
        services = query.all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        grouped_services = {
            "laboratory": [],     # L - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
            "dermatology": [],    # D - –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
            "cosmetology": [],    # C - –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
            "cardiology": [],     # K - –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è
            "stomatology": [],    # S - –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
            "procedures": []      # O - –ü—Ä–æ—á–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        }
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –ø–æ —Ç—Ä—ë–º –≥—Ä—É–ø–ø–∞–º
        for service in services:
            service_data = {
                "id": service.id,
                "name": service.name,
                "code": service.code,
                "price": float(service.price) if service.price else 0,
                "currency": service.currency or "UZS",
                "duration_minutes": service.duration_minutes or 30,
                "category_id": service.category_id,
                "doctor_id": service.doctor_id,
                # ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
                "category_code": getattr(service, 'category_code', None),
                "service_code": getattr(service, 'service_code', None),
                "queue_tag": getattr(service, 'queue_tag', None),  # üéØ –î–û–ë–ê–í–õ–Ø–ï–ú queue_tag –î–õ–Ø –≠–ö–ì!
                "is_consultation": getattr(service, 'is_consultation', False),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_consultation
                "group": None  # –î–æ–±–∞–≤–∏–º –≥—Ä—É–ø–ø—É –¥–ª—è frontend
            }
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ category_code
            category_code = getattr(service, 'category_code', None)
            
            if category_code:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–¥–æ–≤
                if category_code == 'L':
                    service_data["group"] = "laboratory"
                    grouped_services["laboratory"].append(service_data)
                elif category_code == 'D':
                    service_data["group"] = "dermatology"
                    grouped_services["dermatology"].append(service_data)
                elif category_code == 'C':
                    service_data["group"] = "procedures"
                    grouped_services["procedures"].append(service_data)
                elif category_code == 'K':
                    service_data["group"] = "cardiology"
                    grouped_services["cardiology"].append(service_data)
                elif category_code == 'S':
                    service_data["group"] = "stomatology"
                    grouped_services["stomatology"].append(service_data)
                elif category_code == 'O':
                    service_data["group"] = "procedures"
                    grouped_services["procedures"].append(service_data)
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ - –≤ –ø—Ä–æ—á–∏–µ
                    service_data["group"] = "procedures"
                    grouped_services["procedures"].append(service_data)
            else:
                # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç category_code, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                name_lower = service.name.lower()
                if any(word in name_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–∫—Ä–æ–≤—å", "–º–æ—á–∞", "–±–∏–æ—Ö–∏–º", "–≥–æ—Ä–º–æ–Ω"]):
                    service_data["group"] = "laboratory"
                    grouped_services["laboratory"].append(service_data)
                elif any(word in name_lower for word in ["–¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥", "–∫–æ–∂–∞", "–ø—Å–æ—Ä–∏–∞–∑", "–∞–∫–Ω–µ"]):
                    service_data["group"] = "dermatology"
                    grouped_services["dermatology"].append(service_data)
                elif any(word in name_lower for word in ["–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥", "–ø–∏–ª–∏–Ω–≥", "—á–∏—Å—Ç–∫–∞", "–±–æ—Ç–æ–∫—Å"]):
                    service_data["group"] = "procedures"
                    grouped_services["procedures"].append(service_data)
                elif any(word in name_lower for word in ["–∫–∞—Ä–¥–∏–æ–ª–æ–≥", "—ç–∫–≥", "—ç—Ö–æ–∫–≥", "—Ö–æ–ª—Ç–µ—Ä"]):
                    service_data["group"] = "cardiology"
                    grouped_services["cardiology"].append(service_data)
                elif any(word in name_lower for word in ["—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–∑—É–±", "–∫–∞—Ä–∏–µ—Å"]):
                    service_data["group"] = "stomatology"
                    grouped_services["stomatology"].append(service_data)
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—Ä–æ—á–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                    service_data["group"] = "procedures"
                    grouped_services["procedures"].append(service_data)
        
        return {
            "services_by_group": grouped_services,
            "categories": [
                {
                    "id": cat.id,
                    "code": cat.code,
                    "name_ru": cat.name_ru,
                    "name_uz": cat.name_uz,
                    "specialty": cat.specialty
                }
                for cat in categories
            ],
            "total_services": len(services)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã: {str(e)}"
        )


# ===================== –í–†–ê–ß–ò –ò –†–ê–°–ü–ò–°–ê–ù–ò–Ø =====================

@router.get("/registrar/doctors")
def get_registrar_doctors(
    specialty: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"),
    with_schedule: bool = Query(True, description="–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
    db: Session = Depends(get_db),
    # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ç–∞–∫–∂–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º —Ä–æ–ª—è–º –≤—Ä–∞—á–µ–π
    current_user: User = Depends(require_roles("Admin", "Registrar", "Doctor", "cardio", "derma", "dentist", "Lab"))
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–∞—á–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
    –ò–∑ detail.md —Å—Ç—Ä. 106: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç/–ö–∞–±–∏–Ω–µ—Ç"
    """
    try:
        doctors = crud_clinic.get_doctors(db, active_only=True)
        
        if specialty:
            doctors = [d for d in doctors if d.specialty == specialty]
        
        result = []
        for doctor in doctors:
            doctor_data = {
                "id": doctor.id,
                "user_id": doctor.user_id,
                "specialty": doctor.specialty,
                "cabinet": doctor.cabinet,
                "price_default": float(doctor.price_default) if doctor.price_default else 0,
                "start_number_online": doctor.start_number_online,
                "max_online_per_day": doctor.max_online_per_day,
                "user": {
                    "full_name": doctor.user.full_name if doctor.user else f"–í—Ä–∞—á #{doctor.id}",
                    "username": doctor.user.username if doctor.user else None
                } if doctor.user else None
            }
            
            if with_schedule:
                schedules = crud_clinic.get_doctor_schedules(db, doctor.id)
                doctor_data["schedules"] = [
                    {
                        "id": schedule.id,
                        "weekday": schedule.weekday,
                        "start_time": schedule.start_time.strftime("%H:%M") if schedule.start_time else None,
                        "end_time": schedule.end_time.strftime("%H:%M") if schedule.end_time else None,
                        "breaks": schedule.breaks,
                        "active": schedule.active
                    }
                    for schedule in schedules
                ]
            
            result.append(doctor_data)
        
        return {
            "doctors": result,
            "total_doctors": len(result),
            "by_specialty": {
                specialty: len([d for d in result if d["specialty"] == specialty])
                for specialty in set(d["specialty"] for d in result)
            }
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π: {str(e)}"
        )


# ===================== –ù–ê–°–¢–†–û–ô–ö–ò –û–ß–ï–†–ï–î–ò –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¢–£–†–´ =====================

@router.get("/registrar/queue-settings")
def get_registrar_queue_settings(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar"))
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
    –ò–∑ detail.md —Å—Ç—Ä. 303-338: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏
    """
    try:
        queue_settings = crud_clinic.get_queue_settings(db)
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–∞—á–∞—Ö
        doctors = crud_clinic.get_doctors(db, active_only=True)
        
        specialty_info = {}
        for doctor in doctors:
            if doctor.specialty not in specialty_info:
                specialty_info[doctor.specialty] = {
                    "start_number": queue_settings.get("start_numbers", {}).get(doctor.specialty, 1),
                    "max_per_day": queue_settings.get("max_per_day", {}).get(doctor.specialty, 15),
                    "doctors": []
                }
            
            specialty_info[doctor.specialty]["doctors"].append({
                "id": doctor.id,
                "name": doctor.user.full_name if doctor.user else f"–í—Ä–∞—á #{doctor.id}",
                "cabinet": doctor.cabinet
            })
        
        return {
            "timezone": queue_settings.get("timezone", "Asia/Tashkent"),
            "queue_start_hour": queue_settings.get("queue_start_hour", 7),
            "auto_close_time": queue_settings.get("auto_close_time", "09:00"),
            "specialties": specialty_info,
            "current_time": datetime.utcnow().isoformat()
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏: {str(e)}"
        )


# ===================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò –í –†–ï–ì–ò–°–¢–†–ê–¢–£–†–ï =====================

@router.post("/registrar/appointments")
def create_registrar_appointment(
    appointment_data: Dict[str, Any],
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar"))
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É
    –ò–∑ detail.md —Å—Ç—Ä. 366-376: POST /api/visits
    """
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ["patient_id", "doctor_id", "date", "services", "type", "payment_type"]
        for field in required_fields:
            if field not in appointment_data:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        doctor = crud_clinic.get_doctor_by_id(db, appointment_data["doctor_id"])
        if not doctor:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        queue_settings = crud_clinic.get_queue_settings(db)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        appointment_date = datetime.strptime(appointment_data["date"], "%Y-%m-%d").date()
        
        if appointment_date == date.today():
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            daily_queue = db.query(crud_queue.DailyQueue).filter(
                and_(
                    crud_queue.DailyQueue.day == appointment_date,
                    crud_queue.DailyQueue.specialist_id == doctor.id
                )
            ).first()
            
            if not daily_queue:
                daily_queue = crud_queue.DailyQueue(
                    day=appointment_date,
                    specialist_id=doctor.id,
                    active=True
                )
                db.add(daily_queue)
                db.commit()
                db.refresh(daily_queue)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
            current_count = db.query(crud_queue.QueueEntry).filter(
                crud_queue.QueueEntry.queue_id == daily_queue.id
            ).count()
            
            start_number = queue_settings.get("start_numbers", {}).get(doctor.specialty, 1)
            next_number = start_number + current_count
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏
            queue_entry = crud_queue.QueueEntry(
                queue_id=daily_queue.id,
                number=next_number,
                patient_id=appointment_data["patient_id"],
                source="desk",
                status="waiting"
            )
            db.add(queue_entry)
            
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ visits
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        db.commit()
        
        return {
            "success": True,
            "message": "–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "appointment_id": f"temp_{datetime.utcnow().timestamp()}",
            "queue_number": next_number if appointment_date == date.today() else None,
            "print_ticket": appointment_date == date.today()  # –ü–µ—á–∞—Ç–∞—Ç—å —Ç–∞–ª–æ–Ω –µ—Å–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {str(e)}"
        )


# ===================== QR –ö–û–î–´ –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¢–£–†–´ =====================

@router.post("/registrar/generate-qr")
def generate_qr_for_registrar(
    day: date = Query(..., description="–î–∞—Ç–∞"),
    specialist_id: int = Query(..., description="ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"),
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar"))
):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
    –ò–∑ detail.md —Å—Ç—Ä. 355: POST /api/online-queue/qrcode?day&specialist_id
    """
    try:
        token, token_data = crud_queue.generate_qr_token(
            db, day, specialist_id, current_user.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º QR URL –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        qr_url = f"/pwa/queue?token={token}"
        
        return {
            "success": True,
            "token": token,
            "qr_url": qr_url,
            "qr_data": f"{qr_url}",  # –î–∞–Ω–Ω—ã–µ –¥–ª—è QR –∫–æ–¥–∞
            "specialist": token_data["specialist_name"],
            "cabinet": token_data["cabinet"],
            "day": day.isoformat(),
            "max_slots": token_data["max_slots"],
            "current_count": token_data["current_count"]
        }
        
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {str(e)}"
        )


# ===================== –û–¢–ö–†–´–¢–ò–ï –ü–†–ò–ï–ú–ê =====================

@router.post("/registrar/open-reception")
def open_reception(
    day: date = Query(..., description="–î–∞—Ç–∞"),
    specialist_id: int = Query(..., description="ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"),
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar"))
):
    """
    –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–µ–º–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
    –ò–∑ detail.md —Å—Ç—Ä. 253: –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º —Å–µ–π—á–∞—Å¬ª
    """
    try:
        result = crud_queue.open_daily_queue(db, day, specialist_id, current_user.id)
        
        return {
            "success": True,
            "message": "–ü—Ä–∏–µ–º –æ—Ç–∫—Ä—ã—Ç, –æ–Ω–ª–∞–π–Ω-–Ω–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç",
            "opened_at": result["opened_at"],
            "online_entries_transferred": result["online_entries_count"]
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–µ–º–∞: {str(e)}"
        )


# ===================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ß–ï–†–ï–î–Ø–ú–ò =====================

@router.post("/registrar/queue/{entry_id}/start-visit")
def start_queue_visit(
    entry_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar"))
):
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–∏–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ (—Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
    –†–∞–±–æ—Ç–∞–µ—Ç —Å Visit –∏ Appointment –∑–∞–ø–∏—Å—è–º–∏
    """
    try:
        from app.models.visit import Visit
        from app.models.appointment import Appointment
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ Visit
        visit = db.query(Visit).filter(Visit.id == entry_id).first()
        if visit:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞
            visit.status = "in_progress"
            db.commit()
            db.refresh(visit)
            
            return {
                "success": True,
                "message": "–ü—Ä–∏–µ–º –Ω–∞—á–∞—Ç —É—Å–ø–µ—à–Ω–æ",
                "entry": {
                    "id": visit.id,
                    "status": visit.status,
                    "patient_id": visit.patient_id
                }
            }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Visit, –∏—â–µ–º –≤ Appointment
        appointment = db.query(Appointment).filter(Appointment.id == entry_id).first()
        if appointment:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å appointment
            appointment.status = "in_progress"
            db.commit()
            db.refresh(appointment)
            
            return {
                "success": True,
                "message": "–ü—Ä–∏–µ–º –Ω–∞—á–∞—Ç —É—Å–ø–µ—à–Ω–æ",
                "entry": {
                    "id": appointment.id,
                    "status": appointment.status,
                    "patient_id": appointment.patient_id
                }
            }
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ Visit, –Ω–∏ –≤ Appointment
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–µ–º–∞: {str(e)}"
        )


# ===================== –¢–ï–ö–£–©–ò–ï –û–ß–ï–†–ï–î–ò =====================

@router.get("/registrar/queues/today")
def get_today_queues(
    target_date: str = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar", "Doctor", "Lab", "cardio", "derma", "dentist"))
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
    –ò–∑ detail.md —Å—Ç—Ä. 363: GET /api/queue/today?specialist_id&date=YYYY-MM-DD
    
    –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Visit –≤–º–µ—Å—Ç–æ DailyQueue
    –î–æ—Å—Ç—É–ø: Admin, Registrar, Doctor, Lab
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - target_date: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)
    """
    try:
        from app.models.visit import Visit
        from app.models.appointment import Appointment
        from app.models.patient import Patient
        from app.models.clinic import Doctor
        from datetime import datetime
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
        if target_date:
            try:
                today = datetime.strptime(target_date, '%Y-%m-%d').date()
            except ValueError:
                today = date.today()
        else:
            today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–∑–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        visits = db.query(Visit).filter(
            Visit.visit_date == today
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ appointments –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        appointments = db.query(Appointment).filter(
            Appointment.appointment_date == today
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        queues_by_specialty = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Visit (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        for visit in visits:
            specialty = visit.department or "general"
            
            if specialty not in queues_by_specialty:
                queues_by_specialty[specialty] = {
                    "entries": [],
                    "doctor": None,
                    "doctor_id": visit.doctor_id
                }
            
            queues_by_specialty[specialty]["entries"].append({
                "type": "visit",
                "data": visit,
                "created_at": visit.confirmed_at or visit.created_at
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞—á–∞ –∏–∑ —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            if not queues_by_specialty[specialty]["doctor"] and visit.doctor:
                queues_by_specialty[specialty]["doctor"] = visit.doctor
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Appointment (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑ payments –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        from app.models.payment import Payment
        for appointment in appointments:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ appointment
            specialty = getattr(appointment, 'department', None) or "general"
            
            if specialty not in queues_by_specialty:
                queues_by_specialty[specialty] = {
                    "entries": [],
                    "doctor": None,
                    "doctor_id": getattr(appointment, 'doctor_id', None)
                }
            
            queues_by_specialty[specialty]["entries"].append({
                "type": "appointment",
                "data": appointment,
                "created_at": appointment.created_at
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–∞—á–∞
            if not queues_by_specialty[specialty]["doctor"] and hasattr(appointment, 'doctor') and appointment.doctor:
                queues_by_specialty[specialty]["doctor"] = appointment.doctor
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = []
        queue_number = 1
        
        for specialty, data in queues_by_specialty.items():
            doctor = data["doctor"]
            entries_list = data["entries"]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –∫ –ø–æ–∑–¥–Ω–µ–º—É)
            # –≠—Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å: –∫—Ç–æ —Ä–∞–Ω—å—à–µ –ø—Ä–∏—à—ë–ª, —Ç–æ—Ç —Ä–∞–Ω—å—à–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            entries_list.sort(key=lambda e: e["created_at"])
            
            entries = []
            for idx, entry_wrapper in enumerate(entries_list, 1):
                entry_type = entry_wrapper["type"]
                entry_data = entry_wrapper["data"]
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                patient_id = None
                patient_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç"
                phone = "–ù–µ —É–∫–∞–∑–∞–Ω"
                patient_birth_year = None
                address = None
                services = []
                service_codes = []
                total_cost = 0
                source = "desk"
                entry_status = "waiting"
                visit_time = None
                discount_mode = "none"
                record_id = None
                
                if entry_type == "visit":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Visit
                    visit = entry_data
                    record_id = visit.id
                    patient_id = visit.patient_id
                    visit_time = visit.visit_time
                    discount_mode = visit.discount_mode
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    patient = db.query(Patient).filter(Patient.id == visit.patient_id).first()
                    if patient:
                        patient_name = f"{patient.last_name} {patient.first_name}"
                        if patient.middle_name:
                            patient_name += f" {patient.middle_name}"
                        phone = patient.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
                        if patient.birth_date:
                            patient_birth_year = patient.birth_date.year
                        address = patient.address
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –≤–∏–∑–∏—Ç–∞
                    from app.models.visit import VisitService
                    visit_services = db.query(VisitService).filter(
                        VisitService.visit_id == visit.id
                    ).all()
                    
                    for vs in visit_services:
                        if vs.name:
                            services.append(vs.name)
                        if vs.code:
                            service_codes.append(vs.code)
                        if vs.price:
                            total_cost += float(vs.price) * (vs.qty or 1)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø–∏—Å–∏
                    if visit.confirmed_by:
                        if "telegram" in visit.confirmed_by.lower():
                            source = "online"
                        elif "registrar" in visit.confirmed_by.lower():
                            source = "confirmation"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –æ—á–µ—Ä–µ–¥–∏
                    status_mapping = {
                        "confirmed": "waiting",
                        "pending_confirmation": "waiting",
                        "in_progress": "called",
                        "completed": "served",
                        "cancelled": "no_show"
                    }
                    entry_status = status_mapping.get(visit.status, "waiting")

                    # –£—Å—Ç–æ–π—á–∏–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –≤–∏–∑–∏—Ç—É
                    is_paid = False
                    try:
                        v_status = (getattr(visit, 'status', None) or '').lower()
                        if v_status in ("paid", "in_visit", "in progress", "completed", "done"):
                            is_paid = True
                        elif getattr(visit, 'payment_processed_at', None):
                            is_paid = True
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –æ–ø–ª–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ payments –ø–æ visit.id
                        if not is_paid:
                            try:
                                payment_row = db.query(Payment).filter(Payment.visit_id == visit.id).order_by(Payment.created_at.desc()).first()
                                if payment_row and (str(payment_row.status).lower() == 'paid' or payment_row.paid_at):
                                    is_paid = True
                            except Exception:
                                pass
                    except Exception:
                        pass

                    if is_paid:
                        discount_mode = 'paid'
                
                elif entry_type == "appointment":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Appointment
                    appointment = entry_data
                    record_id = appointment.id
                    patient_id = appointment.patient_id
                    visit_time = str(appointment.appointment_time) if hasattr(appointment, 'appointment_time') else None
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
                    patient = db.query(Patient).filter(Patient.id == appointment.patient_id).first()
                    if patient:
                        patient_name = f"{patient.last_name} {patient.first_name}"
                        if patient.middle_name:
                            patient_name += f" {patient.middle_name}"
                        phone = patient.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
                        if patient.birth_date:
                            patient_birth_year = patient.birth_date.year
                        address = patient.address
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ appointment
                    if hasattr(appointment, 'services') and appointment.services:
                        services = appointment.services if isinstance(appointment.services, list) else []
                    
                    # –°—Ç–æ–∏–º–æ—Å—Ç—å
                    if hasattr(appointment, 'payment_amount') and appointment.payment_amount:
                        total_cost = float(appointment.payment_amount)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                    status_mapping = {
                        "scheduled": "waiting",
                        "pending": "waiting",
                        "confirmed": "waiting",
                        "paid": "waiting",  # –û–ø–ª–∞—á–µ–Ω–æ, –Ω–æ –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                        "in_progress": "called",
                        "in_visit": "called",
                        "completed": "served",
                        "cancelled": "no_show"
                    }
                    entry_status = status_mapping.get(appointment.status, "waiting")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –ø–æ —É—Å—Ç–æ–π—á–∏–≤—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                    # paid, in_visit, completed/done —Å—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ)
                    is_paid = False
                    try:
                        ap_status = (getattr(appointment, 'status', None) or '').lower()
                        if ap_status in ("paid", "in_visit", "in progress", "completed", "done"):
                            is_paid = True
                        # —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–æ —Å—É–º–º–µ/–≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        elif (getattr(appointment, 'payment_amount', 0) or 0) > 0:
                            is_paid = True
                        elif getattr(appointment, 'payment_processed_at', None):
                            is_paid = True
                        # –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É payments –ø–æ appointment.id (–µ—Å–ª–∏ —Å–≤—è–∑–∫–∞ —á–µ—Ä–µ–∑ visit_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                        # –ø–æ–ø—ã—Ç–∫–∞: –∏—â–µ–º –ª—é–±–æ–π –ø–ª–∞—Ç—ë–∂ —Å paid_at –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–æ–º paid
                        if not is_paid:
                            try:
                                payment_row = db.query(Payment).filter(Payment.visit_id == appointment.id).order_by(Payment.created_at.desc()).first()
                                if payment_row and (payment_row.status.lower() == 'paid' or payment_row.paid_at):
                                    is_paid = True
                            except Exception:
                                pass
                    except Exception:
                        pass

                    discount_mode = "paid" if is_paid else (appointment.visit_type if hasattr(appointment, 'visit_type') else "none")
                    
                    source = "desk"  # Appointment –æ–±—ã—á–Ω–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                
                entries.append({
                    "id": record_id,
                    "number": idx,
                    "patient_id": patient_id,
                    "patient_name": patient_name,
                    "patient_birth_year": patient_birth_year,
                    "phone": phone,
                    "address": address,
                    "services": services,
                    "service_codes": service_codes,
                    "cost": total_cost,
                    "payment_status": "paid" if discount_mode == "paid" else "pending",
                    "source": source,
                    "status": entry_status,
                    "created_at": entry_wrapper["created_at"].isoformat() + "Z" if entry_wrapper["created_at"] else None,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º 'Z' –¥–ª—è UTC
                    "called_at": None,
                    "visit_time": visit_time,
                    "discount_mode": discount_mode,
                    "record_type": entry_type  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏: 'visit' –∏–ª–∏ 'appointment'
                })
            
            queue_data = {
                "queue_id": queue_number,
                "specialist_id": data["doctor_id"],
                "specialist_name": doctor.user.full_name if doctor and doctor.user else f"–í—Ä–∞—á",
                "specialty": specialty,
                "cabinet": doctor.cabinet if doctor else "N/A",
                "opened_at": datetime.now().isoformat(),
                "entries": entries,
                "stats": {
                    "total": len(entries),
                    "waiting": len([e for e in entries if e["status"] == "waiting"]),
                    "called": len([e for e in entries if e["status"] == "called"]),
                    "served": len([e for e in entries if e["status"] == "served"]),
                    "online_entries": len([e for e in entries if e["source"] == "online"])
                }
            }
            
            result.append(queue_data)
            queue_number += 1
        
        return {
            "queues": result,
            "total_queues": len(result),
            "date": today.isoformat()
        }
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {str(e)}"
        )


# ===================== –ö–ê–õ–ï–ù–î–ê–†–¨ –ó–ê–ü–ò–°–ï–ô =====================

@router.get("/registrar/calendar")
def get_registrar_calendar(
    start_date: date = Query(..., description="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞"),
    end_date: date = Query(..., description="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞"),
    doctor_id: Optional[int] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–∞—á—É"),
    db: Session = Depends(get_db),
    current_user: User = Depends(require_roles("Admin", "Registrar"))
):
    """
    –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
    –ò–∑ detail.md —Å—Ç—Ä. 174-181: –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã appointments/visits
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        
        return {
            "appointments": [],
            "period": {
                "start": start_date.isoformat(),
                "end": end_date.isoformat()
            },
            "status_colors": {
                "plan": "#6c757d",      # —Å–µ—Ä—ã–π ‚Äî –ø–ª–∞–Ω
                "confirmed": "#007bff",  # —Å–∏–Ω–∏–π ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ  
                "queued": "#28a745",    # –∑–µ–ª–µ–Ω—ã–π ‚Äî –≤ –æ—á–µ—Ä–µ–¥–∏
                "in_cabinet": "#fd7e14", # –æ—Ä–∞–Ω–∂–µ–≤—ã–π ‚Äî –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
                "done": "#20c997",      # –∑–µ–ª–µ–Ω—ã–π —Ç—ë–º–Ω—ã–π ‚Äî –∑–∞–≤–µ—Ä—à—ë–Ω
                "cancelled": "#dc3545", # –∫—Ä–∞—Å–Ω—ã–π ‚Äî –æ—Ç–º–µ–Ω–µ–Ω
                "no_show": "#dc3545"    # –∫—Ä–∞—Å–Ω—ã–π ‚Äî –Ω–µ—è–≤–∫–∞
            }
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}"
        )
