from typing import Any, Dict, List, Optional
from decimal import Decimal
from datetime import datetime
import logging

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from pydantic import BaseModel

from app.api import deps
from app.models.user import User
from app.models.doctor_price_override import DoctorPriceOverride
from app.models.visit import Visit
from app.models.service import Service
from app.models.clinic import Doctor
from app.services.notification_service import NotificationService

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/dental", tags=["dental"])


# ===================== –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====================

async def send_price_override_notification(
    db: Session,
    price_override: DoctorPriceOverride,
    doctor: Doctor,
    service: Service,
    visit: Visit
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
    try:
        notification_service = NotificationService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é Registrar
        registrars = db.query(User).filter(User.role == "Registrar").all()
        
        if not registrars:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é Registrar –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        doctor_name = doctor.user.full_name if doctor.user else f"–í—Ä–∞—á #{doctor.id}"
        patient_info = f"–ü–∞—Ü–∏–µ–Ω—Ç #{visit.patient_id}" if visit else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç"
        
        message = f"""
ü¶∑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ –°–¢–û–ú–ê–¢–û–õ–û–ì–û–ú

üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
üë§ {patient_info}
üîß –£—Å–ª—É–≥–∞: {service.name} ({service.code})
üí∞ –¶–µ–Ω–∞: {price_override.original_price} ‚Üí {price_override.new_price} UZS
üìù –ü—Ä–∏—á–∏–Ω–∞: {price_override.reason}
{f"üìã –î–µ—Ç–∞–ª–∏: {price_override.details}" if price_override.details else ""}

‚è∞ –í—Ä–µ–º—è: {price_override.created_at.strftime('%d.%m.%Y %H:%M')}
üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è

–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        """.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for registrar in registrars:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å telegram_id
                if hasattr(registrar, 'telegram_id') and registrar.telegram_id:
                    await notification_service.send_telegram_message(
                        user_id=registrar.telegram_id,
                        message=message,
                        parse_mode="HTML"
                    )
                
                # –¢–∞–∫–∂–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã (email, SMS)
                # if registrar.email:
                #     await notification_service.send_email(
                #         to_email=registrar.email,
                #         subject="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–º",
                #         body=message
                #     )
                
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {registrar.username}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {registrar.username}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        price_override.notification_sent = True
        price_override.notification_sent_at = datetime.utcnow()
        db.commit()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        raise


class DentalPriceOverrideRequest(BaseModel):
    visit_id: int
    service_id: int
    new_price: Decimal
    reason: str
    details: Optional[str] = None
    treatment_completed: bool = True  # –î–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ - —É–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è


class DentalPriceOverrideResponse(BaseModel):
    id: int
    visit_id: int
    service_id: int
    original_price: Decimal
    new_price: Decimal
    reason: str
    details: Optional[str]
    status: str
    treatment_completed: bool
    created_at: datetime


@router.get("/examinations", summary="–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã")
async def get_dental_examinations(
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
    limit: int = Query(100, ge=1, le=1000),
    patient_id: Optional[int] = None,
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–º–æ—Ç—Ä–æ–≤
    """
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏
        return []
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–º–æ—Ç—Ä–æ–≤: {str(e)}"
        )


@router.post("/examinations", summary="–°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä")
async def create_dental_examination(
    examination_data: Dict[str, Any],
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä
    """
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏
        return {"message": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω", "id": 1}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–º–æ—Ç—Ä–∞: {str(e)}"
        )


@router.get("/treatments", summary="–ü–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è")
async def get_treatment_plans(
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
    limit: int = Query(100, ge=1, le=1000),
    patient_id: Optional[int] = None,
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è
    """
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏
        return []
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è: {str(e)}"
        )


@router.post("/treatments", summary="–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è")
async def create_treatment_plan(
    treatment_data: Dict[str, Any],
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
    """
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏
        return {"message": "–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω", "id": 1}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è: {str(e)}"
        )


@router.get("/prosthetics", summary="–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def get_prosthetics(
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
    limit: int = Query(100, ge=1, le=1000),
    patient_id: Optional[int] = None,
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–µ–∑–æ–≤
    """
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏
        return []
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ç–µ–∑–æ–≤: {str(e)}"
        )


@router.post("/prosthetics", summary="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–µ–∑")
async def create_prosthetic(
    prosthetic_data: Dict[str, Any],
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–µ–∑
    """
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏
        return {"message": "–ü—Ä–æ—Ç–µ–∑ —Å–æ–∑–¥–∞–Ω", "id": 1}
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–µ–∑–∞: {str(e)}"
        )


@router.get("/xray", summary="–†–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏")
async def get_xray_images(
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
    patient_id: Optional[int] = None,
) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    """
    try:
        return {
            "message": "–ú–æ–¥—É–ª—å —Ä–µ–Ω—Ç–≥–µ–Ω–æ–≤—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"
        }
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤: {str(e)}"
        )


@router.post("/price-override", summary="–£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è", response_model=DentalPriceOverrideResponse)
async def create_dental_price_override(
    override_data: DentalPriceOverrideRequest,
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
) -> DentalPriceOverrideResponse:
    """
    –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
        visit = db.query(Visit).filter(Visit.id == override_data.visit_id).first()
        if not visit:
            raise HTTPException(status_code=404, detail="–í–∏–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        service = db.query(Service).filter(Service.id == override_data.service_id).first()
        if not service:
            raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ä–∞—á–æ–º
        if not service.allow_doctor_price_override:
            raise HTTPException(
                status_code=400, 
                detail="–î–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤—Ä–∞—á–æ–º"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        doctor = db.query(Doctor).filter(Doctor.user_id == user.id).first()
        if not doctor:
            raise HTTPException(status_code=404, detail="–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–∞—á - —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥
        if doctor.specialty not in ["stomatology", "dental"]:
            raise HTTPException(
                status_code=403, 
                detail="–¢–æ–ª—å–∫–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—É –ø–æ—Å–ª–µ –ª–µ—á–µ–Ω–∏—è"
            )
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        price_override = DoctorPriceOverride(
            visit_id=override_data.visit_id,
            doctor_id=doctor.id,
            service_id=override_data.service_id,
            original_price=service.price or Decimal("0"),
            new_price=override_data.new_price,
            reason=override_data.reason,
            details=override_data.details,
            status="pending"  # –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
        )
        
        db.add(price_override)
        db.commit()
        db.refresh(price_override)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É
        try:
            await send_price_override_notification(
                db=db,
                price_override=price_override,
                doctor=doctor,
                service=service,
                visit=visit
            )
        except Exception as e:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        
        return DentalPriceOverrideResponse(
            id=price_override.id,
            visit_id=price_override.visit_id,
            service_id=price_override.service_id,
            original_price=price_override.original_price,
            new_price=price_override.new_price,
            reason=price_override.reason,
            details=price_override.details,
            status=price_override.status,
            treatment_completed=override_data.treatment_completed,
            created_at=price_override.created_at
        )
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}"
        )


@router.get("/price-overrides", summary="–ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞")
async def get_dental_price_overrides(
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Doctor")),
    visit_id: Optional[int] = Query(None, description="ID –≤–∏–∑–∏—Ç–∞"),
    status: Optional[str] = Query(None, description="–°—Ç–∞—Ç—É—Å (pending, approved, rejected)"),
    limit: int = Query(50, ge=1, le=100),
) -> List[DentalPriceOverrideResponse]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        doctor = db.query(Doctor).filter(Doctor.user_id == user.id).first()
        if not doctor:
            raise HTTPException(status_code=404, detail="–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        query = db.query(DoctorPriceOverride).filter(
            DoctorPriceOverride.doctor_id == doctor.id
        )
        
        if visit_id:
            query = query.filter(DoctorPriceOverride.visit_id == visit_id)
        
        if status:
            query = query.filter(DoctorPriceOverride.status == status)
        
        overrides = query.order_by(DoctorPriceOverride.created_at.desc()).limit(limit).all()
        
        return [
            DentalPriceOverrideResponse(
                id=override.id,
                visit_id=override.visit_id,
                service_id=override.service_id,
                original_price=override.original_price,
                new_price=override.new_price,
                reason=override.reason,
                details=override.details,
                status=override.status,
                treatment_completed=True,  # –î–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ –≤—Å–µ–≥–¥–∞ True
                created_at=override.created_at
            )
            for override in overrides
        ]
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {str(e)}"
        )


# ===================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú–ò –¶–ï–ù (–†–ï–ì–ò–°–¢–†–ê–¢–£–†–ê) =====================

class PriceOverrideApprovalRequest(BaseModel):
    action: str  # "approve" –∏–ª–∏ "reject"
    rejection_reason: Optional[str] = None


@router.put("/price-override/{override_id}/approve", summary="–û–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã")
async def approve_price_override(
    override_id: int,
    approval_data: PriceOverrideApprovalRequest,
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Registrar")),
):
    """
    –û–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–º
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        price_override = db.query(DoctorPriceOverride).filter(
            DoctorPriceOverride.id == override_id
        ).first()
        
        if not price_override:
            raise HTTPException(status_code=404, detail="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        if price_override.status != "pending":
            raise HTTPException(
                status_code=400, 
                detail=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: {price_override.status})"
            )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if approval_data.action not in ["approve", "reject"]:
            raise HTTPException(
                status_code=400,
                detail="–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'approve' –∏–ª–∏ 'reject'"
            )
        
        # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º, —Ç—Ä–µ–±—É–µ–º –ø—Ä–∏—á–∏–Ω—É
        if approval_data.action == "reject" and not approval_data.rejection_reason:
            raise HTTPException(
                status_code=400,
                detail="–ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        price_override.status = "approved" if approval_data.action == "approve" else "rejected"
        price_override.approved_by = user.id
        price_override.approved_at = datetime.utcnow()
        
        if approval_data.action == "reject":
            price_override.rejection_reason = approval_data.rejection_reason
        
        # –ï—Å–ª–∏ –æ–¥–æ–±—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ –≤ –≤–∏–∑–∏—Ç–µ
        if approval_data.action == "approve":
            # –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É –≤ –≤–∏–∑–∏—Ç–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            from app.models.visit import VisitService
            visit_service = db.query(VisitService).filter(
                VisitService.visit_id == price_override.visit_id,
                VisitService.service_id == price_override.service_id
            ).first()
            
            if visit_service:
                visit_service.price = price_override.new_price
                visit_service.custom_price = price_override.new_price
        
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä–∞—á—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        try:
            await send_price_override_result_notification(
                db=db,
                price_override=price_override,
                approved_by=user
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä–∞—á—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {e}")
        
        action_text = "–æ–¥–æ–±—Ä–µ–Ω–æ" if approval_data.action == "approve" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        
        return {
            "success": True,
            "message": f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {action_text}",
            "override_id": override_id,
            "status": price_override.status,
            "approved_by": user.username,
            "approved_at": price_override.approved_at.isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}"
        )


@router.get("/price-overrides/pending", summary="–ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω")
async def get_pending_price_overrides(
    db: Session = Depends(deps.get_db),
    user: User = Depends(deps.require_roles("Admin", "Registrar")),
    limit: int = Query(50, ge=1, le=100)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        overrides = db.query(DoctorPriceOverride).filter(
            DoctorPriceOverride.status == "pending"
        ).order_by(DoctorPriceOverride.created_at.desc()).limit(limit).all()
        
        result = []
        for override in overrides:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            doctor = db.query(Doctor).filter(Doctor.id == override.doctor_id).first()
            service = db.query(Service).filter(Service.id == override.service_id).first()
            visit = db.query(Visit).filter(Visit.id == override.visit_id).first()
            
            result.append({
                "id": override.id,
                "visit_id": override.visit_id,
                "patient_id": visit.patient_id if visit else None,
                "doctor": {
                    "id": doctor.id if doctor else None,
                    "name": doctor.user.full_name if doctor and doctor.user else f"–í—Ä–∞—á #{override.doctor_id}",
                    "specialty": doctor.specialty if doctor else None
                },
                "service": {
                    "id": service.id if service else None,
                    "name": service.name if service else f"–£—Å–ª—É–≥–∞ #{override.service_id}",
                    "code": service.code if service else None
                },
                "original_price": float(override.original_price),
                "new_price": float(override.new_price),
                "price_difference": float(override.new_price - override.original_price),
                "reason": override.reason,
                "details": override.details,
                "created_at": override.created_at.isoformat(),
                "notification_sent": override.notification_sent,
                "notification_sent_at": override.notification_sent_at.isoformat() if override.notification_sent_at else None
            })
        
        return {
            "success": True,
            "overrides": result,
            "total_count": len(result)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {str(e)}"
        )


async def send_price_override_result_notification(
    db: Session,
    price_override: DoctorPriceOverride,
    approved_by: User
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä–∞—á—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    try:
        notification_service = NotificationService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–∞
        doctor = db.query(Doctor).filter(Doctor.id == price_override.doctor_id).first()
        if not doctor or not doctor.user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥—É
        service = db.query(Service).filter(Service.id == price_override.service_id).first()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = "‚úÖ" if price_override.status == "approved" else "‚ùå"
        status_text = "–û–î–û–ë–†–ï–ù–û" if price_override.status == "approved" else "–û–¢–ö–õ–û–ù–ï–ù–û"
        
        message = f"""
{status_emoji} –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ {status_text}

üîß –£—Å–ª—É–≥–∞: {service.name if service else f"–£—Å–ª—É–≥–∞ #{price_override.service_id}"}
üí∞ –¶–µ–Ω–∞: {price_override.original_price} ‚Üí {price_override.new_price} UZS
üìù –í–∞—à–∞ –ø—Ä–∏—á–∏–Ω–∞: {price_override.reason}

üë§ –†–∞—Å—Å–º–æ—Ç—Ä–µ–ª: {approved_by.full_name or approved_by.username}
‚è∞ –í—Ä–µ–º—è: {price_override.approved_at.strftime('%d.%m.%Y %H:%M')}
{f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {price_override.rejection_reason}" if price_override.rejection_reason else ""}
        """.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä–∞—á—É
        if hasattr(doctor.user, 'telegram_id') and doctor.user.telegram_id:
            await notification_service.send_telegram_message(
                user_id=doctor.user.telegram_id,
                message=message,
                parse_mode="HTML"
            )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä–∞—á—É {doctor.user.username}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–∞—á—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {e}")
        raise
