"""
API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º Telegram –±–æ—Ç–æ–º
"""
from typing import List, Optional
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from pydantic import BaseModel

from app.db.session import get_db
from app.api.deps import get_current_user, require_roles
from app.models.user import User
from app.services.telegram_bot_enhanced import get_enhanced_telegram_bot
from app.crud import user as crud_user

router = APIRouter()


class TelegramNotificationRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    message: str
    user_ids: Optional[List[int]] = None
    send_to_all_admins: bool = False
    send_to_all_users: bool = False


class TelegramBotStatsResponse(BaseModel):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram –±–æ—Ç–∞"""
    total_users: int
    active_users: int
    admin_users: int
    messages_sent_today: int
    commands_processed_today: int


class TelegramBotConfigRequest(BaseModel):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    bot_token: Optional[str] = None
    webhook_url: Optional[str] = None
    active: bool = True


@router.get("/stats", response_model=TelegramBotStatsResponse)
async def get_telegram_bot_stats(
    current_user: User = Depends(require_roles(["Admin", "SuperAdmin"])),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram –±–æ—Ç–∞"""
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram
        total_users = db.query(User).filter(User.telegram_chat_id.isnot(None)).count()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –∞–∫—Ç–∏–≤–Ω—ã–º Telegram)
        active_users = db.query(User).filter(
            User.telegram_chat_id.isnot(None),
            User.is_active == True
        ).count()
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å Telegram
        admin_users = db.query(User).filter(
            User.telegram_chat_id.isnot(None),
            User.role.in_(["Admin", "SuperAdmin"])
        ).count()
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        messages_sent_today = 0
        commands_processed_today = 0
        
        return TelegramBotStatsResponse(
            total_users=total_users,
            active_users=active_users,
            admin_users=admin_users,
            messages_sent_today=messages_sent_today,
            commands_processed_today=commands_processed_today
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error getting bot stats: {str(e)}"
        )


@router.post("/send-notification")
async def send_telegram_notification(
    request: TelegramNotificationRequest,
    current_user: User = Depends(require_roles(["Admin", "SuperAdmin"])),
    db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    try:
        bot = get_enhanced_telegram_bot()
        
        if not bot.active:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Telegram bot is not active"
            )
        
        success_count = 0
        
        if request.send_to_all_admins:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await bot.send_admin_notification(request.message, db)
            success_count = db.query(User).filter(
                User.role.in_(["Admin", "SuperAdmin"]),
                User.telegram_chat_id.isnot(None)
            ).count()
            
        elif request.send_to_all_users:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            all_user_ids = [
                user.id for user in db.query(User).filter(
                    User.telegram_chat_id.isnot(None),
                    User.is_active == True
                ).all()
            ]
            success_count = await bot.send_bulk_notification(request.message, all_user_ids, db)
            
        elif request.user_ids:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            success_count = await bot.send_bulk_notification(request.message, request.user_ids, db)
            
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No recipients specified"
            )
        
        return {
            "success": True,
            "message": f"Notification sent to {success_count} users",
            "sent_count": success_count
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error sending notification: {str(e)}"
        )


@router.post("/send-admin-alert")
async def send_admin_alert(
    message: str,
    current_user: User = Depends(require_roles(["Admin", "SuperAdmin"])),
    db: Session = Depends(get_db)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        bot = get_enhanced_telegram_bot()
        
        if not bot.active:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Telegram bot is not active"
            )
        
        alert_message = f"üö® **–°–†–û–ß–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**\\n\\n{message}\\n\\n‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        await bot.send_admin_notification(alert_message, db)
        
        return {
            "success": True,
            "message": "Admin alert sent successfully"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error sending admin alert: {str(e)}"
        )


@router.get("/users-with-telegram")
async def get_users_with_telegram(
    current_user: User = Depends(require_roles(["Admin", "SuperAdmin"])),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Telegram"""
    try:
        users = db.query(User).filter(User.telegram_chat_id.isnot(None)).all()
        
        result = []
        for user in users:
            result.append({
                "id": user.id,
                "username": user.username,
                "full_name": user.full_name,
                "role": user.role,
                "telegram_chat_id": user.telegram_chat_id,
                "is_active": user.is_active,
                "created_at": user.created_at
            })
        
        return {
            "users": result,
            "total_count": len(result)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error getting users: {str(e)}"
        )


@router.post("/test-bot")
async def test_telegram_bot(
    current_user: User = Depends(require_roles(["Admin", "SuperAdmin"])),
    db: Session = Depends(get_db)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞"""
    try:
        bot = get_enhanced_telegram_bot()
        
        if not current_user.telegram_chat_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Your account is not linked to Telegram"
            )
        
        test_message = f"""ü§ñ **–¢–µ—Å—Ç Telegram –±–æ—Ç–∞**
        
‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {current_user.full_name}
‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."""
        
        success = await bot._send_message(
            current_user.telegram_chat_id, 
            test_message, 
            parse_mode="Markdown"
        )
        
        if success:
            return {
                "success": True,
                "message": "Test message sent successfully"
            }
        else:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to send test message"
            )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error testing bot: {str(e)}"
        )


@router.post("/broadcast-system-message")
async def broadcast_system_message(
    message: str,
    message_type: str = "info",  # info, warning, error, success
    current_user: User = Depends(require_roles(["SuperAdmin"])),
    db: Session = Depends(get_db)
):
    """–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è SuperAdmin)"""
    try:
        bot = get_enhanced_telegram_bot()
        
        if not bot.active:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Telegram bot is not active"
            )
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        icons = {
            "info": "‚ÑπÔ∏è",
            "warning": "‚ö†Ô∏è", 
            "error": "‚ùå",
            "success": "‚úÖ"
        }
        
        icon = icons.get(message_type, "üì¢")
        
        system_message = f"""{icon} **–°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï**

{message}

‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {current_user.full_name}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        all_user_ids = [
            user.id for user in db.query(User).filter(
                User.telegram_chat_id.isnot(None),
                User.is_active == True
            ).all()
        ]
        
        success_count = await bot.send_bulk_notification(system_message, all_user_ids, db)
        
        return {
            "success": True,
            "message": f"System message broadcast to {success_count} users",
            "sent_count": success_count,
            "total_users": len(all_user_ids)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error broadcasting system message: {str(e)}"
        )


@router.get("/bot-commands")
async def get_bot_commands(
    current_user: User = Depends(require_roles(["Admin", "SuperAdmin"]))
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        user_commands = [
            {"command": "/start", "description": "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
            {"command": "/help", "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
            {"command": "/menu", "description": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"},
            {"command": "/appointments", "description": "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"},
            {"command": "/book", "description": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"},
            {"command": "/cancel", "description": "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"},
            {"command": "/reschedule", "description": "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å"},
            {"command": "/profile", "description": "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"},
            {"command": "/doctors", "description": "–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π"},
            {"command": "/services", "description": "–ù–∞—à–∏ —É—Å–ª—É–≥–∏"},
            {"command": "/queue", "description": "–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å"},
            {"command": "/status", "description": "–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–µ–π"},
            {"command": "/feedback", "description": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"},
            {"command": "/emergency", "description": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"},
            {"command": "/language", "description": "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"},
            {"command": "/notifications", "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"}
        ]
        
        admin_commands = [
            {"command": "/admin_stats", "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–Ω–∏–∫–∏"},
            {"command": "/admin_queues", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏"},
            {"command": "/admin_patients", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏"},
            {"command": "/admin_appointments", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏"},
            {"command": "/admin_doctors", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏"},
            {"command": "/admin_services", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"},
            {"command": "/admin_notifications", "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"},
            {"command": "/admin_reports", "description": "–û—Ç—á–µ—Ç—ã"},
            {"command": "/admin_backup", "description": "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"},
            {"command": "/admin_settings", "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"}
        ]
        
        return {
            "user_commands": user_commands,
            "admin_commands": admin_commands,
            "total_commands": len(user_commands) + len(admin_commands)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error getting bot commands: {str(e)}"
        )
