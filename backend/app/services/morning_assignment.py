"""
–°–µ—Ä–≤–∏—Å —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
"""
from datetime import date, datetime
from typing import Dict, List, Tuple, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_

from app.db.session import SessionLocal
from app.models.visit import Visit, VisitService
from app.models.service import Service
from app.models.user import User
from app.models.patient import Patient
from app.models.clinic import Doctor
from app.models.online_queue import DailyQueue, OnlineQueueEntry
from app.crud import online_queue as crud_queue

import logging

logger = logging.getLogger(__name__)

class MorningAssignmentService:
    """–°–µ—Ä–≤–∏—Å —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö"""
    
    def __init__(self):
        self.db: Optional[Session] = None
        
    def __enter__(self):
        self.db = SessionLocal()
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.db:
            self.db.close()
    
    def run_morning_assignment(self, target_date: Optional[date] = None) -> Dict[str, any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏
        –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤—Å–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º –≤–∏–∑–∏—Ç–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        """
        if not target_date:
            target_date = date.today()
            
        logger.info(f"üåÖ –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏ –¥–ª—è {target_date}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö
            confirmed_visits = self._get_confirmed_visits_without_queues(target_date)
            
            if not confirmed_visits:
                logger.info(f"‚úÖ –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ {target_date}")
                return {
                    "success": True,
                    "message": f"–ù–µ—Ç –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ {target_date}",
                    "processed_visits": 0,
                    "assigned_queues": 0,
                    "errors": []
                }
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(confirmed_visits)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            processed_count = 0
            assigned_queues_count = 0
            errors = []
            
            for visit in confirmed_visits:
                try:
                    queue_assignments = self._assign_queues_for_visit(visit, target_date)
                    if queue_assignments:
                        processed_count += 1
                        assigned_queues_count += len(queue_assignments)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞
                        visit.status = "open"  # –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É
                        
                        logger.info(f"‚úÖ –í–∏–∑–∏—Ç {visit.id}: –ø—Ä–∏—Å–≤–æ–µ–Ω–æ {len(queue_assignments)} –Ω–æ–º–µ—Ä–æ–≤")
                    else:
                        logger.warning(f"‚ö†Ô∏è –í–∏–∑–∏—Ç {visit.id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–º–µ—Ä–∞")
                        
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑–∏—Ç–∞ {visit.id}: {str(e)}"
                    logger.error(error_msg)
                    errors.append(error_msg)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.db.commit()
            
            result = {
                "success": True,
                "message": f"–£—Ç—Ä–µ–Ω–Ω—è—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {target_date}",
                "processed_visits": processed_count,
                "assigned_queues": assigned_queues_count,
                "errors": errors,
                "date": target_date.isoformat()
            }
            
            logger.info(f"üéâ –£—Ç—Ä–µ–Ω–Ω—è—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_count} –≤–∏–∑–∏—Ç–æ–≤, {assigned_queues_count} –Ω–æ–º–µ—Ä–æ–≤")
            return result
            
        except Exception as e:
            self.db.rollback()
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏: {str(e)}"
            logger.error(error_msg)
            return {
                "success": False,
                "message": error_msg,
                "processed_visits": 0,
                "assigned_queues": 0,
                "errors": [error_msg]
            }
    
    def _get_confirmed_visits_without_queues(self, target_date: date) -> List[Visit]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö"""
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–∏–∑–∏—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "confirmed" –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        confirmed_visits = self.db.query(Visit).filter(
            and_(
                Visit.visit_date == target_date,
                Visit.status == "confirmed",
                Visit.confirmed_at.isnot(None)
            )
        ).all()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∏–∑–∏—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥—è—Ö
        visits_without_queues = []
        
        for visit in confirmed_visits:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–∑–∏—Ç–∞
            existing_queue_entries = self.db.query(OnlineQueueEntry).filter(
                OnlineQueueEntry.patient_id == visit.patient_id
            ).join(DailyQueue).filter(
                DailyQueue.day == target_date
            ).all()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥—è—Ö –∏–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –≤–∏–∑–∏—Ç–∞
            if not existing_queue_entries:
                visits_without_queues.append(visit)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã–≤–∞—é—Ç –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ queue_tag –≤–∏–∑–∏—Ç–∞
            visit_queue_tags = self._get_visit_queue_tags(visit)
            existing_queue_tags = set()
            
            for entry in existing_queue_entries:
                queue = self.db.query(DailyQueue).filter(DailyQueue.id == entry.queue_id).first()
                if queue and queue.queue_tag:
                    existing_queue_tags.add(queue.queue_tag)
            
            # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ queue_tag –ø–æ–∫—Ä—ã—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑–∏—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not visit_queue_tags.issubset(existing_queue_tags):
                visits_without_queues.append(visit)
        
        return visits_without_queues
    
    def _get_visit_queue_tags(self, visit: Visit) -> set:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ queue_tag –¥–ª—è —É—Å–ª—É–≥ –≤–∏–∑–∏—Ç–∞"""
        visit_services = self.db.query(VisitService).filter(VisitService.visit_id == visit.id).all()
        
        queue_tags = set()
        for vs in visit_services:
            service = self.db.query(Service).filter(Service.id == vs.service_id).first()
            if service and service.queue_tag:
                queue_tags.add(service.queue_tag)
        
        return queue_tags
    
    def _assign_queues_for_visit(self, visit: Visit, target_date: date) -> List[Dict[str, any]]:
        """–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—è—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ queue_tag –∏–∑ —É—Å–ª—É–≥ –≤–∏–∑–∏—Ç–∞
        unique_queue_tags = self._get_visit_queue_tags(visit)
        
        if not unique_queue_tags:
            logger.warning(f"–í–∏–∑–∏—Ç {visit.id}: –Ω–µ—Ç queue_tag –≤ —É—Å–ª—É–≥–∞—Ö")
            return []
        
        queue_assignments = []
        
        for queue_tag in unique_queue_tags:
            try:
                assignment = self._assign_single_queue(visit, queue_tag, target_date)
                if assignment:
                    queue_assignments.append(assignment)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ {queue_tag} –¥–ª—è –≤–∏–∑–∏—Ç–∞ {visit.id}: {e}")
        
        return queue_assignments
    
    def _assign_single_queue(self, visit: Visit, queue_tag: str, target_date: date) -> Optional[Dict[str, any]]:
        """–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–∞—á–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
        doctor_id = visit.doctor_id
        
        # –î–ª—è –æ—á–µ—Ä–µ–¥–µ–π –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Å—É—Ä—Å-–≤—Ä–∞—á–µ–π
        if queue_tag == "ecg" and not doctor_id:
            ecg_resource = self.db.query(User).filter(
                User.username == "ecg_resource",
                User.is_active == True
            ).first()
            if ecg_resource:
                doctor_id = ecg_resource.id
            else:
                logger.warning(f"–≠–ö–ì —Ä–µ—Å—É—Ä—Å-–≤—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è queue_tag={queue_tag}")
                return None
                
        elif queue_tag == "lab" and not doctor_id:
            lab_resource = self.db.query(User).filter(
                User.username == "lab_resource",
                User.is_active == True
            ).first()
            if lab_resource:
                doctor_id = lab_resource.id
            else:
                logger.warning(f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Ä–µ—Å—É—Ä—Å-–≤—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è queue_tag={queue_tag}")
                return None
        
        if not doctor_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≤—Ä–∞—á –¥–ª—è queue_tag={queue_tag}, visit_id={visit.id}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        daily_queue = crud_queue.get_or_create_daily_queue(self.db, target_date, doctor_id, queue_tag)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        existing_entry = self.db.query(OnlineQueueEntry).filter(
            and_(
                OnlineQueueEntry.queue_id == daily_queue.id,
                OnlineQueueEntry.patient_id == visit.patient_id
            )
        ).first()
        
        if existing_entry:
            logger.info(f"–ü–∞—Ü–∏–µ–Ω—Ç {visit.patient_id} —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_tag}")
            return {
                "queue_tag": queue_tag,
                "queue_id": daily_queue.id,
                "number": existing_entry.number,
                "status": "existing"
            }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏
        current_count = crud_queue.count_queue_entries(self.db, daily_queue.id)
        next_number = 1 + current_count  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏
        queue_entry = OnlineQueueEntry(
            queue_id=daily_queue.id,
            patient_id=visit.patient_id,
            number=next_number,
            status="waiting",
            source="morning_assignment",  # –ò—Å—Ç–æ—á–Ω–∏–∫: —É—Ç—Ä–µ–Ω–Ω—è—è —Å–±–æ—Ä–∫–∞
            visit_id=visit.id  # –°–≤—è–∑—ã–≤–∞–µ–º —Å –≤–∏–∑–∏—Ç–æ–º
        )
        self.db.add(queue_entry)
        
        logger.info(f"–ü—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–º–µ—Ä {next_number} –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_tag} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {visit.patient_id}")
        
        return {
            "queue_tag": queue_tag,
            "queue_id": daily_queue.id,
            "number": next_number,
            "status": "assigned"
        }
    
    def get_morning_assignment_stats(self, target_date: Optional[date] = None) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏"""
        if not target_date:
            target_date = date.today()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –Ω–∞ –¥–∞—Ç—É
        confirmed_visits = self.db.query(Visit).filter(
            and_(
                Visit.visit_date == target_date,
                Visit.status.in_(["confirmed", "open"]),
                Visit.confirmed_at.isnot(None)
            )
        ).count()
        
        # –í–∏–∑–∏—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "open" (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
        processed_visits = self.db.query(Visit).filter(
            and_(
                Visit.visit_date == target_date,
                Visit.status == "open"
            )
        ).count()
        
        # –ó–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö –Ω–∞ –¥–∞—Ç—É
        queue_entries = self.db.query(OnlineQueueEntry).join(DailyQueue).filter(
            DailyQueue.day == target_date
        ).count()
        
        return {
            "date": target_date.isoformat(),
            "confirmed_visits": confirmed_visits,
            "processed_visits": processed_visits,
            "queue_entries": queue_entries,
            "pending_processing": confirmed_visits - processed_visits
        }


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏
def run_morning_assignment(target_date: Optional[date] = None) -> Dict[str, any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω—é—é —Å–±–æ—Ä–∫—É –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ cron job –∏–ª–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    """
    with MorningAssignmentService() as service:
        return service.run_morning_assignment(target_date)


def get_assignment_stats(target_date: Optional[date] = None) -> Dict[str, any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏"""
    with MorningAssignmentService() as service:
        return service.get_morning_assignment_stats(target_date)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_morning_assignment():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏")
    
    result = run_morning_assignment()
    stats = get_assignment_stats()
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–±–æ—Ä–∫–∏:")
    print(f"  –£—Å–ø–µ—Ö: {result['success']}")
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–∑–∏—Ç–æ–≤: {result['processed_visits']}")
    print(f"  –ü—Ä–∏—Å–≤–æ–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {result['assigned_queues']}")
    print(f"  –û—à–∏–±–∫–∏: {len(result['errors'])}")
    
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {stats['confirmed_visits']}")
    print(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {stats['processed_visits']}")
    print(f"  –ó–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—è—Ö: {stats['queue_entries']}")
    print(f"  –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['pending_processing']}")
    
    return result, stats


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
    test_morning_assignment()
