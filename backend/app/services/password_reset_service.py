"""
–°–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
"""
import secrets
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from sqlalchemy.orm import Session

from app.core.config import settings
from app.core.security import get_password_hash, verify_password
from app.crud import user as crud_user
from app.services.phone_verification_service import get_phone_verification_service
from app.services.email_sms_enhanced import EmailSMSEnhancedService
from app.models.user import User

logger = logging.getLogger(__name__)


class PasswordResetService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π"""
    
    def __init__(self):
        self.phone_verification = get_phone_verification_service()
        self.email_service = EmailSMSEnhancedService()
        self.reset_tokens = {}  # –í production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis
        self.token_ttl_hours = 1  # –¢–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 1 —á–∞—Å
        
    def generate_reset_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        return secrets.token_urlsafe(32)
    
    def _get_token_key(self, token: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
        return f"password_reset:{token}"
    
    def _clean_expired_tokens(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        now = datetime.now()
        expired_keys = []
        
        for key, data in self.reset_tokens.items():
            if data.get('expires_at') and now > data['expires_at']:
                expired_keys.append(key)
        
        for key in expired_keys:
            del self.reset_tokens[key]
    
    async def initiate_phone_reset(
        self,
        db: Session,
        phone: str
    ) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
            user = crud_user.get_user_by_phone(db, phone=phone)
            if not user:
                # –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return {
                    "success": True,
                    "message": "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_result = await self.phone_verification.send_verification_code(
                phone=phone,
                purpose="password_reset",
                custom_message="–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç."
            )
            
            if verification_result["success"]:
                logger.info(f"Password reset code sent to phone {phone}")
                return {
                    "success": True,
                    "message": "–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä",
                    "expires_in_minutes": verification_result["expires_in_minutes"]
                }
            else:
                return {
                    "success": False,
                    "error": verification_result["error"],
                    "error_code": verification_result.get("error_code")
                }
                
        except Exception as e:
            logger.error(f"Error initiating phone reset for {phone}: {e}")
            return {
                "success": False,
                "error": str(e),
                "error_code": "INTERNAL_ERROR"
            }
    
    async def initiate_email_reset(
        self,
        db: Session,
        email: str
    ) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ email"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            user = crud_user.get_user_by_email(db, email=email)
            if not user:
                # –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return {
                    "success": True,
                    "message": "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
            reset_token = self.generate_reset_token()
            expires_at = datetime.now() + timedelta(hours=self.token_ttl_hours)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            token_key = self._get_token_key(reset_token)
            self.reset_tokens[token_key] = {
                "user_id": user.id,
                "email": email,
                "created_at": datetime.now(),
                "expires_at": expires_at,
                "used": False
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞
            reset_url = f"{settings.FRONTEND_URL}/reset-password?token={reset_token}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"
            html_content = f"""
            <html>
            <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; color: white;">
                    <h1>üîê –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h1>
                </div>
                
                <div style="padding: 30px; background: #f9f9f9;">
                    <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</h2>
                    
                    <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ.</p>
                    
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="{reset_url}" 
                           style="background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
                            –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
                        </a>
                    </div>
                    
                    <p><strong>–í–∞–∂–Ω–æ:</strong></p>
                    <ul>
                        <li>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {self.token_ttl_hours} —á–∞—Å–∞</li>
                        <li>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ</li>
                        <li>–°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</li>
                    </ul>
                    
                    <p>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:</p>
                    <p style="word-break: break-all; color: #667eea;">{reset_url}</p>
                </div>
                
                <div style="padding: 20px; text-align: center; color: #666; font-size: 12px;">
                    <p>¬© 2024 –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </body>
            </html>
            """
            
            text_content = f"""
            –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
            
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
            
            –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–µ.
            
            –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:
            {reset_url}
            
            –í–∞–∂–Ω–æ:
            - –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {self.token_ttl_hours} —á–∞—Å–∞
            - –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ
            - –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            
            ¬© 2024 –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞
            """
            
            email_result = await self.email_service.send_email(
                to_email=email,
                subject=subject,
                html_content=html_content,
                text_content=text_content
            )
            
            if email_result.get("success"):
                logger.info(f"Password reset email sent to {email}")
                return {
                    "success": True,
                    "message": "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email",
                    "expires_in_hours": self.token_ttl_hours
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {email_result.get('error')}",
                    "error_code": "EMAIL_SEND_FAILED"
                }
                
        except Exception as e:
            logger.error(f"Error initiating email reset for {email}: {e}")
            return {
                "success": False,
                "error": str(e),
                "error_code": "INTERNAL_ERROR"
            }
    
    async def verify_phone_and_get_token(
        self,
        db: Session,
        phone: str,
        verification_code: str
    ) -> Dict[str, Any]:
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            verification_result = self.phone_verification.verify_code(
                phone=phone,
                code=verification_code,
                purpose="password_reset"
            )
            
            if not verification_result["success"]:
                return verification_result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = crud_user.get_user_by_phone(db, phone=phone)
            if not user:
                return {
                    "success": False,
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "error_code": "USER_NOT_FOUND"
                }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
            reset_token = self.generate_reset_token()
            expires_at = datetime.now() + timedelta(hours=self.token_ttl_hours)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            token_key = self._get_token_key(reset_token)
            self.reset_tokens[token_key] = {
                "user_id": user.id,
                "phone": phone,
                "created_at": datetime.now(),
                "expires_at": expires_at,
                "used": False
            }
            
            logger.info(f"Reset token generated for phone {phone}")
            
            return {
                "success": True,
                "message": "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                "reset_token": reset_token,
                "expires_in_hours": self.token_ttl_hours
            }
            
        except Exception as e:
            logger.error(f"Error verifying phone and getting token: {e}")
            return {
                "success": False,
                "error": str(e),
                "error_code": "INTERNAL_ERROR"
            }
    
    def reset_password_with_token(
        self,
        db: Session,
        token: str,
        new_password: str
    ) -> Dict[str, Any]:
        """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã
            self._clean_expired_tokens()
            
            token_key = self._get_token_key(token)
            
            if token_key not in self.reset_tokens:
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫",
                    "error_code": "TOKEN_NOT_FOUND"
                }
            
            token_data = self.reset_tokens[token_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            if datetime.now() > token_data['expires_at']:
                del self.reset_tokens[token_key]
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫",
                    "error_code": "TOKEN_EXPIRED"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —Ç–æ–∫–µ–Ω
            if token_data.get('used'):
                return {
                    "success": False,
                    "error": "–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
                    "error_code": "TOKEN_ALREADY_USED"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = crud_user.get_user(db, user_id=token_data['user_id'])
            if not user:
                return {
                    "success": False,
                    "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "error_code": "USER_NOT_FOUND"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            if len(new_password) < 6:
                return {
                    "success": False,
                    "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
                    "error_code": "PASSWORD_TOO_SHORT"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ —Å—Ç–∞—Ä—ã–º
            if verify_password(new_password, user.hashed_password):
                return {
                    "success": False,
                    "error": "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ",
                    "error_code": "PASSWORD_SAME_AS_OLD"
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            hashed_password = get_password_hash(new_password)
            user_data = {
                "hashed_password": hashed_password,
                "password_changed_at": datetime.now()
            }
            
            updated_user = crud_user.update_user(db, user_id=user.id, user_data=user_data)
            
            if updated_user:
                # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                token_data['used'] = True
                token_data['used_at'] = datetime.now()
                
                logger.info(f"Password reset completed for user {user.id}")
                
                return {
                    "success": True,
                    "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
                    "user_id": user.id
                }
            else:
                return {
                    "success": False,
                    "error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
                    "error_code": "PASSWORD_UPDATE_FAILED"
                }
                
        except Exception as e:
            logger.error(f"Error resetting password with token: {e}")
            return {
                "success": False,
                "error": str(e),
                "error_code": "INTERNAL_ERROR"
            }
    
    def validate_reset_token(self, token: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞"""
        try:
            self._clean_expired_tokens()
            
            token_key = self._get_token_key(token)
            
            if token_key not in self.reset_tokens:
                return {
                    "valid": False,
                    "error": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "error_code": "TOKEN_NOT_FOUND"
                }
            
            token_data = self.reset_tokens[token_key]
            
            if datetime.now() > token_data['expires_at']:
                del self.reset_tokens[token_key]
                return {
                    "valid": False,
                    "error": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫",
                    "error_code": "TOKEN_EXPIRED"
                }
            
            if token_data.get('used'):
                return {
                    "valid": False,
                    "error": "–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
                    "error_code": "TOKEN_ALREADY_USED"
                }
            
            return {
                "valid": True,
                "user_id": token_data['user_id'],
                "expires_at": token_data['expires_at'].isoformat(),
                "time_left_minutes": int((token_data['expires_at'] - datetime.now()).total_seconds() / 60)
            }
            
        except Exception as e:
            logger.error(f"Error validating reset token: {e}")
            return {
                "valid": False,
                "error": str(e),
                "error_code": "INTERNAL_ERROR"
            }
    
    def get_statistics(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª–µ–π"""
        try:
            self._clean_expired_tokens()
            
            total_tokens = len(self.reset_tokens)
            used_tokens = sum(1 for data in self.reset_tokens.values() if data.get('used', False))
            active_tokens = total_tokens - used_tokens
            
            by_method = {"phone": 0, "email": 0}
            for data in self.reset_tokens.values():
                if 'phone' in data:
                    by_method['phone'] += 1
                elif 'email' in data:
                    by_method['email'] += 1
            
            return {
                "total_tokens": total_tokens,
                "active_tokens": active_tokens,
                "used_tokens": used_tokens,
                "by_method": by_method,
                "settings": {
                    "token_ttl_hours": self.token_ttl_hours
                }
            }
            
        except Exception as e:
            logger.error(f"Error getting password reset statistics: {e}")
            return {
                "error": str(e)
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
password_reset_service = PasswordResetService()


def get_password_reset_service() -> PasswordResetService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª–µ–π"""
    return password_reset_service


