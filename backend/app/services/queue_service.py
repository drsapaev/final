"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
"""
from datetime import datetime, date, time, timedelta
from typing import Dict, List, Optional, Tuple
from sqlalchemy.orm import Session

from app.models.online_queue import DailyQueue, OnlineQueueEntry
from app.models.user import User


class QueueBusinessService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –æ—á–µ—Ä–µ–¥–∏"""
    
    # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º (—Å–æ–≥–ª–∞—Å–Ω–æ MASTER TODO LIST)
    SPECIALTY_START_NUMBERS = {
        "cardio": 1,      # –ö–∞—Ä–¥–∏–æ–ª–æ–≥ - —Å ‚Ññ1
        "derma": 15,      # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥ - —Å ‚Ññ15 
        "dental": 3,      # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥ - —Å ‚Ññ3
        "general": 1,     # –û–±—â–∏–π –≤—Ä–∞—á - —Å ‚Ññ1
        "default": 1      # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å ‚Ññ1
    }
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏
    ONLINE_QUEUE_START_TIME = time(7, 0)  # 07:00
    
    # –õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_MAX_SLOTS = 15
    
    @classmethod
    def get_start_number_for_specialist(cls, specialist: User) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–æ–ª–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º –∞—Ç—Ä–∏–±—É—Ç–∞–º
        specialty = cls._determine_specialty(specialist)
        return cls.SPECIALTY_START_NUMBERS.get(specialty, cls.SPECIALTY_START_NUMBERS["default"])
    
    @classmethod
    def _determine_specialty(cls, specialist: User) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–∞—á–∞"""
        # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        if hasattr(specialist, 'specialty'):
            return specialist.specialty.lower()
        
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –∏–ª–∏ username
        username = specialist.username.lower()
        if 'cardio' in username or '–∫–∞—Ä–¥–∏–æ' in username:
            return "cardio"
        elif 'derma' in username or '–¥–µ—Ä–º–∞' in username:
            return "derma"
        elif 'dental' in username or '—Å—Ç–æ–º–∞—Ç' in username:
            return "dental"
        else:
            return "general"
    
    @classmethod
    def check_queue_time_window(cls, target_date: date, queue_opened_at: Optional[datetime] = None) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Returns:
            (is_allowed, message)
        """
        now = datetime.now()
        today = now.date()
        current_time = now.time()
        
        if target_date < today:
            return False, "‚ùå QR –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –∑–∞ –Ω–æ–≤—ã–º –∫–æ–¥–æ–º."
        
        if target_date == today:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
            if current_time < cls.ONLINE_QUEUE_START_TIME:
                return False, f"‚è∞ –û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ {cls.ONLINE_QUEUE_START_TIME.strftime('%H:%M')}. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M')}"
            
            if queue_opened_at:
                opened_time = queue_opened_at.strftime('%H:%M')
                return False, f"üö™ –ü—Ä–∏–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –≤ {opened_time}. –û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É."
        
        # –î–ª—è –±—É–¥—É—â–∏—Ö –¥–Ω–µ–π —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø–∏—Å—å
        return True, ""
    
    @classmethod
    def check_queue_limits(cls, db: Session, daily_queue: DailyQueue) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –æ—á–µ—Ä–µ–¥–∏
        
        Returns:
            (is_allowed, message)
        """
        current_entries = db.query(OnlineQueueEntry).filter(
            OnlineQueueEntry.queue_id == daily_queue.id,
            OnlineQueueEntry.status.in_(["waiting", "called"])
        ).count()
        
        max_slots = getattr(daily_queue, 'max_slots', None) or cls.DEFAULT_MAX_SLOTS
        
        if current_entries >= max_slots:
            return False, f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–µ—Å—Ç ({max_slots}). –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É."
        
        return True, ""
    
    @classmethod
    def check_uniqueness(cls, db: Session, daily_queue: DailyQueue, phone: Optional[str] = None, 
                        telegram_id: Optional[str] = None) -> Tuple[Optional[OnlineQueueEntry], str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        
        Returns:
            (existing_entry, duplicate_reason)
        """
        if not phone and not telegram_id:
            return None, ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if phone:
            phone_entry = db.query(OnlineQueueEntry).filter(
                OnlineQueueEntry.queue_id == daily_queue.id,
                OnlineQueueEntry.phone == phone,
                OnlineQueueEntry.status.in_(["waiting", "called"])
            ).first()
            
            if phone_entry:
                return phone_entry, f"—Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Telegram ID
        if telegram_id:
            telegram_entry = db.query(OnlineQueueEntry).filter(
                OnlineQueueEntry.queue_id == daily_queue.id,
                OnlineQueueEntry.telegram_id == telegram_id,
                OnlineQueueEntry.status.in_(["waiting", "called"])
            ).first()
            
            if telegram_entry:
                return telegram_entry, f"Telegram ID {telegram_id}"
        
        return None, ""
    
    @classmethod
    def calculate_next_number(cls, db: Session, daily_queue: DailyQueue) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏"""
        current_entries = db.query(OnlineQueueEntry).filter(
            OnlineQueueEntry.queue_id == daily_queue.id,
            OnlineQueueEntry.status.in_(["waiting", "called"])
        ).count()
        
        return daily_queue.start_number + current_entries
    
    @classmethod
    def get_queue_statistics(cls, db: Session, daily_queue: DailyQueue) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏"""
        entries = db.query(OnlineQueueEntry).filter(
            OnlineQueueEntry.queue_id == daily_queue.id
        ).all()
        
        stats = {
            "total_entries": len(entries),
            "waiting": len([e for e in entries if e.status == "waiting"]),
            "called": len([e for e in entries if e.status == "called"]),
            "completed": len([e for e in entries if e.status == "completed"]),
            "cancelled": len([e for e in entries if e.status == "cancelled"]),
            "max_slots": getattr(daily_queue, 'max_slots', None) or cls.DEFAULT_MAX_SLOTS,
            "available_slots": max(0, (getattr(daily_queue, 'max_slots', None) or cls.DEFAULT_MAX_SLOTS) - len([e for e in entries if e.status in ["waiting", "called"]])),
            "is_open": daily_queue.opened_at is not None,
            "opened_at": daily_queue.opened_at.isoformat() if daily_queue.opened_at else None
        }
        
        return stats
    
    @classmethod
    def validate_queue_entry_data(cls, patient_name: str, phone: Optional[str] = None, 
                                 telegram_id: Optional[str] = None) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        if not patient_name or not patient_name.strip():
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û"
        
        if not phone and not telegram_id:
            return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram ID"
        
        if phone:
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            cleaned_phone = phone.replace("+", "").replace("-", "").replace(" ", "").replace("(", "").replace(")", "")
            if not cleaned_phone.isdigit() or len(cleaned_phone) < 9:
                return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        
        return True, ""


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
queue_service = QueueBusinessService()

def get_queue_service() -> QueueBusinessService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ—á–µ—Ä–µ–¥–∏"""
    return queue_service
