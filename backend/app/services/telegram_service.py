"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
–û—Å–Ω–æ–≤–∞: passport.md —Å—Ç—Ä. 2064-2570, detail.md —Å—Ç—Ä. 4283-4282
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
from sqlalchemy.orm import Session

try:
    from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    Bot = None
    Application = None
    Update = None

from app.models.telegram_config import TelegramConfig, TelegramTemplate, TelegramUser, TelegramMessage
from app.crud import telegram_config as crud_telegram
from app.db.session import SessionLocal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        self.config: Optional[TelegramConfig] = None
        self.db: Optional[Session] = None

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            logger.error("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        try:
            self.db = SessionLocal()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
            self.config = crud_telegram.get_telegram_config(self.db)
            
            if not self.config or not self.config.bot_token:
                logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False

            if not self.config.active:
                logger.error("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                return False

            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
            self.bot = Bot(token=self.config.bot_token)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(self.config.bot_token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self._register_handlers()
            
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            return False

    async def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            return

        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("help", self._handle_help))
        self.application.add_handler(CommandHandler("queue", self._handle_queue))
        self.application.add_handler(CommandHandler("appointments", self._handle_appointments))
        self.application.add_handler(CommandHandler("results", self._handle_results))
        self.application.add_handler(CommandHandler("cancel", self._handle_cancel))
        
        # Callback queries (inline –∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã (–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
        self.application.add_handler(MessageHandler(filters.CONTACT, self._handle_contact))

    async def _handle_start(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            chat_id = update.effective_chat.id
            user = update.effective_user
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._register_telegram_user(chat_id, user)
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            welcome_template = crud_telegram.get_template_by_key(
                self.db, 
                "welcome_message", 
                user.language_code or "ru"
            )
            
            if welcome_template:
                message_text = self._render_template(welcome_template.message_text, {
                    "user_name": user.first_name or "–ü–∞—Ü–∏–µ–Ω—Ç",
                    "clinic_name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞"
                })
            else:
                message_text = f"""
üè• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name or '–ü–∞—Ü–∏–µ–Ω—Ç'}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
üì± –ü–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/queue - –û–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å
/appointments - –ú–æ–∏ –∑–∞–ø–∏—Å–∏
/results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤
/help - –ü–æ–º–æ—â—å
"""

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", callback_data="book_appointment"),
                    InlineKeyboardButton("üì± QR –æ—á–µ—Ä–µ–¥—å", callback_data="get_qr")
                ],
                [
                    InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments"),
                    InlineKeyboardButton("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_results")
                ],
                [
                    InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._log_message(chat_id, "start", message_text, "bot_to_user")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start: {e}")

    async def _handle_help(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∫–ª–∏–Ω–∏–∫–∏</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/queue - –û–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å –∏ QR –∫–æ–¥—ã
/appointments - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π
/results - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤
/cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
üì± <b>QR –æ—á–µ—Ä–µ–¥—å</b> - –ø–æ–ª—É—á–∏—Ç–µ QR –∫–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å
üìÖ <b>–ó–∞–ø–∏—Å–∏</b> - –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á–∞–º
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö
üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b> - –ø–æ–ª—É—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –∞–Ω–∞–ª–∏–∑—ã

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @clinic_support
"""
        
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def _handle_queue(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /queue"""
        try:
            chat_id = update.effective_chat.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è QR
            specialties = await self._get_available_specialties()
            
            if not specialties:
                await update.message.reply_text(
                    "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç QR –∫–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É."
                )
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            keyboard = []
            for specialty in specialties:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{specialty['icon']} {specialty['name']}", 
                        callback_data=f"qr_{specialty['code']}"
                    )
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞:</b>",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /queue: {e}")

    async def _handle_callback(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            data = query.data
            chat_id = query.message.chat_id
            
            if data == "get_qr":
                await self._handle_queue(update, context)
            elif data == "book_appointment":
                await self._handle_book_appointment(query)
            elif data == "my_appointments":
                await self._handle_my_appointments(query)
            elif data == "my_results":
                await self._handle_my_results(query)
            elif data.startswith("qr_"):
                specialty = data.replace("qr_", "")
                await self._generate_qr_code(query, specialty)
            elif data == "back_to_main":
                await self._handle_start(update, context)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

    async def _handle_message(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = update.message.text
            chat_id = update.effective_chat.id
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if "–∑–∞–ø–∏—Å—å" in message_text.lower() or "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è" in message_text.lower():
                await update.message.reply_text(
                    "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /queue"
                )
            elif "–æ—á–µ—Ä–µ–¥—å" in message_text.lower() or "qr" in message_text.lower():
                await self._handle_queue(update, context)
            elif "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" in message_text.lower() or "–∞–Ω–∞–ª–∏–∑" in message_text.lower():
                await update.message.reply_text(
                    "üß™ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /results"
                )
            else:
                await update.message.reply_text(
                    "ü§ñ –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _handle_contact(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É)"""
        try:
            contact = update.message.contact
            chat_id = update.effective_chat.id
            
            if contact.user_id == update.effective_user.id:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
                phone = contact.phone_number
                
                # –ò—â–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                patient = await self._find_patient_by_phone(phone)
                
                if patient:
                    # –°–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
                    await self._link_patient_to_telegram(chat_id, patient['id'])
                    
                    await update.message.reply_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É: {patient['full_name']}\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö."
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")

    async def _register_telegram_user(self, chat_id: int, user) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        try:
            existing = crud_telegram.get_telegram_user_by_chat_id(self.db, chat_id)
            
            if not existing:
                user_data = {
                    "chat_id": chat_id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                    "language_code": user.language_code or "ru",
                    "active": True,
                    "last_activity": datetime.utcnow()
                }
                
                crud_telegram.create_telegram_user(self.db, user_data)
                logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                crud_telegram.update_telegram_user(self.db, existing.id, {
                    "last_activity": datetime.utcnow(),
                    "active": True
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    async def _get_available_specialties(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è QR"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏
            specialties = [
                {"code": "cardiology", "name": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è", "icon": "‚ù§Ô∏è"},
                {"code": "dermatology", "name": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è", "icon": "ü©∫"},
                {"code": "stomatology", "name": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", "icon": "ü¶∑"},
                {"code": "therapy", "name": "–¢–µ—Ä–∞–ø–∏—è", "icon": "üë®‚Äç‚öïÔ∏è"}
            ]
            
            return specialties
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: {e}")
            return []

    async def _generate_qr_code(self, query, specialty: str) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏
            from datetime import date
            import requests
            
            tomorrow = (date.today() + timedelta(days=1)).isoformat()
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API
            qr_data = {
                "success": True,
                "token": f"QR_{specialty}_{datetime.now().strftime('%Y%m%d%H%M%S')}",
                "specialty": specialty,
                "date": tomorrow,
                "time_window": "07:00-09:00"
            }
            
            if qr_data["success"]:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º
                message_text = f"""
üì± <b>QR –∫–æ–¥ –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏</b>

üè• <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {specialty.title()}
üìÖ <b>–î–∞—Ç–∞:</b> {tomorrow}
‚è∞ <b>–û–∫–Ω–æ –∑–∞–ø–∏—Å–∏:</b> {qr_data['time_window']}

<code>{qr_data['token']}</code>

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥
2. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∫–ª–∏–Ω–∏–∫–∏ –≤ {qr_data['time_window']}
3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!
"""

                keyboard = [
                    [InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://clinic.example.com/queue")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ]
                
                await query.edit_message_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: {e}")

    async def send_notification(
        self, 
        chat_id: int, 
        template_key: str, 
        data: Dict[str, Any],
        language: str = "ru"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if not self.bot:
                return False

            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            template = crud_telegram.get_template_by_key(self.db, template_key, language)
            
            if not template:
                logger.error(f"–®–∞–±–ª–æ–Ω {template_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self._render_template(template.message_text, data)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            reply_markup = None
            if template.inline_buttons:
                keyboard = []
                for button in template.inline_buttons:
                    keyboard.append([
                        InlineKeyboardButton(button["text"], callback_data=button["callback_data"])
                    ])
                reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                parse_mode=template.parse_mode,
                disable_web_page_preview=template.disable_web_page_preview,
                reply_markup=reply_markup
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            await self._log_message(chat_id, template_key, message_text, "bot_to_user")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    def _render_template(self, template_text: str, data: Dict[str, Any]) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            from jinja2 import Environment
            env = Environment()
            template = env.from_string(template_text)
            return template.render(**data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
            return template_text

    async def _log_message(
        self, 
        chat_id: int, 
        message_type: str, 
        content: str, 
        direction: str
    ) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            log_data = {
                "chat_id": chat_id,
                "message_type": message_type,
                "content": content[:1000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                "direction": direction,
                "status": "sent"
            }
            
            crud_telegram.create_message_log(self.db, log_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def start_bot(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            if not await self.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.application.run_polling()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

    async def stop_bot(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.application:
                await self.application.stop()
                logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            if self.db:
                self.db.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service: Optional[TelegramService] = None

def get_telegram_service() -> TelegramService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram —Å–µ—Ä–≤–∏—Å–∞"""
    global telegram_service
    if telegram_service is None:
        telegram_service = TelegramService()
    return telegram_service

async def send_telegram_notification(
    chat_id: int,
    template_key: str,
    data: Dict[str, Any],
    language: str = "ru"
) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    service = get_telegram_service()
    return await service.send_notification(chat_id, template_key, data, language)
