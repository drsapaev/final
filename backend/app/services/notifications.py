from datetime import datetime
from typing import Optional, Dict, Any, List
import smtplib
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import logging

from app.core.config import settings

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.smtp_server = getattr(settings, 'SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = getattr(settings, 'SMTP_PORT', 587)
        self.smtp_username = getattr(settings, 'SMTP_USERNAME', None)
        self.smtp_password = getattr(settings, 'SMTP_PASSWORD', None)
        
        self.telegram_bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        self.telegram_chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', None)
        
        self.sms_api_key = getattr(settings, 'SMS_API_KEY', None)
        self.sms_api_url = getattr(settings, 'SMS_API_URL', None)
    
    async def send_email(
        self,
        to_email: str,
        subject: str,
        body: str,
        html_body: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not all([self.smtp_username, self.smtp_password]):
            logger.warning("SMTP credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            msg = MIMEMultipart('alternative')
            msg['From'] = self.smtp_username
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            text_part = MIMEText(body, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            if html_body:
                html_part = MIMEText(html_body, 'html', 'utf-8')
                msg.attach(html_part)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.smtp_username, self.smtp_password)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            server.send_message(msg)
            server.quit()
            
            logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}: {subject}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
    
    async def send_telegram(
        self,
        message: str,
        chat_id: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_bot_token:
            logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        chat_id = chat_id or self.telegram_chat_id
        if not chat_id:
            logger.warning("Telegram chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False
    
    async def send_sms(
        self,
        phone: str,
        message: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not all([self.sms_api_key, self.sms_api_url]):
            logger.warning("SMS API credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        try:
            data = {
                "api_key": self.sms_api_key,
                "phone": phone,
                "message": message
            }
            
            response = requests.post(self.sms_api_url, json=data, timeout=10)
            response.raise_for_status()
            
            logger.info(f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")
            return False
    
    async def send_appointment_reminder(
        self,
        patient_email: str,
        patient_phone: str,
        appointment_date: datetime,
        doctor_name: str,
        department: str
    ) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        subject = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É {doctor_name} –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ {department}.
        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {appointment_date.strftime('%d.%m.%Y –≤ %H:%M')}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–π—Ç–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏—ë–º–∞.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
        """
        
        sms_message = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–ø–∏—Å—å –∫ {doctor_name} {appointment_date.strftime('%d.%m –≤ %H:%M')}"
        
        telegram_message = f"""
        üìÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>
        
        üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_email}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {patient_phone}
        üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
        üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}
        üìÖ –î–∞—Ç–∞: {appointment_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = {}
        
        if patient_email:
            results['email'] = await self.send_email(
                patient_email, subject, email_body
            )
        
        if patient_phone:
            results['sms'] = await self.send_sms(patient_phone, sms_message)
        
        results['telegram'] = await self.send_telegram(telegram_message)
        
        return results
    
    async def send_visit_confirmation(
        self,
        patient_email: str,
        patient_phone: str,
        visit_date: datetime,
        doctor_name: str,
        department: str,
        queue_number: Optional[int] = None
    ) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞"""
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –∫ –≤—Ä–∞—á—É"
        
        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –í–∞—à –≤–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É {doctor_name} –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ {department} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.
        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """
        
        if queue_number:
            email_body += f"–ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_number}\n"
        
        email_body += """
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
        """
        
        sms_message = f"–í–∏–∑–∏—Ç –∫ {doctor_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω {visit_date.strftime('%d.%m –≤ %H:%M')}"
        if queue_number:
            sms_message += f", –æ—á–µ—Ä–µ–¥—å ‚Ññ{queue_number}"
        
        telegram_message = f"""
        ‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞</b>
        
        üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_email}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {patient_phone}
        üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
        üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}
        üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """
        
        if queue_number:
            telegram_message += f"üé´ –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_number}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = {}
        
        if patient_email:
            results['email'] = await self.send_email(
                patient_email, subject, email_body
            )
        
        if patient_phone:
            results['sms'] = await self.send_sms(patient_phone, sms_message)
        
        results['telegram'] = await self.send_telegram(telegram_message)
        
        return results
    
    async def send_payment_notification(
        self,
        patient_email: str,
        patient_phone: str,
        amount: float,
        currency: str,
        visit_date: datetime,
        doctor_name: str
    ) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
        
        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É {doctor_name}.
        –°—É–º–º–∞: {amount} {currency}
        –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        
        –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
        """
        
        sms_message = f"–û–ø–ª–∞—Ç–∞ {amount} {currency} –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ –≤–∏–∑–∏—Ç –∫ {doctor_name}"
        
        telegram_message = f"""
        üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>
        
        üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_email}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {patient_phone}
        üíµ –°—É–º–º–∞: {amount} {currency}
        üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
        üìÖ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = {}
        
        if patient_email:
            results['email'] = await self.send_email(
                patient_email, subject, email_body
            )
        
        if patient_phone:
            results['sms'] = await self.send_sms(patient_phone, sms_message)
        
        results['telegram'] = await self.send_telegram(telegram_message)
        
        return results
    
    async def send_queue_update(
        self,
        department: str,
        current_number: int,
        estimated_wait: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤ Telegram"""
        message = f"""
        üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏</b>
        
        üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}
        üé´ –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {current_number}
        ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_wait}
        
        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
        """
        
        return await self.send_telegram(message)
    
    async def send_system_alert(
        self,
        alert_type: str,
        message: str,
        details: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
        alert_message = f"""
        üö® <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ</b>
        
        –¢–∏–ø: {alert_type}
        –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
        """
        
        if details:
            alert_message += "\n–î–µ—Ç–∞–ª–∏:\n"
            for key, value in details.items():
                alert_message += f"‚Ä¢ {key}: {value}\n"
        
        alert_message += f"\n–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        return await self.send_telegram(alert_message)

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()

