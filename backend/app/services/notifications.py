import logging
import smtplib
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from typing import Any, Dict, List, Optional

import requests
from jinja2 import Template
from sqlalchemy.orm import Session

from app.core.config import settings
from app.crud.notification import (
    crud_notification_history,
    crud_notification_settings,
    crud_notification_template,
)
from app.models.notification import NotificationHistory
from app.schemas.notification import NotificationHistoryCreate

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.smtp_server = getattr(settings, "SMTP_SERVER", "smtp.gmail.com")
        self.smtp_port = getattr(settings, "SMTP_PORT", 587)
        self.smtp_username = getattr(settings, "SMTP_USERNAME", None)
        self.smtp_password = getattr(settings, "SMTP_PASSWORD", None)

        self.telegram_bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", None)
        self.telegram_chat_id = getattr(settings, "TELEGRAM_CHAT_ID", None)

        self.sms_api_key = getattr(settings, "SMS_API_KEY", None)
        self.sms_api_url = getattr(settings, "SMS_API_URL", None)

    async def send_email(
        self, to_email: str, subject: str, body: str, html_body: Optional[str] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not all([self.smtp_username, self.smtp_password]):
            logger.warning("SMTP credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False

        try:
            msg = MIMEMultipart("alternative")
            msg["From"] = self.smtp_username
            msg["To"] = to_email
            msg["Subject"] = subject

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            text_part = MIMEText(body, "plain", "utf-8")
            msg.attach(text_part)

            # –î–æ–±–∞–≤–ª—è–µ–º HTML –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            if html_body:
                html_part = MIMEText(html_body, "html", "utf-8")
                msg.attach(html_part)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.smtp_username, self.smtp_password)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
            server.send_message(msg)
            server.quit()

            logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}: {subject}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False

    async def send_telegram(self, message: str, chat_id: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_bot_token:
            logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        chat_id = chat_id or self.telegram_chat_id
        if not chat_id:
            logger.warning("Telegram chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}

            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()

            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False

    async def send_sms(self, phone: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not all([self.sms_api_key, self.sms_api_url]):
            logger.warning("SMS API credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False

        try:
            data = {"api_key": self.sms_api_key, "phone": phone, "message": message}

            response = requests.post(self.sms_api_url, json=data, timeout=10)
            response.raise_for_status()

            logger.info(f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {e}")
            return False

    async def send_appointment_reminder(
        self,
        patient_email: str,
        patient_phone: str,
        appointment_date: datetime,
        doctor_name: str,
        department: str,
    ) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        subject = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É {doctor_name} –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ {department}.
        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {appointment_date.strftime('%d.%m.%Y –≤ %H:%M')}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–π—Ç–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏—ë–º–∞.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
        """

        sms_message = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–ø–∏—Å—å –∫ {doctor_name} {appointment_date.strftime('%d.%m –≤ %H:%M')}"

        telegram_message = f"""
        üìÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>
        
        üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_email}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {patient_phone}
        üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
        üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}
        üìÖ –î–∞—Ç–∞: {appointment_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = {}

        if patient_email:
            results["email"] = await self.send_email(patient_email, subject, email_body)

        if patient_phone:
            results["sms"] = await self.send_sms(patient_phone, sms_message)

        results["telegram"] = await self.send_telegram(telegram_message)

        return results

    async def send_visit_confirmation(
        self,
        patient_email: str,
        patient_phone: str,
        visit_date: datetime,
        doctor_name: str,
        department: str,
        queue_number: Optional[int] = None,
    ) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞"""
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –∫ –≤—Ä–∞—á—É"

        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –í–∞—à –≤–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É {doctor_name} –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ {department} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.
        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """

        if queue_number:
            email_body += f"–ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_number}\n"

        email_body += """
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
        """

        sms_message = (
            f"–í–∏–∑–∏—Ç –∫ {doctor_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω {visit_date.strftime('%d.%m –≤ %H:%M')}"
        )
        if queue_number:
            sms_message += f", –æ—á–µ—Ä–µ–¥—å ‚Ññ{queue_number}"

        telegram_message = f"""
        ‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞</b>
        
        üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_email}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {patient_phone}
        üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
        üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}
        üìÖ –î–∞—Ç–∞: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """

        if queue_number:
            telegram_message += f"üé´ –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_number}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = {}

        if patient_email:
            results["email"] = await self.send_email(patient_email, subject, email_body)

        if patient_phone:
            results["sms"] = await self.send_sms(patient_phone, sms_message)

        results["telegram"] = await self.send_telegram(telegram_message)

        return results

    async def send_payment_notification(
        self,
        patient_email: str,
        patient_phone: str,
        amount: float,
        currency: str,
        visit_date: datetime,
        doctor_name: str,
    ) -> Dict[str, bool]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
        subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"

        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
        
        –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –≤–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É {doctor_name}.
        –°—É–º–º–∞: {amount} {currency}
        –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        
        –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–Ω–∏–∫–∏
        """

        sms_message = f"–û–ø–ª–∞—Ç–∞ {amount} {currency} –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ –≤–∏–∑–∏—Ç –∫ {doctor_name}"

        telegram_message = f"""
        üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>
        
        üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_email}
        üì± –¢–µ–ª–µ—Ñ–æ–Ω: {patient_phone}
        üíµ –°—É–º–º–∞: {amount} {currency}
        üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
        üìÖ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {visit_date.strftime('%d.%m.%Y –≤ %H:%M')}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = {}

        if patient_email:
            results["email"] = await self.send_email(patient_email, subject, email_body)

        if patient_phone:
            results["sms"] = await self.send_sms(patient_phone, sms_message)

        results["telegram"] = await self.send_telegram(telegram_message)

        return results

    async def send_queue_update(
        self, department: str, current_number: int, estimated_wait: str
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –≤ Telegram"""
        message = f"""
        üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏</b>
        
        üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}
        üé´ –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {current_number}
        ‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_wait}
        
        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
        """

        return await self.send_telegram(message)

    async def send_system_alert(
        self, alert_type: str, message: str, details: Optional[Dict[str, Any]] = None
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è"""
        alert_message = f"""
        üö® <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ</b>
        
        –¢–∏–ø: {alert_type}
        –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
        """

        if details:
            alert_message += "\n–î–µ—Ç–∞–ª–∏:\n"
            for key, value in details.items():
                alert_message += f"‚Ä¢ {key}: {value}\n"

        alert_message += f"\n–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"

        return await self.send_telegram(alert_message)

    def render_template(self, template_text: str, data: Dict[str, Any]) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            template = Template(template_text)
            return template.render(**data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
            return template_text

    async def send_templated_notification(
        self,
        db: Session,
        notification_type: str,
        channel: str,
        recipient_contact: str,
        template_data: Dict[str, Any],
        recipient_type: str = "patient",
        recipient_id: Optional[int] = None,
        related_entity_type: Optional[str] = None,
        related_entity_id: Optional[int] = None,
    ) -> NotificationHistory:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞"""

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = crud_notification_template.get_by_type_and_channel(
            db, type=notification_type, channel=channel
        )

        if not template:
            logger.warning(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {notification_type}/{channel}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            subject = template_data.get("subject", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            content = template_data.get("message", "–°–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            subject = (
                self.render_template(template.subject or "", template_data)
                if template.subject
                else None
            )
            content = self.render_template(template.template, template_data)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        history_data = NotificationHistoryCreate(
            recipient_type=recipient_type,
            recipient_id=recipient_id,
            recipient_contact=recipient_contact,
            notification_type=notification_type,
            channel=channel,
            template_id=template.id if template else None,
            subject=subject,
            content=content,
            related_entity_type=related_entity_type,
            related_entity_id=related_entity_id,
            metadata=template_data,
        )

        history = crud_notification_history.create(db, obj_in=history_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = False
        error_message = None

        try:
            if channel == "email":
                success = await self.send_email(
                    recipient_contact, subject or "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", content
                )
            elif channel == "sms":
                success = await self.send_sms(recipient_contact, content)
            elif channel == "telegram":
                success = await self.send_telegram(content, recipient_contact)
            else:
                error_message = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª: {channel}"

        except Exception as e:
            error_message = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        status = "sent" if success else "failed"
        crud_notification_history.update_status(
            db, notification_id=history.id, status=status, error_message=error_message
        )

        return history

    async def send_bulk_notification(
        self,
        db: Session,
        notification_type: str,
        channels: List[str],
        recipients: List[Dict[str, Any]],
        template_data: Dict[str, Any],
    ) -> List[NotificationHistory]:
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        results = []

        for recipient in recipients:
            for channel in channels:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                settings = crud_notification_settings.get_by_user(
                    db, user_id=recipient["id"], user_type=recipient["type"]
                )

                if settings and not getattr(settings, f"{channel}_enabled", True):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
                contact = None
                if channel == "email":
                    contact = (
                        settings.notification_email
                        if settings
                        else recipient.get("email")
                    )
                elif channel == "sms":
                    contact = (
                        settings.notification_phone
                        if settings
                        else recipient.get("phone")
                    )
                elif channel == "telegram":
                    contact = (
                        settings.telegram_chat_id
                        if settings
                        else recipient.get("telegram")
                    )

                if not contact:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å –æ–±—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —à–∞–±–ª–æ–Ω–∞
                merged_data = {**template_data, **recipient}

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                history = await self.send_templated_notification(
                    db=db,
                    notification_type=notification_type,
                    channel=channel,
                    recipient_contact=contact,
                    template_data=merged_data,
                    recipient_type=recipient["type"],
                    recipient_id=recipient["id"],
                )

                results.append(history)

        return results

    async def send_appointment_notification(
        self,
        db: Session,
        appointment_id: int,
        patient_id: int,
        notification_type: str = "appointment_reminder",
        channels: Optional[List[str]] = None,
    ) -> List[NotificationHistory]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        from app.crud import patient as patient_crud
        from app.models.appointment import Appointment

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        appointment = (
            db.query(Appointment).filter(Appointment.id == appointment_id).first()
        )
        if not appointment:
            logger.warning(f"–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {appointment_id}")
            return []

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient = patient_crud.get(db, id=patient_id)
        if not patient:
            logger.warning(f"–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {patient_id}")
            return []

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        template_data = {
            "patient_name": patient.full_name
            or f"{patient.first_name} {patient.last_name}",
            "patient_phone": patient.phone,
            "appointment_date": appointment.appointment_date.strftime("%d.%m.%Y"),
            "appointment_time": (
                appointment.appointment_time.strftime("%H:%M")
                if appointment.appointment_time
                else ""
            ),
            "doctor_name": appointment.doctor_name or "–≤—Ä–∞—á",
            "department": appointment.department or "–æ—Ç–¥–µ–ª–µ–Ω–∏–µ",
            "clinic_name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞",
            "clinic_phone": "+998 90 123 45 67",
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
        if channels is None:
            channels = ["email", "sms"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = []
        for channel in channels:
            contact = None
            if channel == "email":
                contact = patient.email
            elif channel == "sms":
                contact = patient.phone

            if contact:
                history = await self.send_templated_notification(
                    db=db,
                    notification_type=notification_type,
                    channel=channel,
                    recipient_contact=contact,
                    template_data=template_data,
                    recipient_type="patient",
                    recipient_id=patient_id,
                    related_entity_type="appointment",
                    related_entity_id=appointment_id,
                )
                results.append(history)

        return results

    async def send_payment_notification_by_id(
        self,
        db: Session,
        payment_id: int,
        patient_id: int,
        amount: float,
        currency: str = "UZS",
        notification_type: str = "payment_success",
        channels: Optional[List[str]] = None,
    ) -> List[NotificationHistory]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
        from app.crud import patient as patient_crud

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient = patient_crud.get(db, id=patient_id)
        if not patient:
            logger.warning(f"–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {patient_id}")
            return []

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        template_data = {
            "patient_name": patient.full_name
            or f"{patient.first_name} {patient.last_name}",
            "amount": amount,
            "currency": currency,
            "formatted_amount": f"{amount:,.0f} {currency}",
            "payment_date": datetime.now().strftime("%d.%m.%Y %H:%M"),
            "clinic_name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞",
            "clinic_phone": "+998 90 123 45 67",
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
        if channels is None:
            channels = ["email", "sms"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        results = []
        for channel in channels:
            contact = None
            if channel == "email":
                contact = patient.email
            elif channel == "sms":
                contact = patient.phone

            if contact:
                history = await self.send_templated_notification(
                    db=db,
                    notification_type=notification_type,
                    channel=channel,
                    recipient_contact=contact,
                    template_data=template_data,
                    recipient_type="patient",
                    recipient_id=patient_id,
                    related_entity_type="payment",
                    related_entity_id=payment_id,
                )
                results.append(history)

        return results


# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()
