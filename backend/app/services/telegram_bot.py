"""
Telegram Bot —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥ –∏ webhook
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List
import json
import requests
from sqlalchemy.orm import Session

from app.db.session import get_db
from app.crud import user as crud_user
from app.crud import appointment as crud_appointment
from app.crud import patient as crud_patient
from app.crud import lab as crud_lab
from app.crud import telegram_config as crud_telegram
from app.services.telegram_service import get_telegram_service

logger = logging.getLogger(__name__)

class TelegramBotService:
    def __init__(self):
        self.bot_token = None
        self.bot_username = None
        self.webhook_url = None
        self.active = False
        
    async def initialize(self, db: Session):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            config = crud_telegram.get_telegram_config(db)
            if config and config.bot_token:
                self.bot_token = config.bot_token
                self.bot_username = config.bot_username
                self.webhook_url = config.webhook_url
                self.active = config.active
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def process_webhook_update(self, update: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            if "message" in update:
                await self._handle_message(update["message"], db)
            elif "callback_query" in update:
                await self._handle_callback_query(update["callback_query"], db)
            elif "inline_query" in update:
                await self._handle_inline_query(update["inline_query"], db)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
    
    async def _handle_message(self, message: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            user_id = message["from"]["id"]
            username = message["from"].get("username", "")
            first_name = message["from"].get("first_name", "")
            last_name = message["from"].get("last_name", "")
            language_code = message["from"].get("language_code", "ru")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = await self._register_telegram_user(
                db, user_id, username, first_name, last_name, language_code, chat_id
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith("/"):
                await self._handle_command(text, chat_id, telegram_user, db)
            else:
                await self._handle_text_message(text, chat_id, telegram_user, db)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_callback_query(self, callback_query: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)"""
        try:
            chat_id = callback_query["message"]["chat"]["id"]
            data = callback_query["data"]
            user_id = callback_query["from"]["id"]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
            if data.startswith("confirm_"):
                appointment_id = data.replace("confirm_", "")
                await self._handle_appointment_confirmation(chat_id, appointment_id, db)
            elif data.startswith("reschedule_"):
                appointment_id = data.replace("reschedule_", "")
                await self._handle_appointment_reschedule(chat_id, appointment_id, db)
            elif data.startswith("cancel_"):
                appointment_id = data.replace("cancel_", "")
                await self._handle_appointment_cancellation(chat_id, appointment_id, db)
            elif data.startswith("book_"):
                doctor_id = data.replace("book_", "")
                await self._handle_booking_request(chat_id, doctor_id, db)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await self._answer_callback_query(callback_query["id"])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    async def _handle_inline_query(self, inline_query: Dict[str, Any], db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            query_id = inline_query["id"]
            query_text = inline_query.get("query", "")
            user_id = inline_query["from"]["id"]
            
            # –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –∏–ª–∏ —É—Å–ª—É–≥
            if "–≤—Ä–∞—á" in query_text.lower() or "doctor" in query_text.lower():
                results = await self._search_doctors(query_text, db)
            elif "–∑–∞–ø–∏—Å—å" in query_text.lower() or "appointment" in query_text.lower():
                results = await self._search_appointments(query_text, user_id, db)
            else:
                results = []
            
            await self._answer_inline_query(query_id, results)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    async def _handle_command(self, command: str, chat_id: int, telegram_user, db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        try:
            if command == "/start":
                await self._send_welcome_message(chat_id, telegram_user)
            elif command == "/help":
                await self._send_help_message(chat_id)
            elif command == "/appointments":
                await self._send_appointments_list(chat_id, telegram_user, db)
            elif command == "/book":
                await self._send_booking_menu(chat_id, db)
            elif command == "/profile":
                await self._send_profile_info(chat_id, telegram_user, db)
            elif command == "/settings":
                await self._send_settings_menu(chat_id, telegram_user)
            elif command == "/support":
                await self._send_support_info(chat_id)
            else:
                await self._send_unknown_command_message(chat_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
    
    async def _handle_text_message(self, text: str, chat_id: int, telegram_user, db: Session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            if any(word in text.lower() for word in ["–≤—Ä–µ–º—è", "—Ä–∞–±–æ—Ç–∞", "—á–∞—Å—ã", "–æ—Ç–∫—Ä—ã—Ç"]):
                await self._send_working_hours(chat_id)
            elif any(word in text.lower() for word in ["–∞–¥—Ä–µ—Å", "–≥–¥–µ", "–Ω–∞–π—Ç–∏", "—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"]):
                await self._send_clinic_address(chat_id)
            elif any(word in text.lower() for word in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–∑–≤–æ–Ω–æ–∫", "—Å–≤—è–∑–∞—Ç—å—Å—è"]):
                await self._send_contact_info(chat_id)
            elif any(word in text.lower() for word in ["—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ"]):
                await self._send_pricing_info(chat_id)
            else:
                await self._send_general_response(chat_id, text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _register_telegram_user(self, db: Session, user_id: int, username: str, 
                                    first_name: str, last_name: str, language_code: str, chat_id: int):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        try:
            telegram_user = crud_telegram.get_telegram_user_by_id(db, user_id)
            
            if not telegram_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                telegram_user = crud_telegram.create_telegram_user(db, {
                    "user_id": user_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                    "language_code": language_code,
                    "chat_id": chat_id,
                    "active": True,
                    "notifications_enabled": True
                })
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                crud_telegram.update_telegram_user(db, user_id, {
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                    "language_code": language_code,
                    "chat_id": chat_id,
                    "last_activity": datetime.utcnow()
                })
            
            return telegram_user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def _send_welcome_message(self, chat_id: int, telegram_user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = f"""
üè• <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Programma Clinic!</b>

–ü—Ä–∏–≤–µ—Ç, {telegram_user.first_name}! üëã

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–ª–∏–Ω–∏–∫–µ. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:

üìÖ <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º</b> - –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –≤—Ä–µ–º—è
üìã <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏</b> - –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚ùì <b>–ü–æ–º–æ—â—å</b> - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        """
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", "callback_data": "book_menu"},
                    {"text": "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "callback_data": "my_appointments"}
                ],
                [
                    {"text": "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "profile"},
                    {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"}
                ],
                [
                    {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"},
                    {"text": "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "support"}
                ]
            ]
        }
        
        await self._send_message(chat_id, message, keyboard)
    
    async def _send_help_message(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        message = """
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/appointments - –ú–æ–∏ –∑–∞–ø–∏—Å–∏
/book - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∑–∞–ø–∏—Å—è—Ö, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support
        """
        
        await self._send_message(chat_id, message)
    
    async def _send_appointments_list(self, chat_id: int, telegram_user, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        try:
            if not telegram_user.patient_id:
                await self._send_message(chat_id, "‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            
            appointments = crud_appointment.get_patient_appointments(
                db, telegram_user.patient_id, upcoming_only=True
            )
            
            if not appointments:
                message = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º?"
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "book_menu"}]
                    ]
                }
                await self._send_message(chat_id, message, keyboard)
                return
            
            message = "üìÖ <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
            for i, appointment in enumerate(appointments, 1):
                message += f"{i}. <b>{appointment.doctor_name}</b>\n"
                message += f"   üìÖ {appointment.date} –≤ {appointment.time}\n"
                message += f"   üè• {appointment.specialty}\n\n"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "callback_data": "book_menu"}],
                    [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "my_appointments"}]
                ]
            }
            
            await self._send_message(chat_id, message, keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            await self._send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _send_booking_menu(self, chat_id: int, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
            doctors = crud_user.get_doctors(db, active_only=True)
            
            message = "üë®‚Äç‚öïÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:</b>\n\n"
            
            keyboard_buttons = []
            for doctor in doctors[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –≤—Ä–∞—á–µ–π
                button_text = f"üë®‚Äç‚öïÔ∏è {doctor.full_name} ({doctor.specialty})"
                callback_data = f"book_{doctor.id}"
                keyboard_buttons.append([{"text": button_text, "callback_data": callback_data}])
            
            keyboard = {"inline_keyboard": keyboard_buttons}
            
            await self._send_message(chat_id, message, keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π: {e}")
            await self._send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π.")
    
    async def _send_message(self, chat_id: int, text: str, reply_markup: Optional[Dict] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if not self.bot_token:
                logger.error("Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                return result.get("ok", False)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def _answer_callback_query(self, callback_query_id: str, text: str = ""):
        """–û—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å"""
        try:
            if not self.bot_token:
                return False
            
            url = f"https://api.telegram.org/bot{self.bot_token}/answerCallbackQuery"
            
            data = {
                "callback_query_id": callback_query_id,
                "text": text
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return False
    
    async def _answer_inline_query(self, query_id: str, results: List[Dict]):
        """–û—Ç–≤–µ—Ç –Ω–∞ inline –∑–∞–ø—Ä–æ—Å"""
        try:
            if not self.bot_token:
                return False
            
            url = f"https://api.telegram.org/bot{self.bot_token}/answerInlineQuery"
            
            data = {
                "inline_query_id": query_id,
                "results": json.dumps(results)
            }
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ inline –∑–∞–ø—Ä–æ—Å: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_bot_service = TelegramBotService()

async def get_telegram_bot_service() -> TelegramBotService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot —Å–µ—Ä–≤–∏—Å–∞"""
    return telegram_bot_service
