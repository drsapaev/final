"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Telegram, PWA deep links –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
"""
import logging
from datetime import datetime, date
from typing import Optional, Dict, Any, List
from sqlalchemy.orm import Session

from app.models.visit import Visit
from app.models.patient import Patient
from app.models.user import User
from app.services.telegram.bot import TelegramBotService
from app.core.config import settings

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–æ–≤"""
    
    def __init__(self, db: Session):
        self.db = db
        self.telegram_service = TelegramBotService()
    
    async def send_visit_confirmation_invitation(
        self, 
        visit: Visit, 
        channel: str = "auto"
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
        
        Args:
            visit: –û–±—ä–µ–∫—Ç –≤–∏–∑–∏—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            channel: –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (telegram, pwa, phone, auto)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient = self.db.query(Patient).filter(Patient.id == visit.patient_id).first()
            if not patient:
                return {"success": False, "error": "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if channel == "auto":
                channel = self._determine_best_channel(patient)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_data = self._prepare_notification_data(visit, patient)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
            if channel == "telegram":
                return await self._send_telegram_invitation(patient, notification_data)
            elif channel == "pwa":
                return await self._send_pwa_invitation(patient, notification_data)
            elif channel == "phone":
                return await self._send_phone_invitation(patient, notification_data)
            else:
                return {"success": False, "error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª: {channel}"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}")
            return {"success": False, "error": str(e)}
    
    def _determine_best_channel(self, patient: Patient) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Telegram > PWA > Phone
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Telegram ID
        if hasattr(patient, 'telegram_id') and patient.telegram_id:
            return "telegram"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è PWA
        if patient.phone and patient.phone.startswith('+998'):
            return "pwa"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–≤–æ–Ω–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
        return "phone"
    
    def _prepare_notification_data(self, visit: Visit, patient: Patient) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –≤–∏–∑–∏—Ç–∞
        from app.models.visit import VisitService
        visit_services = self.db.query(VisitService).filter(VisitService.visit_id == visit.id).all()
        
        services_text = []
        total_amount = 0
        for vs in visit_services:
            services_text.append(f"‚Ä¢ {vs.name} - {vs.price} —Å—É–º")
            total_amount += float(vs.price) if vs.price else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–∞
        doctor_name = "–ë–µ–∑ –≤—Ä–∞—á–∞"
        if visit.doctor_id:
            from app.models.clinic import Doctor
            doctor = self.db.query(Doctor).filter(Doctor.id == visit.doctor_id).first()
            if doctor and doctor.user:
                doctor_name = doctor.user.full_name or doctor.user.username
        
        return {
            "visit_id": visit.id,
            "patient_name": patient.short_name(),
            "doctor_name": doctor_name,
            "visit_date": visit.visit_date.strftime("%d.%m.%Y"),
            "visit_time": visit.visit_time or "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
            "services": services_text,
            "total_amount": total_amount,
            "confirmation_token": visit.confirmation_token,
            "expires_at": visit.confirmation_expires_at,
            "visit_type": self._get_visit_type_text(visit.discount_mode)
        }
    
    def _get_visit_type_text(self, discount_mode: Optional[str]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤–∏–∑–∏—Ç–∞"""
        if discount_mode == "repeat":
            return "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–∏–∑–∏—Ç"
        elif discount_mode == "benefit":
            return "–õ—å–≥–æ—Ç–Ω—ã–π –≤–∏–∑–∏—Ç"
        elif discount_mode == "all_free":
            return "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–∑–∏—Ç"
        else:
            return "–ü–ª–∞—Ç–Ω—ã–π –≤–∏–∑–∏—Ç"
    
    async def _send_telegram_invitation(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram"""
        try:
            if not hasattr(patient, 'telegram_id') or not patient.telegram_id:
                return {"success": False, "error": "–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç Telegram ID"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_telegram_message(data)
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._create_telegram_keyboard(data["confirmation_token"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram —Å–µ—Ä–≤–∏—Å
            result = await self.telegram_service.send_confirmation_invitation(
                chat_id=patient.telegram_id,
                message=message,
                keyboard=keyboard
            )
            
            if result.get("success"):
                logger.info(f"Telegram –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç—É {patient.id}")
                return {"success": True, "channel": "telegram", "message_id": result.get("message_id")}
            else:
                return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram")}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    def _format_telegram_message(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram"""
        services_list = "\n".join(data["services"])
        
        message = f"""
üè• **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –≤ –∫–ª–∏–Ω–∏–∫—É**

üë§ **–ü–∞—Ü–∏–µ–Ω—Ç:** {data["patient_name"]}
üë®‚Äç‚öïÔ∏è **–í—Ä–∞—á:** {data["doctor_name"]}
üìÖ **–î–∞—Ç–∞:** {data["visit_date"]}
üïê **–í—Ä–µ–º—è:** {data["visit_time"]}
üí∞ **–¢–∏–ø:** {data["visit_type"]}

üìã **–£—Å–ª—É–≥–∏:**
{services_list}

üíµ **–û–±—â–∞—è —Å—É–º–º–∞:** {data["total_amount"]} —Å—É–º

‚è∞ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∏–∑–∏—Ç –¥–æ:** {data["expires_at"].strftime("%d.%m.%Y %H:%M") if data["expires_at"] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
        """.strip()
        
        return message
    
    def _create_telegram_keyboard(self, confirmation_token: str) -> List[List[Dict[str, str]]]:
        """–°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è Telegram"""
        return [
            [
                {
                    "text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∏–∑–∏—Ç",
                    "callback_data": f"confirm_visit:{confirmation_token}"
                }
            ],
            [
                {
                    "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–∏–∑–∏—Ç", 
                    "callback_data": f"cancel_visit:{confirmation_token}"
                }
            ],
            [
                {
                    "text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–Ω–∏–∫–æ–π",
                    "url": f"tel:{settings.CLINIC_PHONE}"
                }
            ]
        ]
    
    async def _send_pwa_invitation(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PWA (SMS —Å deep link)"""
        try:
            if not patient.phone:
                return {"success": False, "error": "–£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º deep link –¥–ª—è PWA
            pwa_url = f"{settings.PWA_BASE_URL}/confirm-visit?token={data['confirmation_token']}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SMS —Å–æ–æ–±—â–µ–Ω–∏–µ
            sms_text = self._format_sms_message(data, pwa_url)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º)
            result = await self._send_sms(patient.phone, sms_text)
            
            if result.get("success"):
                logger.info(f"PWA –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç—É {patient.id}")
                return {"success": True, "channel": "pwa", "pwa_url": pwa_url}
            else:
                return {"success": False, "error": result.get("error", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS")}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PWA –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    def _format_sms_message(self, data: Dict[str, Any], pwa_url: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç SMS —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return f"""
–ö–ª–∏–Ω–∏–∫–∞: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∏–∑–∏—Ç –Ω–∞ {data["visit_date"]} –≤ {data["visit_time"]} –∫ –≤—Ä–∞—á—É {data["doctor_name"]}.
–°—É–º–º–∞: {data["total_amount"]} —Å—É–º.
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: {pwa_url}
        """.strip()
    
    async def _send_sms(self, phone: str, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º)"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (Eskiz, PlayMobile –∏ —Ç.–¥.)
        logger.info(f"SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone}: {text}")
        return {"success": True, "sms_id": f"mock_sms_{datetime.now().timestamp()}"}
    
    async def _send_phone_invitation(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã - –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
            notification = await self._create_registrar_notification(patient, data)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –æ –∑–≤–æ–Ω–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç—É {patient.id}")
            return {
                "success": True, 
                "channel": "phone", 
                "notification_id": notification.get("id"),
                "message": "–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã: {e}")
            return {"success": False, "error": str(e)}
    
    async def _create_registrar_notification(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏ —Ç.–¥.
        
        notification_data = {
            "id": f"phone_confirm_{data['visit_id']}_{datetime.now().timestamp()}",
            "type": "phone_confirmation_required",
            "patient_id": patient.id,
            "patient_name": data["patient_name"],
            "patient_phone": patient.phone,
            "visit_id": data["visit_id"],
            "visit_date": data["visit_date"],
            "visit_time": data["visit_time"],
            "doctor_name": data["doctor_name"],
            "confirmation_token": data["confirmation_token"],
            "created_at": datetime.now(),
            "status": "pending"
        }
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã: {notification_data}")
        return notification_data
    
    async def send_confirmation_reminder(
        self, 
        visit: Visit, 
        hours_before: int = 24
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            patient = self.db.query(Patient).filter(Patient.id == visit.patient_id).first()
            if not patient:
                return {"success": False, "error": "–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            channel = self._determine_best_channel(patient)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            notification_data = self._prepare_notification_data(visit, patient)
            notification_data["is_reminder"] = True
            notification_data["hours_before"] = hours_before
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if channel == "telegram":
                return await self._send_telegram_reminder(patient, notification_data)
            elif channel == "pwa":
                return await self._send_pwa_reminder(patient, notification_data)
            else:
                return await self._send_phone_reminder(patient, notification_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_telegram_reminder(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram"""
        message = f"""
üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞**

–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {data["patient_name"]}!

–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤–∏–∑–∏—Ç:
üìÖ **–î–∞—Ç–∞:** {data["visit_date"]}
üïê **–í—Ä–µ–º—è:** {data["visit_time"]}
üë®‚Äç‚öïÔ∏è **–í—Ä–∞—á:** {data["doctor_name"]}

‚ö†Ô∏è **–í–∏–∑–∏—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!**
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–∏–∑–∏—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.
        """.strip()
        
        keyboard = self._create_telegram_keyboard(data["confirmation_token"])
        
        result = await self.telegram_service.send_confirmation_invitation(
            chat_id=patient.telegram_id,
            message=message,
            keyboard=keyboard
        )
        
        return result
    
    async def _send_pwa_reminder(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ PWA"""
        pwa_url = f"{settings.PWA_BASE_URL}/confirm-visit?token={data['confirmation_token']}"
        
        sms_text = f"""
–ö–ª–∏–Ω–∏–∫–∞: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∏–∑–∏—Ç –Ω–∞ {data["visit_date"]} –≤ {data["visit_time"]}.
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: {pwa_url}
        """.strip()
        
        return await self._send_sms(patient.phone, sms_text)
    
    async def _send_phone_reminder(
        self, 
        patient: Patient, 
        data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã - –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É"""
        data["is_reminder"] = True
        return await self._create_registrar_notification(patient, data)
