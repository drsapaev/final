"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
import asyncio
import logging
from datetime import datetime, timedelta, date
from typing import List, Optional, Dict, Any
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func

from app.crud import user as crud_user
from app.crud import appointment as crud_appointment
from app.crud import patient as crud_patient
from app.crud import service as crud_service
from app.crud import clinic as crud_doctor
from app.services.sms_providers import get_sms_manager
from app.services.telegram_bot_enhanced import get_enhanced_telegram_bot
from app.services.fcm_service import get_fcm_service

logger = logging.getLogger(__name__)


class MobileServiceEnhanced:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.sms_manager = get_sms_manager()
        self.telegram_bot = get_enhanced_telegram_bot()
        self.fcm_service = get_fcm_service()
    
    async def send_appointment_reminder(
        self, 
        db: Session, 
        appointment_id: int, 
        reminder_type: str = "24h"
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        try:
            appointment = crud_appointment.get_appointment(db, appointment_id=appointment_id)
            if not appointment:
                return False
            
            patient = crud_patient.get_patient(db, patient_id=appointment.patient_id)
            if not patient:
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            appointment_time = appointment.appointment_date.strftime('%d.%m.%Y –≤ %H:%M')
            doctor_name = appointment.doctor.full_name if appointment.doctor else "–≤—Ä–∞—á"
            
            if reminder_type == "24h":
                message = f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ {doctor_name} –Ω–∞ {appointment_time}"
            elif reminder_type == "2h":
                message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ {doctor_name} –Ω–∞ {appointment_time}"
            elif reminder_type == "30min":
                message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ {doctor_name} –Ω–∞ {appointment_time}"
            else:
                message = f"üìã –£ –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ {doctor_name} –Ω–∞ {appointment_time}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            success_count = 0
            
            # SMS
            if patient.phone and patient.sms_notifications:
                sms_result = await self.sms_manager.send_sms(patient.phone, message)
                if sms_result.success:
                    success_count += 1
            
            # Telegram
            if patient.telegram_chat_id and patient.telegram_notifications:
                telegram_success = await self.telegram_bot._send_message(
                    patient.telegram_chat_id, 
                    message
                )
                if telegram_success:
                    success_count += 1
            
            # FCM Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å fcm_token)
            user = crud_user.get_user_by_patient_id(db, patient_id=patient.id)
            if user and user.fcm_token and user.push_notifications_enabled:
                fcm_result = await self.fcm_service.send_notification(
                    device_token=user.fcm_token,
                    title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏",
                    body=message,
                    data={"appointment_id": str(appointment_id), "type": "reminder"}
                )
                if fcm_result.success:
                    success_count += 1
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False
    
    async def send_lab_result_notification(
        self, 
        db: Session, 
        lab_result_id: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            # lab_result = crud_lab.get_lab_result(db, result_id=lab_result_id)
            
            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            message = f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≥–æ—Ç–æ–≤—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
            
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {e}")
            return False
    
    async def send_queue_notification(
        self, 
        db: Session, 
        patient_id: int, 
        queue_position: int,
        estimated_time: int
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            patient = crud_patient.get_patient(db, patient_id=patient_id)
            if not patient:
                return False
            
            if estimated_time <= 15:  # –û—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç –∏–ª–∏ –º–µ–Ω—å—à–µ
                message = f"üîî –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –ø–æ–¥—Ö–æ–¥–∏—Ç! –ù–æ–º–µ—Ä {queue_position}. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_time} –º–∏–Ω."
            elif estimated_time <= 30:  # –û—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç –∏–ª–∏ –º–µ–Ω—å—à–µ
                message = f"‚è∞ –î–æ –≤–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {estimated_time} –º–∏–Ω—É—Ç. –ù–æ–º–µ—Ä {queue_position}."
            else:
                return False  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–Ω–æ–≥–æ
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = False
            
            # Telegram (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ—á–µ—Ä–µ–¥–µ–π)
            if patient.telegram_chat_id:
                success = await self.telegram_bot._send_message(
                    patient.telegram_chat_id, 
                    message
                )
            
            # FCM Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            user = crud_user.get_user_by_patient_id(db, patient_id=patient_id)
            if user and user.fcm_token and user.push_notifications_enabled:
                fcm_result = await self.fcm_service.send_notification(
                    device_token=user.fcm_token,
                    title="–û—á–µ—Ä–µ–¥—å",
                    body=message,
                    data={"queue_position": str(queue_position), "type": "queue"}
                )
                success = success or fcm_result.success
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏: {e}")
            return False
    
    async def send_payment_notification(
        self, 
        db: Session, 
        payment_id: int, 
        status: str
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
            # payment = crud_payment.get_payment(db, payment_id=payment_id)
            
            status_messages = {
                "completed": "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω",
                "failed": "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                "pending": "‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
                "cancelled": "üö´ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω"
            }
            
            message = status_messages.get(status, f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
            
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
            return False
    
    async def send_promotional_notification(
        self, 
        db: Session, 
        user_ids: List[int], 
        title: str, 
        message: str,
        promo_data: Optional[Dict[str, Any]] = None
    ) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            success_count = 0
            
            for user_id in user_ids:
                user = crud_user.get_user(db, user_id=user_id)
                if not user or not user.promotions_notifications:
                    continue
                
                # FCM Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if user.fcm_token and user.push_notifications_enabled:
                    fcm_result = await self.fcm_service.send_notification(
                        device_token=user.fcm_token,
                        title=title,
                        body=message,
                        data={"type": "promotion", "promo_data": promo_data}
                    )
                    if fcm_result.success:
                        success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
            
            return success_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return 0
    
    async def send_fcm_notification_to_users(
        self,
        db: Session,
        user_ids: List[int],
        title: str,
        body: str,
        data: Optional[Dict[str, Any]] = None,
        image: Optional[str] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not self.fcm_service.active:
                return {
                    "success": False,
                    "error": "FCM service not configured",
                    "sent_count": 0,
                    "failed_count": len(user_ids)
                }
            
            # –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            device_tokens = []
            for user_id in user_ids:
                user = crud_user.get_user(db, user_id=user_id)
                if user and user.fcm_token and user.push_notifications_enabled:
                    device_tokens.append(user.fcm_token)
            
            if not device_tokens:
                return {
                    "success": False,
                    "error": "No active FCM tokens found",
                    "sent_count": 0,
                    "failed_count": len(user_ids)
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            result = await self.fcm_service.send_multicast(
                device_tokens=device_tokens,
                title=title,
                body=body,
                data=data,
                image=image
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return {
                "success": False,
                "error": str(e),
                "sent_count": 0,
                "failed_count": len(user_ids)
            }
    
    async def schedule_appointment_reminders(self, db: Session) -> int:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö"""
        try:
            now = datetime.now()
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞
            tomorrow = now + timedelta(hours=24)
            appointments_24h = crud_appointment.get_appointments_for_reminder(
                db, 
                start_time=tomorrow - timedelta(minutes=30),
                end_time=tomorrow + timedelta(minutes=30)
            )
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞
            in_2h = now + timedelta(hours=2)
            appointments_2h = crud_appointment.get_appointments_for_reminder(
                db,
                start_time=in_2h - timedelta(minutes=15),
                end_time=in_2h + timedelta(minutes=15)
            )
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç
            in_30m = now + timedelta(minutes=30)
            appointments_30m = crud_appointment.get_appointments_for_reminder(
                db,
                start_time=in_30m - timedelta(minutes=5),
                end_time=in_30m + timedelta(minutes=5)
            )
            
            sent_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for appointment in appointments_24h:
                success = await self.send_appointment_reminder(db, appointment.id, "24h")
                if success:
                    sent_count += 1
            
            for appointment in appointments_2h:
                success = await self.send_appointment_reminder(db, appointment.id, "2h")
                if success:
                    sent_count += 1
            
            for appointment in appointments_30m:
                success = await self.send_appointment_reminder(db, appointment.id, "30min")
                if success:
                    sent_count += 1
            
            return sent_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return 0
    
    async def get_mobile_analytics(self, db: Session, user_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            patient = crud_patient.get_patient_by_user_id(db, user_id=user_id)
            if not patient:
                return {}
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_appointments = crud_appointment.count_patient_appointments(db, patient_id=patient.id)
            completed_appointments = crud_appointment.count_completed_appointments(db, patient_id=patient.id)
            cancelled_appointments = crud_appointment.count_cancelled_appointments(db, patient_id=patient.id)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
            monthly_stats = []
            for i in range(12):
                month_start = datetime.now().replace(day=1) - timedelta(days=30 * i)
                month_end = month_start + timedelta(days=30)
                
                month_appointments = crud_appointment.count_appointments_in_period(
                    db, 
                    patient_id=patient.id,
                    start_date=month_start,
                    end_date=month_end
                )
                
                monthly_stats.append({
                    "month": month_start.strftime("%Y-%m"),
                    "appointments": month_appointments
                })
            
            # –õ—é–±–∏–º—ã–µ –≤—Ä–∞—á–∏
            favorite_doctors = crud_appointment.get_patient_favorite_doctors(db, patient_id=patient.id, limit=3)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
            service_stats = crud_appointment.get_patient_service_stats(db, patient_id=patient.id)
            
            return {
                "total_appointments": total_appointments,
                "completed_appointments": completed_appointments,
                "cancelled_appointments": cancelled_appointments,
                "success_rate": (completed_appointments / total_appointments * 100) if total_appointments > 0 else 0,
                "monthly_stats": monthly_stats,
                "favorite_doctors": [
                    {
                        "name": doctor.full_name,
                        "specialty": doctor.specialty,
                        "visits_count": doctor.visits_count
                    }
                    for doctor in favorite_doctors
                ],
                "service_stats": service_stats,
                "member_since": patient.created_at.strftime("%Y-%m-%d"),
                "last_visit": crud_appointment.get_last_visit_date(db, patient_id=patient.id)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
mobile_service_enhanced = MobileServiceEnhanced()


def get_mobile_service_enhanced() -> MobileServiceEnhanced:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    return mobile_service_enhanced
