"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
"""
import logging
from datetime import datetime, date, timedelta
from typing import Optional, Dict, Any, List, Union
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_

from app.models.user import User
from app.models.visit import Visit, VisitService
from app.models.patient import Patient
from app.models.clinic import Doctor
from app.models.service import Service
from app.models.appointment import Appointment
from app.models.online_queue import OnlineQueueEntry, DailyQueue
from app.models.doctor_price_override import DoctorPriceOverride
from app.services.telegram.bot import TelegramBotService
from app.services.notification_service import NotificationService
from app.services.email_sms_enhanced import EmailSMSEnhancedService
from app.services.doctor_info_service import get_doctor_info_service
from app.core.config import settings

logger = logging.getLogger(__name__)

class RegistrarNotificationService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"""
    
    def __init__(self, db: Session):
        self.db = db
        self.telegram_service = TelegramBotService()
        self.notification_service = NotificationService(db)
        self.email_sms_service = EmailSMSEnhancedService()
        self.doctor_info_service = get_doctor_info_service(db)
    
    # ===================== –ü–û–õ–£–ß–ï–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¢–û–†–û–í =====================
    
    def get_active_registrars(self) -> List[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        return self.db.query(User).filter(
            and_(
                User.role == "Registrar",
                User.is_active == True
            )
        ).all()
    
    def get_registrars_by_department(self, department: str = None) -> List[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—é"""
        query = self.db.query(User).filter(
            and_(
                User.role == "Registrar",
                User.is_active == True
            )
        )
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if department:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è–º
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            pass
        
        return query.all()
    
    # ===================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ó–ê–ü–ò–°–Ø–• =====================
    
    async def notify_new_appointment(
        self, 
        appointment: Union[Appointment, Visit], 
        patient: Patient,
        services: List[Service] = None,
        priority: str = "normal"
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            registrars = self.get_active_registrars()
            if not registrars:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
            appointment_type = "–í–∏–∑–∏—Ç" if isinstance(appointment, Visit) else "–ó–∞–ø–∏—Å—å"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
            doctor_info = None
            doctor_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            department_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            if hasattr(appointment, 'doctor_id') and appointment.doctor_id:
                doctor_info = self.doctor_info_service.get_doctor_full_info(appointment.doctor_id)
                doctor_name = self.doctor_info_service.format_doctor_info_for_notification(doctor_info)
                department_name = doctor_info.get("department", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏
            services_text = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            total_amount = 0
            if services:
                services_list = []
                for service in services:
                    services_list.append(f"‚Ä¢ {service.name} ({service.code})")
                    total_amount += float(service.price) if service.price else 0
                services_text = "\n".join(services_list)
            elif isinstance(appointment, Visit):
                visit_services = self.db.query(VisitService).filter(VisitService.visit_id == appointment.id).all()
                if visit_services:
                    services_list = []
                    for vs in visit_services:
                        services_list.append(f"‚Ä¢ {vs.name}")
                        total_amount += float(vs.price) if vs.price else 0
                    services_text = "\n".join(services_list)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            priority_emoji = "üî¥" if priority == "urgent" else "üü°" if priority == "high" else "üü¢"
            
            message = f"""
{priority_emoji} –ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –í –ö–õ–ò–ù–ò–ö–ï

üìã –¢–∏–ø: {appointment_type}
üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {patient.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department_name}
üìÖ –î–∞—Ç–∞: {appointment.appointment_date.strftime('%d.%m.%Y') if hasattr(appointment, 'appointment_date') else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚è∞ –í—Ä–µ–º—è: {appointment.appointment_time.strftime('%H:%M') if hasattr(appointment, 'appointment_time') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîß –£—Å–ª—É–≥–∏:
{services_text}

üí∞ –°—É–º–º–∞: {total_amount} —Å—É–º
üîÑ –°—Ç–∞—Ç—É—Å: {appointment.status if hasattr(appointment, 'status') else '–ù–æ–≤–∞—è'}

‚è∞ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            results = []
            for registrar in registrars:
                result = await self._send_notification_to_registrar(
                    registrar, message, "new_appointment"
                )
                results.append(result)
            
            return {
                "success": True,
                "message": f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(registrars)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                "results": results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {e}")
            return {"success": False, "error": str(e)}
    
    # ===================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –¶–ï–ù–ê–• =====================
    
    async def notify_price_change(
        self,
        price_override: DoctorPriceOverride,
        doctor: Doctor,
        service: Service,
        visit: Visit = None,
        patient: Patient = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        try:
            registrars = self.get_active_registrars()
            if not registrars:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
            doctor_info = self.doctor_info_service.get_doctor_full_info(doctor.id)
            doctor_name = self.doctor_info_service.format_doctor_info_for_notification(doctor_info)
            department_name = doctor_info.get("department", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            patient_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç"
            if patient:
                patient_info = f"{patient.full_name} ({patient.phone or '–±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'})"
            elif visit:
                patient = self.db.query(Patient).filter(Patient.id == visit.patient_id).first()
                if patient:
                    patient_info = f"{patient.full_name} ({patient.phone or '–±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'})"
            
            message = f"""
ü¶∑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´ –í–†–ê–ß–û–ú

üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor_name}
üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department_name}
üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient_info}
üîß –£—Å–ª—É–≥–∞: {service.name} ({service.code})
üí∞ –¶–µ–Ω–∞: {price_override.original_price} ‚Üí {price_override.new_price} —Å—É–º
üìù –ü—Ä–∏—á–∏–Ω–∞: {price_override.reason}
{f"üìã –î–µ—Ç–∞–ª–∏: {price_override.details}" if price_override.details else ""}

‚è∞ –í—Ä–µ–º—è: {price_override.created_at.strftime('%d.%m.%Y %H:%M')}
üîÑ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è

–î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            results = []
            for registrar in registrars:
                result = await self._send_notification_to_registrar(
                    registrar, message, "price_change"
                )
                results.append(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            price_override.notification_sent = True
            price_override.notification_sent_at = datetime.utcnow()
            self.db.commit()
            
            return {
                "success": True,
                "message": f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(registrars)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                "results": results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return {"success": False, "error": str(e)}
    
    # ===================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–ë –û–ß–ï–†–ï–î–ò =====================
    
    async def notify_queue_status(
        self,
        queue_entry: OnlineQueueEntry,
        status_change: str,
        additional_info: str = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            registrars = self.get_active_registrars()
            if not registrars:
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
            patient_info = f"–ü–∞—Ü–∏–µ–Ω—Ç #{queue_entry.patient_id}"
            if queue_entry.patient_name:
                patient_info = queue_entry.patient_name
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏
            daily_queue = self.db.query(DailyQueue).filter(DailyQueue.id == queue_entry.queue_id).first()
            queue_info = f"–û—á–µ—Ä–µ–¥—å #{queue_entry.queue_id}"
            department_name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            doctor_name = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            
            if daily_queue:
                department_name = daily_queue.department or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
                if daily_queue.doctor_id:
                    doctor_info = self.doctor_info_service.get_doctor_full_info(daily_queue.doctor_id)
                    doctor_name = self.doctor_info_service.format_doctor_info_for_notification(doctor_info)
                    department_name = doctor_info.get("department", department_name)
                else:
                    doctor_name = daily_queue.doctor_name or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                
                queue_info = f"{department_name} - {doctor_name}"
            
            status_messages = {
                "joined": "üü¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏",
                "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∏–∑–∏—Ç",
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–∏–ª –≤–∏–∑–∏—Ç",
                "no_show": "‚ö†Ô∏è –ù–µ —è–≤–∏–ª—Å—è",
                "completed": "‚úÖ –í–∏–∑–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
            }
            
            status_text = status_messages.get(status_change, f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {status_change}")
            
            message = f"""
üìã –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –û–ß–ï–†–ï–î–ò

{status_text}

üë§ {patient_info}
üè• {queue_info}
üé´ –ù–æ–º–µ—Ä: {queue_entry.queue_number or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
üìÖ –î–∞—Ç–∞: {queue_entry.visit_date.strftime('%d.%m.%Y') if queue_entry.visit_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}

{f"‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {additional_info}" if additional_info else ""}
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            results = []
            for registrar in registrars:
                result = await self._send_notification_to_registrar(
                    registrar, message, "queue_status"
                )
                results.append(result)
            
            return {
                "success": True,
                "message": f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(registrars)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                "results": results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            return {"success": False, "error": str(e)}
    
    # ===================== –°–ò–°–¢–ï–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====================
    
    async def notify_system_alert(
        self,
        alert_type: str,
        message: str,
        priority: str = "normal",
        department: str = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            registrars = self.get_registrars_by_department(department)
            if not registrars:
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"}
            
            priority_emoji = "üî¥" if priority == "critical" else "üü°" if priority == "warning" else "‚ÑπÔ∏è"
            alert_emojis = {
                "system_error": "‚ö†Ô∏è",
                "payment_issue": "üí≥",
                "queue_overflow": "üìä",
                "equipment_failure": "üîß",
                "security_alert": "üîí",
                "maintenance": "üõ†Ô∏è"
            }
            
            alert_emoji = alert_emojis.get(alert_type, "üì¢")
            
            formatted_message = f"""
{priority_emoji} –°–ò–°–¢–ï–ú–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï

{alert_emoji} –¢–∏–ø: {alert_type.replace('_', ' ').title()}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
{f"üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {department}" if department else ""}

–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã.
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            results = []
            for registrar in registrars:
                result = await self._send_notification_to_registrar(
                    registrar, formatted_message, "system_alert"
                )
                results.append(result)
            
            return {
                "success": True,
                "message": f"–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(registrars)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                "results": results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    # ===================== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –û–¢–ß–ï–¢–´ =====================
    
    async def send_daily_summary(self, target_date: date = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            if not target_date:
                target_date = date.today()
            
            registrars = self.get_active_registrars()
            if not registrars:
                return {"success": False, "error": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"}
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            stats = await self._collect_daily_stats(target_date)
            
            message = f"""
üìä –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê - {target_date.strftime('%d.%m.%Y')}

üë• –ü–∞—Ü–∏–µ–Ω—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_appointments']}
‚Ä¢ –ù–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã: {stats['new_patients']}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {stats['confirmed_visits']}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {stats['cancelled_appointments']}

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_revenue']} —Å—É–º
‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ: {stats['paid_amount']} —Å—É–º
‚Ä¢ –ö –¥–æ–ø–ª–∞—Ç–µ: {stats['pending_amount']} —Å—É–º

üè• –û—á–µ—Ä–µ–¥–∏:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏: {stats['active_queues']}
‚Ä¢ –û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏: {stats['online_entries']}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: {stats['average_load']}%

‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:
‚Ä¢ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã: {stats['unconfirmed_visits']}
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω: {stats['pending_price_changes']}
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: {stats['system_errors']}

üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –≤—á–µ—Ä–∞: {stats['comparison_text']}

–•–æ—Ä–æ—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! üåü
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            results = []
            for registrar in registrars:
                result = await self._send_notification_to_registrar(
                    registrar, message, "daily_summary"
                )
                results.append(result)
            
            return {
                "success": True,
                "message": f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(registrars)} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º",
                "results": results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return {"success": False, "error": str(e)}
    
    # ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====================
    
    async def _send_notification_to_registrar(
        self, 
        registrar: User, 
        message: str, 
        notification_type: str
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            results = {"telegram": False, "email": False, "sms": False}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_settings = getattr(registrar, 'notification_settings', None)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
            if hasattr(registrar, 'telegram_id') and registrar.telegram_id:
                try:
                    await self.telegram_service.send_message(
                        user_id=registrar.telegram_id,
                        text=message
                    )
                    results["telegram"] = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {registrar.id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
            if (registrar.email and 
                notification_settings and 
                getattr(notification_settings, 'email_system_updates', True)):
                try:
                    await self.email_sms_service.send_email(
                        to_email=registrar.email,
                        subject=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã - {notification_type}",
                        body=message,
                        is_html=False
                    )
                    results["email"] = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {registrar.id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (notification_type in ["system_alert", "price_change"] and 
                hasattr(registrar, 'phone') and registrar.phone and
                notification_settings and 
                getattr(notification_settings, 'sms_emergency', True)):
                try:
                    # –°–æ–∫—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è SMS
                    sms_message = message[:160] + "..." if len(message) > 160 else message
                    await self.email_sms_service.send_sms(
                        phone_number=registrar.phone,
                        message=sms_message
                    )
                    results["sms"] = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {registrar.id}: {e}")
            
            return {
                "success": any(results.values()),
                "registrar_id": registrar.id,
                "channels": results
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {registrar.id}: {e}")
            return {
                "success": False,
                "registrar_id": registrar.id,
                "error": str(e)
            }
    
    async def _collect_daily_stats(self, target_date: date) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∏, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
            stats = {
                "total_appointments": 0,
                "new_patients": 0,
                "confirmed_visits": 0,
                "cancelled_appointments": 0,
                "total_revenue": 0,
                "paid_amount": 0,
                "pending_amount": 0,
                "active_queues": 0,
                "online_entries": 0,
                "average_load": 0,
                "unconfirmed_visits": 0,
                "pending_price_changes": 0,
                "system_errors": 0,
                "comparison_text": "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è"
            }
            
            # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –¥–µ–Ω—å
            from app.models.appointment import Appointment
            appointments_count = self.db.query(Appointment).filter(
                Appointment.appointment_date == target_date
            ).count()
            stats["total_appointments"] = appointments_count
            
            # –ü–æ–¥—Å—á–µ—Ç –≤–∏–∑–∏—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
            visits_count = self.db.query(Visit).filter(
                Visit.visit_date == target_date
            ).count()
            stats["total_appointments"] += visits_count
            
            # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
            active_queues_count = self.db.query(DailyQueue).filter(
                DailyQueue.queue_date == target_date
            ).count()
            stats["active_queues"] = active_queues_count
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–µ–π
            online_entries_count = self.db.query(OnlineQueueEntry).filter(
                OnlineQueueEntry.visit_date == target_date
            ).count()
            stats["online_entries"] = online_entries_count
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
            pending_price_changes = self.db.query(DoctorPriceOverride).filter(
                DoctorPriceOverride.status == "pending"
            ).count()
            stats["pending_price_changes"] = pending_price_changes
            
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "total_appointments": 0,
                "new_patients": 0,
                "confirmed_visits": 0,
                "cancelled_appointments": 0,
                "total_revenue": 0,
                "paid_amount": 0,
                "pending_amount": 0,
                "active_queues": 0,
                "online_entries": 0,
                "average_load": 0,
                "unconfirmed_visits": 0,
                "pending_price_changes": 0,
                "system_errors": 0,
                "comparison_text": "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
def get_registrar_notification_service(db: Session) -> RegistrarNotificationService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã"""
    return RegistrarNotificationService(db)
