"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram Bot —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
"""
import asyncio
import logging
from datetime import datetime, timedelta, date
from typing import Dict, Any, Optional, List
import json
import requests
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func

from app.db.session import get_db
from app.crud import user as crud_user
from app.crud import appointment as crud_appointment
from app.crud import patient as crud_patient
from app.crud import service as crud_service
from app.crud import clinic as crud_doctor
from app.crud import queue as crud_queue
from app.services.telegram_bot import TelegramBotService
from app.services.sms_providers import get_sms_manager
from app.models.user import User
from app.models.patient import Patient
from app.models.appointment import Appointment
from app.models.service import Service
from app.models.clinic import Doctor
from app.models.online_queue import DailyQueue

logger = logging.getLogger(__name__)


class EnhancedTelegramBotService(TelegramBotService):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.admin_commands = {
            "/admin_stats": self._handle_admin_stats,
            "/admin_queues": self._handle_admin_queues,
            "/admin_patients": self._handle_admin_patients,
            "/admin_appointments": self._handle_admin_appointments,
            "/admin_doctors": self._handle_admin_doctors,
            "/admin_services": self._handle_admin_services,
            "/admin_notifications": self._handle_admin_notifications,
            "/admin_reports": self._handle_admin_reports,
            "/admin_backup": self._handle_admin_backup,
            "/admin_settings": self._handle_admin_settings
        }
        
        self.user_commands = {
            "/start": self._handle_start,
            "/help": self._handle_help,
            "/menu": self._handle_menu,
            "/appointments": self._handle_appointments,
            "/book": self._handle_book,
            "/cancel": self._handle_cancel,
            "/reschedule": self._handle_reschedule,
            "/profile": self._handle_profile,
            "/doctors": self._handle_doctors,
            "/services": self._handle_services,
            "/queue": self._handle_queue,
            "/status": self._handle_status,
            "/feedback": self._handle_feedback,
            "/emergency": self._handle_emergency,
            "/language": self._handle_language,
            "/notifications": self._handle_notifications_settings
        }
    
    async def _handle_command(self, command: str, chat_id: int, telegram_user, db: Session):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            is_admin = await self._check_admin_rights(telegram_user, db)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            if command in self.admin_commands and is_admin:
                await self.admin_commands[command](chat_id, telegram_user, db)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            elif command in self.user_commands:
                await self.user_commands[command](chat_id, telegram_user, db)
            else:
                await self._send_unknown_command_message(chat_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await self._send_error_message(chat_id)
    
    async def _check_admin_rights(self, telegram_user, db: Session) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            if not telegram_user or not telegram_user.linked_user_id:
                return False
            
            user = crud_user.get(db, id=telegram_user.linked_user_id)
            return user and user.role in ["Admin", "SuperAdmin"]
        except Exception:
            return False
    
    # ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================
    
    async def _handle_admin_stats(self, chat_id: int, telegram_user, db: Session):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–Ω–∏–∫–∏"""
        try:
            today = date.today()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            appointments_today = db.query(Appointment).filter(
                func.date(Appointment.appointment_date) == today
            ).count()
            
            patients_today = db.query(Patient).filter(
                func.date(Patient.created_at) == today
            ).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
            active_queues = db.query(DailyQueue).filter(
                and_(
                    DailyQueue.day == today,
                    DailyQueue.active == True
                )
            ).count()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_patients = db.query(Patient).count()
            total_appointments = db.query(Appointment).count()
            total_doctors = db.query(Doctor).count()
            total_services = db.query(Service).count()
            
            message = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–Ω–∏–∫–∏**
            
üóì **–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):**
‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {appointments_today}
‚Ä¢ –ù–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {patients_today}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π: {active_queues}

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {total_patients}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_appointments}
‚Ä¢ –í—Ä–∞—á–µ–π: {total_doctors}
‚Ä¢ –£—Å–ª—É–≥: {total_services}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"""
            
            await self._send_message(chat_id, message, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_queues(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏"""
        try:
            today = date.today()
            
            queues = db.query(DailyQueue).filter(DailyQueue.day == today).all()
            
            if not queues:
                await self._send_message(chat_id, "üìã –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π")
                return
            
            message = "üìã **–û—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\\n\\n"
            
            for queue in queues:
                doctor_name = queue.doctor.full_name if queue.doctor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if queue.active else "üî¥ –ó–∞–∫—Ä—ã—Ç–∞"
                
                message += f"üë®‚Äç‚öïÔ∏è **{doctor_name}**\\n"
                message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {queue.total_numbers}\\n"
                message += f"‚Ä¢ –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {queue.current_number}\\n"
                message += f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {queue.total_numbers - queue.current_number}\\n\\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "admin_queues_refresh"}],
                    [{"text": "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", "callback_data": "admin_queues_pause"}],
                    [{"text": "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", "callback_data": "admin_queues_resume"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_patients(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏"""
        try:
            today = date.today()
            
            # –ù–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            new_patients = db.query(Patient).filter(
                func.date(Patient.created_at) == today
            ).limit(10).all()
            
            message = f"üë• **–ù–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({len(new_patients)}):**\\n\\n"
            
            if new_patients:
                for patient in new_patients:
                    created_time = patient.created_at.strftime('%H:%M')
                    message += f"‚Ä¢ {patient.full_name} ({created_time})\\n"
                    if patient.phone:
                        message += f"  üìû {patient.phone}\\n"
                    message += "\\n"
            else:
                message += "–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç"
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîç –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞", "callback_data": "admin_patient_search"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "callback_data": "admin_patient_stats"}],
                    [{"text": "üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "callback_data": "admin_patient_export"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_appointments(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏"""
        try:
            today = date.today()
            
            # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            appointments_today = db.query(Appointment).filter(
                func.date(Appointment.appointment_date) == today
            ).all()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for appointment in appointments_today:
                status = appointment.status or "pending"
                status_counts[status] = status_counts.get(status, 0) + 1
            
            message = f"üìÖ **–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({len(appointments_today)}):**\\n\\n"
            
            status_icons = {
                "pending": "‚è≥",
                "confirmed": "‚úÖ", 
                "completed": "‚úÖ",
                "cancelled": "‚ùå",
                "no_show": "üëª"
            }
            
            status_names = {
                "pending": "–û–∂–∏–¥–∞—é—Ç",
                "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã",
                "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω—ã", 
                "cancelled": "–û—Ç–º–µ–Ω–µ–Ω—ã",
                "no_show": "–ù–µ —è–≤–∏–ª–∏—Å—å"
            }
            
            for status, count in status_counts.items():
                icon = status_icons.get(status, "üìã")
                name = status_names.get(status, status)
                message += f"{icon} {name}: {count}\\n"
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π", "callback_data": "admin_appointments_list"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_appointments_stats"}],
                    [{"text": "üìû –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º", "callback_data": "admin_appointments_remind"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_notifications(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        try:
            message = """üì¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏**
            
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üì± SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "admin_notify_sms"}],
                    [{"text": "üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "admin_notify_email"}],
                    [{"text": "ü§ñ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "admin_notify_telegram"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫", "callback_data": "admin_notify_stats"}],
                    [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "admin_notify_settings"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_doctors(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
            doctors = crud_doctor.get_doctors(db, active_only=True)
            
            message = f"üë®‚Äç‚öïÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏ ({len(doctors)}):**\\n\\n"
            
            if doctors:
                for doctor in doctors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if doctor.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    message += f"‚Ä¢ **{doctor.full_name}**\\n"
                    message += f"  {status} | {doctor.specialty or '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\\n"
                    if doctor.phone:
                        message += f"  üìû {doctor.phone}\\n"
                    message += "\\n"
                
                if len(doctors) > 10:
                    message += f"... –∏ –µ—â–µ {len(doctors) - 10} –≤—Ä–∞—á–µ–π\\n"
            else:
                message += "–í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üë®‚Äç‚öïÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞", "callback_data": "admin_doctor_add"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–∞—á–µ–π", "callback_data": "admin_doctor_stats"}],
                    [{"text": "üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "admin_doctor_schedule"}],
                    [{"text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤—Ä–∞—á–∞–º–∏", "callback_data": "admin_doctor_contact"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_services(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
            services = crud_service.get_services(db, active_only=True)
            
            message = f"üíä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ ({len(services)}):**\\n\\n"
            
            if services:
                for service in services[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if service.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                    message += f"‚Ä¢ **{service.name}**\\n"
                    message += f"  {status} | {service.price:,} —Å—É–º\\n"
                    if service.description:
                        message += f"  üìù {service.description[:50]}...\\n"
                    message += "\\n"
                
                if len(services) > 10:
                    message += f"... –∏ –µ—â–µ {len(services) - 10} —É—Å–ª—É–≥\\n"
            else:
                message += "–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üíä –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "callback_data": "admin_service_add"}],
                    [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ª—É–≥", "callback_data": "admin_service_stats"}],
                    [{"text": "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏", "callback_data": "admin_service_prices"}],
                    [{"text": "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "callback_data": "admin_service_categories"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_reports(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏"""
        try:
            message = """üìä **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", "callback_data": "admin_report_daily"}],
                    [{"text": "üìÜ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", "callback_data": "admin_report_weekly"}],
                    [{"text": "üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", "callback_data": "admin_report_monthly"}],
                    [{"text": "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", "callback_data": "admin_report_financial"}],
                    [{"text": "üë• –û—Ç—á–µ—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º", "callback_data": "admin_report_patients"}],
                    [{"text": "üë®‚Äç‚öïÔ∏è –û—Ç—á–µ—Ç –ø–æ –≤—Ä–∞—á–∞–º", "callback_data": "admin_report_doctors"}],
                    [{"text": "üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "callback_data": "admin_report_export"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_backup(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
        try:
            message = """üíæ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", "callback_data": "admin_backup_create"}],
                    [{"text": "üìã –°–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π", "callback_data": "admin_backup_list"}],
                    [{"text": "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", "callback_data": "admin_backup_restore"}],
                    [{"text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏", "callback_data": "admin_backup_cleanup"}],
                    [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è", "callback_data": "admin_backup_settings"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_admin_settings(self, chat_id: int, telegram_user, db: Session):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            message = """‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üè• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–Ω–∏–∫–∏", "callback_data": "admin_settings_clinic"}],
                    [{"text": "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "callback_data": "admin_settings_notifications"}],
                    [{"text": "üí∞ –ü–ª–∞—Ç–µ–∂–∏", "callback_data": "admin_settings_payments"}],
                    [{"text": "üìã –û—á–µ—Ä–µ–¥–∏", "callback_data": "admin_settings_queues"}],
                    [{"text": "ü§ñ Telegram –±–æ—Ç", "callback_data": "admin_settings_telegram"}],
                    [{"text": "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "callback_data": "admin_settings_security"}],
                    [{"text": "üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "callback_data": "admin_settings_integrations"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {e}")
            await self._send_error_message(chat_id)
    
    # ==================== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================
    
    async def _handle_start(self, chat_id: int, telegram_user, db: Session):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        try:
            user_name = telegram_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            message = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!

üè• –Ø –±–æ—Ç –∫–ª–∏–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
‚Ä¢ üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
‚Ä¢ üìã –£–∑–Ω–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫ –≤—Ä–∞—á—É
‚Ä¢ üë®‚Äç‚öïÔ∏è –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–∞—Ö
‚Ä¢ üíä –£–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "callback_data": "my_appointments"}],
                    [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "book_appointment"}],
                    [{"text": "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏", "callback_data": "doctors_list"}],
                    [{"text": "üìã –û—á–µ—Ä–µ–¥—å", "callback_data": "queue_status"}],
                    [{"text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "callback_data": "help_menu"}]
                ]
            }
            
            await self._send_message(chat_id, message, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã start: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_menu(self, chat_id: int, telegram_user, db: Session):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            is_admin = await self._check_admin_rights(telegram_user, db)
            
            message = "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            user_buttons = [
                [{"text": "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "callback_data": "my_appointments"}],
                [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", "callback_data": "book_appointment"}],
                [{"text": "üë®‚Äç‚öïÔ∏è –ù–∞—à–∏ –≤—Ä–∞—á–∏", "callback_data": "doctors_list"}],
                [{"text": "üíä –ù–∞—à–∏ —É—Å–ª—É–≥–∏", "callback_data": "services_list"}],
                [{"text": "üìã –û—á–µ—Ä–µ–¥—å", "callback_data": "queue_status"}],
                [{"text": "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "my_profile"}],
                [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "user_settings"}],
                [{"text": "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "callback_data": "emergency_help"}]
            ]
            
            if is_admin:
                user_buttons.extend([
                    [{"text": "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "callback_data": "admin_panel"}]
                ])
            
            keyboard = {"inline_keyboard": user_buttons}
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã menu: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_queue(self, chat_id: int, telegram_user, db: Session):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥—è—Ö"""
        try:
            today = date.today()
            
            active_queues = db.query(DailyQueue).filter(
                and_(
                    DailyQueue.day == today,
                    DailyQueue.active == True
                )
            ).all()
            
            if not active_queues:
                message = "üìã –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π"
            else:
                message = "üìã **–¢–µ–∫—É—â–∏–µ –æ—á–µ—Ä–µ–¥–∏:**\\n\\n"
                
                for queue in active_queues:
                    doctor_name = queue.doctor.full_name if queue.doctor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    waiting = queue.total_numbers - queue.current_number
                    
                    message += f"üë®‚Äç‚öïÔ∏è **{doctor_name}**\\n"
                    message += f"‚Ä¢ –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {queue.current_number}\\n"
                    message += f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {waiting}\\n"
                    
                    if waiting > 0:
                        estimated_time = waiting * 15  # –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                        message += f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_time} –º–∏–Ω\\n"
                    
                    message += "\\n"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "queue_refresh"}],
                    [{"text": "üì± –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–¥—Ö–æ–¥–µ", "callback_data": "queue_notify"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã queue: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_emergency(self, chat_id: int, telegram_user, db: Session):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å"""
        try:
            message = """üÜò **–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨**

‚ö†Ô∏è **–ü—Ä–∏ —É–≥—Ä–æ–∑–µ –∂–∏–∑–Ω–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–π—Ç–µ:**
‚Ä¢ üöë –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103
‚Ä¢ üöí –ü–æ–∂–∞—Ä–Ω–∞—è —Å–ª—É–∂–±–∞: 101  
‚Ä¢ üöî –ü–æ–ª–∏—Ü–∏—è: 102
‚Ä¢ üìû –ï–¥–∏–Ω–∞—è —Å–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤: 112

üè• **–ù–∞—à–∞ –∫–ª–∏–Ω–∏–∫–∞:**
‚Ä¢ üìû –†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞: +998 XX XXX-XX-XX
‚Ä¢ üïê –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ª–∏–Ω–∏—è: +998 XX XXX-XX-XX
‚Ä¢ üìç –ê–¥—Ä–µ—Å: [–ê–¥—Ä–µ—Å –∫–ª–∏–Ω–∏–∫–∏]

üíä **–î–µ–∂—É—Ä–Ω—ã–π –≤—Ä–∞—á:**
‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω 24/7 –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏"""

            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –¥–µ–∂—É—Ä–Ω—ã–º –≤—Ä–∞—á–æ–º", "callback_data": "emergency_doctor"}],
                    [{"text": "üöë –í—ã–∑–≤–∞—Ç—å —Å–∫–æ—Ä—É—é", "url": "tel:103"}],
                    [{"text": "üìç –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", "callback_data": "clinic_location"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã emergency: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_feedback(self, chat_id: int, telegram_user, db: Session):
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"""
        try:
            message = """üí¨ **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "callback_data": "feedback_review"}],
                    [{"text": "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "callback_data": "feedback_suggestion"}],
                    [{"text": "‚ùó –ñ–∞–ª–æ–±–∞", "callback_data": "feedback_complaint"}],
                    [{"text": "‚ùì –í–æ–ø—Ä–æ—Å", "callback_data": "feedback_question"}],
                    [{"text": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", "callback_data": "feedback_admin"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã feedback: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_help(self, chat_id: int, telegram_user, db: Session):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        try:
            message = """‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ó–∞–ø–∏—Å–∏:**
‚Ä¢ /appointments - –ú–æ–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ /book - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
‚Ä¢ /reschedule - –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å

**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ /doctors - –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
‚Ä¢ /services - –ù–∞—à–∏ —É—Å–ª—É–≥–∏
‚Ä¢ /queue - –¢–µ–∫—É—â–∏–µ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏

**–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ /notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ /language - –°–º–µ–Ω–∞ —è–∑—ã–∫–∞

**–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:**
‚Ä¢ /emergency - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
‚Ä¢ /feedback - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}],
                    [{"text": "üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "support"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã help: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_appointments(self, chat_id: int, telegram_user, db: Session):
        """–ú–æ–∏ –∑–∞–ø–∏—Å–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = db.query(User).filter(User.telegram_chat_id == str(chat_id)).first()
            
            if not user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                appointments = db.query(Appointment).filter(
                    Appointment.patient_id == user.id
                ).order_by(Appointment.appointment_date.desc()).limit(10).all()
                
                if appointments:
                    message = f"üìÖ **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ ({len(appointments)}):**\\n\\n"
                    
                    for appointment in appointments:
                        date_str = appointment.appointment_date.strftime('%d.%m.%Y')
                        time_str = appointment.appointment_time.strftime('%H:%M') if appointment.appointment_time else '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                        
                        status_icons = {
                            "pending": "‚è≥",
                            "confirmed": "‚úÖ", 
                            "completed": "‚úÖ",
                            "cancelled": "‚ùå",
                            "no_show": "üëª"
                        }
                        
                        status = appointment.status or "pending"
                        icon = status_icons.get(status, "üìã")
                        
                        message += f"{icon} **{date_str} –≤ {time_str}**\\n"
                        message += f"üë®‚Äç‚öïÔ∏è {appointment.doctor_name or '–í—Ä–∞—á –Ω–µ —É–∫–∞–∑–∞–Ω'}\\n"
                        message += f"üìã –°—Ç–∞—Ç—É—Å: {status}\\n\\n"
                else:
                    message = "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "book_appointment"}],
                        [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh_appointments"}]
                    ]
                }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã appointments: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_book(self, chat_id: int, telegram_user, db: Session):
        """–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º"""
        try:
            message = """üìù **–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üë®‚Äç‚öïÔ∏è –ö –≤—Ä–∞—á—É", "callback_data": "book_doctor"}],
                    [{"text": "üíä –ù–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É", "callback_data": "book_procedure"}],
                    [{"text": "üî¨ –í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é", "callback_data": "book_lab"}],
                    [{"text": "üìã –í –æ—á–µ—Ä–µ–¥—å", "callback_data": "book_queue"}],
                    [{"text": "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É", "callback_data": "call_registry"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã book: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_cancel(self, chat_id: int, telegram_user, db: Session):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = db.query(User).filter(User.telegram_chat_id == str(chat_id)).first()
            
            if not user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                appointments = db.query(Appointment).filter(
                    and_(
                        Appointment.patient_id == user.id,
                        Appointment.status.in_(["pending", "confirmed"])
                    )
                ).order_by(Appointment.appointment_date.asc()).limit(5).all()
                
                if appointments:
                    message = "‚ùå **–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
                    
                    keyboard_buttons = []
                    for appointment in appointments:
                        date_str = appointment.appointment_date.strftime('%d.%m.%Y')
                        time_str = appointment.appointment_time.strftime('%H:%M') if appointment.appointment_time else '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                        
                        button_text = f"üìÖ {date_str} {time_str}"
                        callback_data = f"cancel_appointment_{appointment.id}"
                        keyboard_buttons.append([{"text": button_text, "callback_data": callback_data}])
                    
                    keyboard = {"inline_keyboard": keyboard_buttons}
                else:
                    message = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã"
                    keyboard = {
                        "inline_keyboard": [
                            [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "book_appointment"}]
                        ]
                    }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã cancel: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_reschedule(self, chat_id: int, telegram_user, db: Session):
        """–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = db.query(User).filter(User.telegram_chat_id == str(chat_id)).first()
            
            if not user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                appointments = db.query(Appointment).filter(
                    and_(
                        Appointment.patient_id == user.id,
                        Appointment.status.in_(["pending", "confirmed"])
                    )
                ).order_by(Appointment.appointment_date.asc()).limit(5).all()
                
                if appointments:
                    message = "üîÑ **–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏**\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:"
                    
                    keyboard_buttons = []
                    for appointment in appointments:
                        date_str = appointment.appointment_date.strftime('%d.%m.%Y')
                        time_str = appointment.appointment_time.strftime('%H:%M') if appointment.appointment_time else '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                        
                        button_text = f"üìÖ {date_str} {time_str}"
                        callback_data = f"reschedule_appointment_{appointment.id}"
                        keyboard_buttons.append([{"text": button_text, "callback_data": callback_data}])
                    
                    keyboard = {"inline_keyboard": keyboard_buttons}
                else:
                    message = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞"
                    keyboard = {
                        "inline_keyboard": [
                            [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "book_appointment"}]
                        ]
                    }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã reschedule: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_profile(self, chat_id: int, telegram_user, db: Session):
        """–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = db.query(User).filter(User.telegram_chat_id == str(chat_id)).first()
            
            if not user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                message = f"""üë§ **–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Email: {user.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –†–æ–ª—å: {user.role or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {db.query(Appointment).filter(Appointment.patient_id == user.id).count()}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user.last_login.strftime('%d.%m.%Y %H:%M') if user.last_login else '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ –Ø–∑—ã–∫: {user.language or '–†—É—Å—Å–∫–∏–π'}"""
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "edit_profile"}],
                        [{"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "profile_settings"}],
                        [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "profile_stats"}]
                    ]
                }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã profile: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_doctors(self, chat_id: int, telegram_user, db: Session):
        """–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–∞—á–µ–π
            doctors = crud_doctor.get_doctors(db, active_only=True)
            
            if doctors:
                message = f"üë®‚Äç‚öïÔ∏è **–ù–∞—à–∏ –≤—Ä–∞—á–∏ ({len(doctors)}):**\\n\\n"
                
                for doctor in doctors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    message += f"‚Ä¢ **{doctor.full_name}**\\n"
                    message += f"  {doctor.specialty or '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\\n"
                    if doctor.phone:
                        message += f"  üìû {doctor.phone}\\n"
                    message += "\\n"
                
                if len(doctors) > 10:
                    message += f"... –∏ –µ—â–µ {len(doctors) - 10} –≤—Ä–∞—á–µ–π\\n"
            else:
                message = "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", "callback_data": "book_doctor"}],
                    [{"text": "üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "callback_data": "doctor_schedule"}],
                    [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh_doctors"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã doctors: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_services(self, chat_id: int, telegram_user, db: Session):
        """–ù–∞—à–∏ —É—Å–ª—É–≥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Å–ª—É–≥–∏
            services = crud_service.get_services(db, active_only=True)
            
            if services:
                message = f"üíä **–ù–∞—à–∏ —É—Å–ª—É–≥–∏ ({len(services)}):**\\n\\n"
                
                for service in services[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                    message += f"‚Ä¢ **{service.name}**\\n"
                    message += f"  üí∞ {service.price:,} —Å—É–º\\n"
                    if service.description:
                        message += f"  üìù {service.description[:50]}...\\n"
                    message += "\\n"
                
                if len(services) > 10:
                    message += f"... –∏ –µ—â–µ {len(services) - 10} —É—Å–ª—É–≥\\n"
            else:
                message = "üíä –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", "callback_data": "book_service"}],
                    [{"text": "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "callback_data": "service_categories"}],
                    [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": "refresh_services"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã services: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_status(self, chat_id: int, telegram_user, db: Session):
        """–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = db.query(User).filter(User.telegram_chat_id == str(chat_id)).first()
            
            if not user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                last_appointment = db.query(Appointment).filter(
                    Appointment.patient_id == user.id
                ).order_by(Appointment.appointment_date.desc()).first()
                
                if last_appointment:
                    date_str = last_appointment.appointment_date.strftime('%d.%m.%Y')
                    time_str = last_appointment.appointment_time.strftime('%H:%M') if last_appointment.appointment_time else '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                    
                    status_icons = {
                        "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                        "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", 
                        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
                        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
                        "no_show": "üëª –ù–µ —è–≤–∏–ª—Å—è"
                    }
                    
                    status = last_appointment.status or "pending"
                    status_text = status_icons.get(status, f"üìã {status}")
                    
                    message = f"""üìã **–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏**

**–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:**
‚Ä¢ –î–∞—Ç–∞: {date_str}
‚Ä¢ –í—Ä–µ–º—è: {time_str}
‚Ä¢ –í—Ä–∞—á: {last_appointment.doctor_name or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_text}

**–î–µ—Ç–∞–ª–∏:**
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: #{last_appointment.id}
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {last_appointment.created_at.strftime('%d.%m.%Y %H:%M')}"""
                else:
                    message = "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π\\n\\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /book –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏", "callback_data": "my_appointments"}],
                        [{"text": "üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "callback_data": "book_appointment"}]
                    ]
                }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã status: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_language(self, chat_id: int, telegram_user, db: Session):
        """–°–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
        try:
            message = """üåê **–í—ã–±–æ—Ä —è–∑—ã–∫–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"""
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "callback_data": "lang_ru"}],
                    [{"text": "üá∫üáø O'zbek", "callback_data": "lang_uz"}],
                    [{"text": "üá¨üáß English", "callback_data": "lang_en"}]
                ]
            }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã language: {e}")
            await self._send_error_message(chat_id)
    
    async def _handle_notifications_settings(self, chat_id: int, telegram_user, db: Session):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = db.query(User).filter(User.telegram_chat_id == str(chat_id)).first()
            
            if not user:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                message = f"""üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.sms_notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.email_notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚Ä¢ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if user.telegram_notifications else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}

**–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏"""
                
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "üì± SMS", "callback_data": "toggle_sms"}],
                        [{"text": "üìß Email", "callback_data": "toggle_email"}],
                        [{"text": "ü§ñ Telegram", "callback_data": "toggle_telegram"}],
                        [{"text": "‚öôÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "notification_details"}]
                    ]
                }
            
            await self._send_message(chat_id, message, parse_mode="Markdown", reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã notifications: {e}")
            await self._send_error_message(chat_id)
    
    # ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
    
    async def _send_error_message(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = """‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
        
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "callback_data": "retry"}],
                [{"text": "üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "callback_data": "support"}]
            ]
        }
        
        await self._send_message(chat_id, message, reply_markup=keyboard)
    
    async def _send_message(self, chat_id: int, text: str, parse_mode: str = None, reply_markup: dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API"""
        try:
            if not self.bot_token:
                return False
            
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            
            data = {
                "chat_id": chat_id,
                "text": text
            }
            
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            
            response = requests.post(url, json=data, timeout=10)
            return response.status_code == 200
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_admin_notification(self, message: str, db: Session):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å Telegram
            admins = db.query(User).filter(
                and_(
                    User.role.in_(["Admin", "SuperAdmin"]),
                    User.telegram_chat_id.isnot(None)
                )
            ).all()
            
            for admin in admins:
                await self._send_message(admin.telegram_chat_id, f"üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\\n\\n{message}", parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
    
    async def send_bulk_notification(self, message: str, user_ids: List[int], db: Session):
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            success_count = 0
            
            for user_id in user_ids:
                user = crud_user.get(db, id=user_id)
                if user and user.telegram_chat_id:
                    success = await self._send_message(user.telegram_chat_id, message)
                    if success:
                        success_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.1)
            
            return success_count
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
enhanced_telegram_bot = EnhancedTelegramBotService()


def get_enhanced_telegram_bot() -> EnhancedTelegramBotService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞"""
    return enhanced_telegram_bot
