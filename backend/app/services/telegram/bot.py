"""
Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∏–Ω–∏–∫–∏
"""
import asyncio
import logging
from typing import Optional, Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import os
from datetime import datetime, timedelta

from ...core.config import settings
from ...models.user import User
from ...models.visit import Visit
from ..queue_service import QueueBusinessService

logger = logging.getLogger(__name__)


class ClinicTelegramBot:
    """Telegram –±–æ—Ç –∫–ª–∏–Ω–∏–∫–∏"""
    
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.token:
            logger.warning("TELEGRAM_BOT_TOKEN not set. Telegram bot disabled.")
            self.bot = None
            self.dp = None
            return
            
        self.bot = Bot(token=self.token)
        self.dp = Dispatcher()
        self.queue_service = QueueBusinessService()
        self._setup_handlers()
    
    async def send_confirmation_invitation(
        self, 
        chat_id: int, 
        message: str, 
        keyboard: list
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞"""
        try:
            if not self.bot:
                return {"success": False, "error": "Telegram bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            inline_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=button["text"], 
                                        callback_data=button.get("callback_data"),
                                        url=button.get("url")) 
                     for button in row]
                    for row in keyboard
                ]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sent_message = await self.bot.send_message(
                chat_id=chat_id,
                text=message,
                reply_markup=inline_keyboard,
                parse_mode="Markdown"
            )
            
            return {
                "success": True,
                "message_id": sent_message.message_id,
                "chat_id": chat_id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.dp:
            return
            
        # –ö–æ–º–∞–Ω–¥–∞ /start
        @self.dp.message(CommandStart())
        async def start_handler(message: types.Message):
            await self.handle_start(message)
        
        # –ö–æ–º–∞–Ω–¥–∞ /queue - —É—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å
        @self.dp.message(Command("queue"))
        async def queue_handler(message: types.Message):
            await self.handle_queue(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∏–∑–∏—Ç–æ–≤
        @self.dp.callback_query()
        async def callback_handler(callback: types.CallbackQuery):
            await self.handle_callback(callback)
        
        # –ö–æ–º–∞–Ω–¥–∞ /appointment - –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
        @self.dp.message(Command("appointment"))
        async def appointment_handler(message: types.Message):
            await self.handle_appointment(message)
        
        # –ö–æ–º–∞–Ω–¥–∞ /help
        @self.dp.message(Command("help"))
        async def help_handler(message: types.Message):
            await self.handle_help(message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        @self.dp.callback_query()
        async def callback_handler(callback: types.CallbackQuery):
            await self.handle_callback(callback)
    
    async def handle_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=f"{settings.FRONTEND_URL}/mobile")
                )
            ],
            [
                InlineKeyboardButton(text="üè• –£—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å", callback_data="queue"),
                InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º", callback_data="appointment")
            ],
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ])
        
        welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–ª–∏–Ω–∏–∫–∏!

–ü—Ä–∏–≤–µ—Ç, {first_name}! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üè• –í—Å—Ç–∞—Ç—å –≤ —É—Ç—Ä–µ–Ω–Ω—é—é –æ—á–µ—Ä–µ–¥—å (—Å 07:00)
‚Ä¢ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É
‚Ä¢ üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏
‚Ä¢ üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ üíä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –≤ PDF

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        await message.answer(welcome_text, reply_markup=keyboard)
    
    async def handle_queue(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /queue"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (07:00 - 08:00)
        current_time = datetime.now()
        if current_time.hour < 7 or current_time.hour >= 8:
            await message.answer(
                "‚è∞ –£—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å 07:00 –¥–æ 08:00!\n"
                f"–°–µ–π—á–∞—Å: {current_time.strftime('%H:%M')}"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë®‚Äç‚öïÔ∏è –¢–µ—Ä–∞–ø–µ–≤—Ç", callback_data="queue_therapist"),
                InlineKeyboardButton(text="‚ù§Ô∏è –ö–∞—Ä–¥–∏–æ–ª–æ–≥", callback_data="queue_cardiologist")
            ],
            [
                InlineKeyboardButton(text="üë©‚Äç‚öïÔ∏è –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", callback_data="queue_dermatologist"),
                InlineKeyboardButton(text="ü¶∑ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", callback_data="queue_dentist")
            ],
            [
                InlineKeyboardButton(text="üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", callback_data="queue_lab")
            ]
        ])
        
        await message.answer(
            "üè• –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π –æ—á–µ—Ä–µ–¥–∏:\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ—á–µ—Ä–µ–¥—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 08:00!",
            reply_markup=keyboard
        )
    
    async def handle_appointment(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /appointment"""
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º",
                    web_app=WebAppInfo(url=f"{settings.FRONTEND_URL}/appointment")
                )
            ],
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_appointments")
            ]
        ])
        
        await message.answer(
            "üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=keyboard
        )
    
    async def handle_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∫–ª–∏–Ω–∏–∫–∏**

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/queue` - –£—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å (07:00-08:00)
‚Ä¢ `/appointment` - –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**
üè• **–£—Ç—Ä–µ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å**
- –î–æ—Å—Ç—É–ø–Ω–∞ —Å 07:00 –¥–æ 08:00
- –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
- –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏

üìÖ **–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º**
- –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏ –≤—Ä–µ–º—è
- –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å
- –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

üìã **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è**
- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∏–∑–∏—Ç–∞—Ö
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @clinic_support
        """
        
        await message.answer(help_text, parse_mode="Markdown")
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback.data
        user_id = callback.from_user.id
        
        if data.startswith("queue_"):
            await self._handle_queue_callback(callback, data)
        elif data == "appointment":
            await self.handle_appointment(callback.message)
        elif data == "my_appointments":
            await self._handle_my_appointments(callback)
        elif data == "help":
            await self.handle_help(callback.message)
        
        await callback.answer()
    
    async def _handle_queue_callback(self, callback: types.CallbackQuery, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"""
        specialist_map = {
            "queue_therapist": {"name": "–¢–µ—Ä–∞–ø–µ–≤—Ç", "id": 1},
            "queue_cardiologist": {"name": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "id": 2},
            "queue_dermatologist": {"name": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥", "id": 3},
            "queue_dentist": {"name": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "id": 4},
            "queue_lab": {"name": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "id": 5}
        }
        
        specialist = specialist_map.get(data)
        if not specialist:
            await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
            return
        
        user_id = callback.from_user.id
        phone = callback.from_user.username or str(user_id)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
            result = await self.queue_service.join_queue(
                specialist_id=specialist["id"],
                phone=phone,
                telegram_id=user_id,
                patient_name=callback.from_user.first_name
            )
            
            if result.get("success"):
                queue_number = result.get("queue_number", "?")
                estimated_time = result.get("estimated_time", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                
                await callback.message.answer(
                    f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
                    f"üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist['name']}\n"
                    f"üé´ –í–∞—à –Ω–æ–º–µ—Ä: {queue_number}\n"
                    f"‚è∞ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time}\n\n"
                    f"üì± –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ—á–µ—Ä–µ–¥—å—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –∂–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
                )
            else:
                error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å:\n{error_msg}")
                
        except Exception as e:
            logger.error(f"Error joining queue: {str(e)}")
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def _handle_my_appointments(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î
        await callback.message.answer(
            "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
            "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=WebAppInfo(url=f"{settings.FRONTEND_URL}/appointments")
                    )
                ]
            ])
        )
    
    async def send_notification(self, user_id: int, message: str, keyboard: Optional[InlineKeyboardMarkup] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.bot:
            return False
            
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return True
        except Exception as e:
            logger.error(f"Failed to send notification to {user_id}: {str(e)}")
            return False
    
    async def send_appointment_reminder(self, user_id: int, appointment_data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∏–∑–∏—Ç–µ"""
        doctor = appointment_data.get("doctor", "–í—Ä–∞—á")
        time = appointment_data.get("time", "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        date = appointment_data.get("date", "–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        
        message = f"""
üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ**

üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor}
üìÖ –î–∞—Ç–∞: {date}
‚è∞ –í—Ä–µ–º—è: {time}

–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{appointment_data.get('id')}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{appointment_data.get('id')}")
            ]
        ])
        
        await self.send_notification(user_id, message, keyboard)
    
    async def send_lab_results_ready(self, user_id: int, results_info: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        message = f"""
üî¨ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –≥–æ—Ç–æ–≤—ã**

üìã –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {results_info.get('test_name', '–ê–Ω–∞–ª–∏–∑—ã')}
üìÖ –î–∞—Ç–∞: {results_info.get('date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    web_app=WebAppInfo(url=f"{settings.FRONTEND_URL}/lab-results")
                )
            ]
        ])
        
        await self.send_notification(user_id, message, keyboard)
    
    async def setup_webhook(self, webhook_url: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook"""
        if not self.bot:
            return False
            
        try:
            await self.bot.set_webhook(webhook_url)
            logger.info(f"Webhook set to: {webhook_url}")
            return True
        except Exception as e:
            logger.error(f"Failed to set webhook: {str(e)}")
            return False
    
    async def remove_webhook(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
        if not self.bot:
            return False
            
        try:
            await self.bot.delete_webhook()
            logger.info("Webhook removed")
            return True
        except Exception as e:
            logger.error(f"Failed to remove webhook: {str(e)}")
            return False
    
    def get_webhook_handler(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è aiohttp"""
        if not self.bot or not self.dp:
            return None
            
        return SimpleRequestHandler(
            dispatcher=self.dp,
            bot=self.bot
        )
    
    async def handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∏–∑–∏—Ç–æ–≤"""
        try:
            callback_data = callback.data
            
            if callback_data.startswith("confirm_visit:"):
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
                token = callback_data.split(":", 1)[1]
                await self._handle_visit_confirmation(callback, token, True)
                
            elif callback_data.startswith("cancel_visit:"):
                # –û—Ç–º–µ–Ω–∞ –≤–∏–∑–∏—Ç–∞
                token = callback_data.split(":", 1)[1]
                await self._handle_visit_confirmation(callback, token, False)
                
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    async def _handle_visit_confirmation(
        self, 
        callback: types.CallbackQuery, 
        token: str, 
        confirm: bool
    ):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –≤–∏–∑–∏—Ç–∞"""
        try:
            if confirm:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–∏–∑–∏—Ç —á–µ—Ä–µ–∑ API
                result = await self._confirm_visit_via_api(token, callback.from_user.id)
                
                if result.get("success"):
                    message = "‚úÖ –í–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
                    if result.get("queue_numbers"):
                        queue_info = ", ".join([f"{q['queue_name']}: ‚Ññ{q['number']}" 
                                              for q in result["queue_numbers"]])
                        message += f"\n\nüé´ –í–∞—à–∏ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—è—Ö:\n{queue_info}"
                    
                    await callback.message.edit_text(
                        text=f"{callback.message.text}\n\n{message}",
                        parse_mode="Markdown"
                    )
                else:
                    await callback.answer(
                        f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", 
                        show_alert=True
                    )
            else:
                # –û—Ç–º–µ–Ω—è–µ–º –≤–∏–∑–∏—Ç
                await callback.message.edit_text(
                    text=f"{callback.message.text}\n\n‚ùå –í–∏–∑–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω",
                    parse_mode="Markdown"
                )
                
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", show_alert=True)
    
    async def _confirm_visit_via_api(self, token: str, telegram_user_id: int) -> Dict[str, Any]:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–∏–∑–∏—Ç —á–µ—Ä–µ–∑ API"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            import requests
            
            response = requests.post(
                f"{settings.API_BASE_URL}/telegram/visits/confirm",
                json={
                    "token": token,
                    "channel": "telegram"
                },
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"success": False, "message": f"HTTP {response.status_code}"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return {"success": False, "message": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
telegram_bot = ClinicTelegramBot()

class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.bot = telegram_bot
    
    async def send_confirmation_invitation(
        self, 
        chat_id: int, 
        message: str, 
        keyboard: list
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞"""
        if not self.bot or not self.bot.bot:
            return {"success": False, "error": "Telegram bot –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        return await self.bot.send_confirmation_invitation(chat_id, message, keyboard)
