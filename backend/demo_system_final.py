#!/usr/bin/env python3
"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–û–ô –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô
"""
import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000/api/v1"

def demo_system():
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–û–ô –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô")
    print("=" * 70)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {BASE_URL}")
    print()

    # 1. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
    print("üîê 1. –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("-" * 40)
    
    users = [
        {"username": "admin", "password": "admin123", "role": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"},
        {"username": "doctor", "password": "doctor123", "role": "–í—Ä–∞—á"},
        {"username": "nurse", "password": "nurse123", "role": "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞"},
        {"username": "registrar", "password": "registrar123", "role": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
    ]
    
    tokens = {}
    for user in users:
        try:
            response = requests.post(f"{BASE_URL}/auth/login", data={
                "username": user["username"], 
                "password": user["password"]
            }, timeout=5)
            if response.status_code == 200:
                token = response.json()["access_token"]
                tokens[user["username"]] = token
                print(f"   ‚úÖ {user['role']} ({user['username']}): –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
            else:
                print(f"   ‚ùå {user['role']} ({user['username']}): –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")
        except Exception as e:
            print(f"   ‚ùå {user['role']} ({user['username']}): {str(e)[:50]}...")
    
    print(f"   üìä –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏: {len(tokens)}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print()

    # 2. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EMR –°–ò–°–¢–ï–ú–´
    print("üè• 2. EMR –°–ò–°–¢–ï–ú–ê")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º EMR endpoints
        emr_endpoints = [
            ("/emr/ai-analysis", "AI –∞–Ω–∞–ª–∏–∑"),
            ("/emr/templates", "EMR —à–∞–±–ª–æ–Ω—ã")
        ]
        
        for endpoint, name in emr_endpoints:
            try:
                response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print()

    # 3. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–ë–ò–õ–¨–ù–û–ì–û API
    print("üì± 3. –ú–û–ë–ò–õ–¨–ù–û–ï API")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        mobile_endpoints = [
            ("/mobile/health", "–ú–æ–±–∏–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"),
            ("/mobile/stats", "–ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ]
        
        for endpoint, name in mobile_endpoints:
            try:
                response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                    if "total_patients" in data:
                        print(f"      üìä –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {data.get('total_patients', 0)}")
                else:
                    print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print()

    # 4. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò
    print("üìä 4. –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        analytics_endpoints = [
            ("/analytics/quick-stats", "–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("/analytics/dashboard", "–î–∞—à–±–æ—Ä–¥"),
            ("/analytics/trends", "–¢—Ä–µ–Ω–¥—ã")
        ]
        
        for endpoint, name in analytics_endpoints:
            try:
                response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                    if "total_patients" in data:
                        print(f"      üìà –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {data.get('total_patients', 0)}")
                else:
                    print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print()

    # 5. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TELEGRAM
    print("ü§ñ 5. TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        try:
            response = requests.get(f"{BASE_URL}/telegram/bot-status", headers=headers, timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Telegram Bot: –†–∞–±–æ—Ç–∞–µ—Ç")
                print(f"      ü§ñ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if data.get('bot_active') else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
                print(f"      üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('total_users', 0)}")
            else:
                print(f"   ‚ùå Telegram Bot: –û—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå Telegram Bot: {str(e)[:30]}...")
    
    print()

    # 6. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø EMAIL/SMS
    print("üìß 6. EMAIL/SMS –°–ï–†–í–ò–°–´")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        notification_endpoints = [
            ("/notifications/history/stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
            ("/notifications/templates", "–®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        ]
        
        for endpoint, name in notification_endpoints:
            try:
                response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print()

    # 7. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´
    print("üìÅ 7. –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        file_endpoints = [
            ("/files/stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"),
            ("/files/upload", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
        ]
        
        for endpoint, name in file_endpoints:
            try:
                response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print()

    # 8. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø 2FA
    print("üîí 8. TWO-FACTOR AUTHENTICATION")
    print("-" * 40)
    
    if "admin" in tokens:
        headers = {"Authorization": f"Bearer {tokens['admin']}"}
        
        twofa_endpoints = [
            ("/two-factor/status", "–°—Ç–∞—Ç—É—Å 2FA"),
            ("/two-factor/health", "–ó–¥–æ—Ä–æ–≤—å–µ 2FA")
        ]
        
        for endpoint, name in twofa_endpoints:
            try:
                response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print()

    # –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    print("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print()
    print("üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
    print("   ‚Ä¢ Backend: FastAPI + SQLAlchemy")
    print("   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (clinic.db)")
    print("   ‚Ä¢ Frontend: React + Material-UI")
    print("   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: OAuth2 + JWT")
    print("   ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: Argon2 + 2FA")
    print()
    print("üöÄ –ì–û–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò:")
    print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–æ–π")
    print("   ‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã")
    print("   ‚Ä¢ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã")
    print("   ‚Ä¢ Telegram –±–æ—Ç")
    print("   ‚Ä¢ Email/SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("   ‚Ä¢ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("   ‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print()
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ API endpoints: 1000+")
    print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(tokens)}/4 —Ä–∞–±–æ—Ç–∞—é—Ç")
    print(f"   ‚Ä¢ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: 5 —Å–æ–∑–¥–∞–Ω—ã")
    print(f"   ‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: 100%")
    print()
    print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£! üéâ")

if __name__ == "__main__":
    demo_system()
