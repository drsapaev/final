"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –∑–∞–ø–∏—Å—å ‚Üí –æ—á–µ—Ä–µ–¥—å ‚Üí –ø—Ä–∏–µ–º ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
–û—Å–Ω–æ–≤–∞: detail.md —Å—Ç—Ä. 444 (—Ç–µ—Å—Ç-—á–µ–∫–ª–∏—Å—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã)
"""
import pytest
from datetime import date, datetime, timedelta
from fastapi.testclient import TestClient
from sqlalchemy.orm import Session

from app.main import app
from app.db.session import SessionLocal
from app.models.user import User
from app.models.patient import Patient
from app.models.clinic import Doctor, ServiceCategory, ClinicSettings
from app.models.service import Service
from app.models.online_queue import DailyQueue, OnlineOnlineQueueEntry, QueueToken
from app.core.auth import create_access_token

client = TestClient(app)


@pytest.fixture
def db_session():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ë–î"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@pytest.fixture
def setup_test_data(db_session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    
    # 1. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_user = User(
        username="test_admin",
        email="admin@test.com",
        full_name="Test Admin",
        role="Admin",
        is_active=True
    )
    db_session.add(admin_user)
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    registrar_user = User(
        username="test_registrar",
        email="registrar@test.com", 
        full_name="Test Registrar",
        role="Registrar",
        is_active=True
    )
    db_session.add(registrar_user)
    
    # 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–∞-–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞
    doctor_user = User(
        username="test_cardiologist",
        email="cardio@test.com",
        full_name="Dr. –ö–∞—Ä–¥–∏–æ–ª–æ–≥",
        role="Doctor",
        is_active=True
    )
    db_session.add(doctor_user)
    db_session.commit()
    
    doctor = Doctor(
        user_id=doctor_user.id,
        specialty="cardiology",
        cabinet="101",
        start_number_online=1,
        max_online_per_day=15,
        active=True
    )
    db_session.add(doctor)
    
    # 4. –°–æ–∑–¥–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patient = Patient(
        first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
        last_name="–ü–∞—Ü–∏–µ–Ω—Ç", 
        phone="+998901234567",
        birth_date=date(1985, 5, 15)
    )
    db_session.add(patient)
    
    # 5. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥
    category = ServiceCategory(
        code="consultation.cardiology",
        name_ru="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞",
        specialty="cardiology",
        active=True
    )
    db_session.add(category)
    db_session.commit()
    
    # 6. –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥—É
    service = Service(
        name="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞",
        code="CARDIO_CONS",
        price=100000,
        currency="UZS",
        duration_minutes=30,
        category_id=category.id,
        doctor_id=doctor.id,
        active=True
    )
    db_session.add(service)
    
    # 7. –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    settings = [
        ClinicSettings(key="timezone", value="Asia/Tashkent", category="clinic"),
        ClinicSettings(key="queue_start_hour", value=7, category="queue"),
        ClinicSettings(key="start_number_cardiology", value=1, category="queue"),
        ClinicSettings(key="max_per_day_cardiology", value=15, category="queue")
    ]
    
    for setting in settings:
        db_session.add(setting)
    
    db_session.commit()
    
    return {
        "admin_user": admin_user,
        "registrar_user": registrar_user,
        "doctor_user": doctor_user,
        "doctor": doctor,
        "patient": patient,
        "service": service,
        "category": category
    }


def test_full_integration_cycle(setup_test_data):
    """
    –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    –ò–∑ detail.md —Å—Ç—Ä. 444: CRUD –∑–∞–ø–∏—Å—å: —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Üí –≤–∏–∑–∏—Ç ‚Üí –ø–µ—á–∞—Ç—å —Ç–∞–ª–æ–Ω–∞
    """
    
    data = setup_test_data
    
    # –¢–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    admin_token = create_access_token(subject=data["admin_user"].username)
    registrar_token = create_access_token(subject=data["registrar_user"].username)
    doctor_token = create_access_token(subject=data["doctor_user"].username)
    
    admin_headers = {"Authorization": f"Bearer {admin_token}"}
    registrar_headers = {"Authorization": f"Bearer {registrar_token}"}
    doctor_headers = {"Authorization": f"Bearer {doctor_token}"}
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # ===== –®–ê–ì 1: –†–ï–ì–ò–°–¢–†–ê–¢–£–†–ê - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ =====
    print("1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ...")
    
    tomorrow = (date.today() + timedelta(days=1)).isoformat()
    
    response = client.post(
        f"/api/v1/registrar/generate-qr?day={tomorrow}&specialist_id={data['doctor'].id}",
        headers=registrar_headers
    )
    
    assert response.status_code == 200
    qr_data = response.json()
    assert qr_data["success"] == True
    assert "token" in qr_data
    
    print(f"   ‚úÖ QR —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {qr_data['token'][:8]}...")
    
    # ===== –®–ê–ì 2: –ü–ê–¶–ò–ï–ù–¢ - –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å =====
    print("2Ô∏è‚É£ –ü–∞—Ü–∏–µ–Ω—Ç –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å...")
    
    join_request = {
        "token": qr_data["token"],
        "phone": data["patient"].phone,
        "patient_name": f"{data['patient'].last_name} {data['patient'].first_name}"
    }
    
    response = client.post("/api/v1/online-queue/join", json=join_request)
    
    assert response.status_code == 200
    join_result = response.json()
    assert join_result["success"] == True
    assert join_result["number"] == 1  # –ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏
    
    print(f"   ‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –Ω–æ–º–µ—Ä: #{join_result['number']}")
    
    # ===== –®–ê–ì 3: –†–ï–ì–ò–°–¢–†–ê–¢–£–†–ê - –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–µ–º–∞ =====
    print("3Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–µ–º...")
    
    response = client.post(
        f"/api/v1/registrar/open-reception?day={tomorrow}&specialist_id={data['doctor'].id}",
        headers=registrar_headers
    )
    
    assert response.status_code == 200
    open_result = response.json()
    assert open_result["success"] == True
    
    print("   ‚úÖ –ü—Ä–∏–µ–º –æ—Ç–∫—Ä—ã—Ç, –æ–Ω–ª–∞–π–Ω-–Ω–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç")
    
    # ===== –®–ê–ì 4: –í–†–ê–ß - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ =====
    print("4Ô∏è‚É£ –í—Ä–∞—á –≤–∏–¥–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏...")
    
    response = client.get("/api/v1/doctor/cardiology/queue/today", headers=doctor_headers)
    
    assert response.status_code == 200
    queue_data = response.json()
    assert queue_data["queue_exists"] == True
    assert len(queue_data["entries"]) == 1
    assert queue_data["entries"][0]["number"] == 1
    
    print(f"   ‚úÖ –í—Ä–∞—á –≤–∏–¥–∏—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ #{queue_data['entries'][0]['number']}")
    
    entry_id = queue_data["entries"][0]["id"]
    
    # ===== –®–ê–ì 5: –í–†–ê–ß - –í—ã–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞ =====
    print("5Ô∏è‚É£ –í—Ä–∞—á –≤—ã–∑—ã–≤–∞–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞...")
    
    response = client.post(f"/api/v1/doctor/queue/{entry_id}/call", headers=doctor_headers)
    
    assert response.status_code == 200
    call_result = response.json()
    assert call_result["success"] == True
    
    print("   ‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –≤—ã–∑–≤–∞–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç")
    
    # ===== –®–ê–ì 6: –í–†–ê–ß - –ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∞ =====
    print("6Ô∏è‚É£ –í—Ä–∞—á –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏–µ–º...")
    
    response = client.post(f"/api/v1/doctor/queue/{entry_id}/start-visit", headers=doctor_headers)
    
    assert response.status_code == 200
    start_result = response.json()
    assert start_result["success"] == True
    
    print("   ‚úÖ –ü—Ä–∏–µ–º –Ω–∞—á–∞—Ç")
    
    # ===== –®–ê–ì 7: –í–†–ê–ß - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ =====
    print("7Ô∏è‚É£ –í—Ä–∞—á –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–∏–µ–º...")
    
    visit_data = {
        "complaint": "–ë–æ–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ—Ä–¥—Ü–∞",
        "diagnosis": "–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è",
        "icd10": "I20.8",
        "services": [data["service"].id],
        "notes": "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü"
    }
    
    response = client.post(
        f"/api/v1/doctor/queue/{entry_id}/complete",
        json=visit_data,
        headers=doctor_headers
    )
    
    assert response.status_code == 200
    complete_result = response.json()
    assert complete_result["success"] == True
    
    print("   ‚úÖ –ü—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # ===== –®–ê–ì 8: –ü–†–û–í–ï–†–ö–ê –ò–¢–û–ì–û–í–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø =====
    print("8Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    response = client.get("/api/v1/doctor/cardiology/queue/today", headers=doctor_headers)
    final_queue = response.json()
    
    # –ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ "served"
    served_entry = final_queue["entries"][0]
    assert served_entry["status"] == "served"
    
    print("   ‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ '–ø—Ä–∏–Ω—è—Ç'")
    
    print("\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
    print("üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:")
    print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ")
    print("   ‚úÖ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å") 
    print("   ‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–æ–π")
    print("   ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ –≤—Ä–∞—á–æ–º")
    print("   ‚úÖ –í—ã–∑–æ–≤ –∏ –ø—Ä–∏–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    print("   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞")
    print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")


def test_queue_settings_integration(setup_test_data):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏
    –ò–∑ detail.md —Å—Ç—Ä. 459: —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
    """
    
    data = setup_test_data
    registrar_token = create_access_token(subject=data["registrar_user"].username)
    headers = {"Authorization": f"Bearer {registrar_token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    response = client.get("/api/v1/registrar/queue-settings", headers=headers)
    
    assert response.status_code == 200
    settings = response.json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    assert "specialties" in settings
    assert "cardiology" in settings["specialties"]
    assert settings["specialties"]["cardiology"]["start_number"] == 1
    assert settings["specialties"]["cardiology"]["max_per_day"] == 15
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")


def test_services_integration(setup_test_data):
    """
    –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥
    """
    
    data = setup_test_data
    doctor_token = create_access_token(subject=data["doctor_user"].username)
    headers = {"Authorization": f"Bearer {doctor_token}"}
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞
    response = client.get("/api/v1/doctor/cardiology/services", headers=headers)
    
    assert response.status_code == 200
    services = response.json()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å–ª—É–≥–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    assert "services_by_category" in services
    assert services["total_services"] > 0
    
    print("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v", "--tb=short"])
