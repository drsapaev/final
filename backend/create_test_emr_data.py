#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EMR
"""
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'app')))

from app.db.session import SessionLocal, engine
from app.models.emr import EMR
from app.models.emr_version import EMRVersion
from app.models.lab import LabOrder, LabResult
from sqlalchemy import text


def create_test_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è EMR"""
    print("üîÑ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –î–õ–Ø EMR")
    print("=" * 40)
    
    try:
        db = SessionLocal()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π EMR
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ EMR...")
        test_emr = EMR(
            appointment_id=1,
            complaints="–±–æ–ª—å –≤ –≥—Ä—É–¥–∏, –æ–¥—ã—à–∫–∞",
            anamnesis="–ñ–∞–ª–æ–±—ã –Ω–∞ –±–æ–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ—Ä–¥—Ü–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å",
            examination="–ß–°–° 82, –ê–î 140/90, –¥—ã—Ö–∞–Ω–∏–µ –≤–µ–∑–∏–∫—É–ª—è—Ä–Ω–æ–µ",
            diagnosis="–°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
            icd10="I20.9",
            recommendations="–ö–æ–Ω—Ç—Ä–æ–ª—å –ê–î, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞",
            procedures=json.dumps([{"name": "–≠–ö–ì", "status": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}]),
            attachments=json.dumps([]),
            vital_signs=json.dumps({
                "blood_pressure": "140/90",
                "heart_rate": 82,
                "temperature": 36.6,
                "weight": 75.0
            }),
            lab_results=json.dumps({}),
            imaging_results=json.dumps({}),
            medications=json.dumps([]),
            allergies=json.dumps([]),
            family_history=json.dumps({}),
            social_history=json.dumps({}),
            ai_suggestions=json.dumps({}),
            ai_confidence=0.85,
            template_id=1,
            specialty="cardiology",
            is_draft=False,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
            saved_at=datetime.utcnow()
        )
        
        db.add(test_emr)
        db.flush()
        emr_id = test_emr.id
        print(f"   ‚úÖ EMR —Å–æ–∑–¥–∞–Ω —Å ID: {emr_id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ EMR
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π...")
        version1 = EMRVersion(
            emr_id=emr_id,
            version_number=1,
            data=json.dumps({
                "complaints": "—É—Å—Ç–∞–ª–æ—Å—Ç—å",
                "diagnosis": "–∞—Å—Ç–µ–Ω–∏—è"
            }),
            change_type="created",
            change_description="–ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å",
            changed_by=1,
            is_current=False,
            created_at=datetime.utcnow()
        )
        
        version2 = EMRVersion(
            emr_id=emr_id,
            version_number=2,
            data=json.dumps({
                "complaints": "–±–æ–ª—å –≤ –≥—Ä—É–¥–∏",
                "diagnosis": "—Å—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è",
                "icd10": "I20.9"
            }),
            change_type="updated",
            change_description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞",
            changed_by=1,
            is_current=True,
            created_at=datetime.utcnow()
        )
        
        db.add(version1)
        db.add(version2)
        print(f"   ‚úÖ –í–µ—Ä—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        lab_order = LabOrder(
            patient_id=1,
            status="done",
            notes="–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏",
            created_at=datetime.utcnow(),
            completed_at=datetime.utcnow()
        )
        
        db.add(lab_order)
        db.flush()
        order_id = lab_order.id
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤
        lab_results = [
            LabResult(
                order_id=order_id,
                test_code="glucose",
                test_name="–ì–ª—é–∫–æ–∑–∞",
                value="6.2",
                unit="mmol/L",
                ref_range="3.9-5.6",
                abnormal=True,
                notes="–ü–æ–≤—ã—à–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è",
                created_at=datetime.utcnow()
            ),
            LabResult(
                order_id=order_id,
                test_code="cholesterol",
                test_name="–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω –æ–±—â–∏–π",
                value="4.8",
                unit="mmol/L",
                ref_range="0-5.2",
                abnormal=False,
                notes="–í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã",
                created_at=datetime.utcnow()
            ),
            LabResult(
                order_id=order_id,
                test_code="hemoglobin",
                test_name="–ì–µ–º–æ–≥–ª–æ–±–∏–Ω",
                value="110",
                unit="g/L",
                ref_range="120-160",
                abnormal=True,
                notes="–°–Ω–∏–∂–µ–Ω, –∞–Ω–µ–º–∏—è",
                created_at=datetime.utcnow()
            )
        ]
        
        for result in lab_results:
            db.add(result)
        
        print(f"   ‚úÖ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        return False
    finally:
        db.close()


if __name__ == "__main__":
    success = create_test_data()
    sys.exit(0 if success else 1)
