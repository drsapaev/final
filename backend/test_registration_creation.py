#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
"""
import requests
import json
from datetime import date

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
REGISTRAR_USERNAME = "registrar@example.com"
REGISTRAR_PASSWORD = "registrar123"

def get_auth_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    login_data = {
        "username": REGISTRAR_USERNAME,
        "password": REGISTRAR_PASSWORD
    }
    
    response = requests.post(f"{BASE_URL}/api/v1/auth/login", data=login_data)
    
    if response.status_code == 200:
        token_data = response.json()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token_data['access_token'][:50]}...")
        return token_data['access_token']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        return None

def create_test_patient(token):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    print("üë§ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    patient_data = {
        "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
        "last_name": "–ü–∞—Ü–∏–µ–Ω—Ç",
        "middle_name": "–ò–≤–∞–Ω–æ–≤–∏—á",
        "phone": "+998901234999",
        "birth_date": "1990-01-01",
        "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123"
    }
    
    response = requests.post(f"{BASE_URL}/api/v1/patients", json=patient_data, headers=headers)
    
    if response.status_code in [200, 201]:
        patient = response.json()
        full_name = f"{patient['last_name']} {patient['first_name']} {patient.get('middle_name', '')}"
        print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ID {patient['id']}, {full_name}")
        return patient['id']
    elif response.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in response.text:
        print("‚ö†Ô∏è –ü–∞—Ü–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –µ–≥–æ...")
        # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        search_response = requests.get(f"{BASE_URL}/api/v1/patients/search", 
                                     params={"phone": "+998901234999"}, 
                                     headers=headers)
        if search_response.status_code == 200:
            patients = search_response.json()
            if patients:
                patient_id = patients[0]['id']
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ü–∏–µ–Ω—Ç: ID {patient_id}")
                return patient_id
    
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {response.status_code}")
    print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    return None

def create_test_visit(token, patient_id):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç —á–µ—Ä–µ–∑ API –∫–æ—Ä–∑–∏–Ω—ã"""
    print("üè• –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç...")
    
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    
    cart_data = {
        "patient_id": patient_id,
        "visits": [
            {
                "doctor_id": None,
                "services": [
                    {"service_id": "K01", "quantity": 1}
                ],
                "visit_date": date.today().isoformat(),
                "visit_time": None,
                "department": "cardiology",
                "notes": None
            }
        ],
        "discount_mode": "none",
        "payment_method": "cash",
        "notes": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ API"
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: {json.dumps(cart_data, indent=2, ensure_ascii=False)}")
    
    response = requests.post(f"{BASE_URL}/api/v1/registrar/cart", json=cart_data, headers=headers)
    
    print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    print(f"üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –í–∏–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   Invoice ID: {result.get('invoice_id')}")
        print(f"   Visit IDs: {result.get('visit_ids')}")
        print(f"   –°—É–º–º–∞: {result.get('total_amount')}")
        return result
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        try:
            error_data = response.json()
            print(f"   JSON –æ—à–∏–±–∫–∞: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
        except:
            pass
        return None

def check_today_queues(token):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{BASE_URL}/api/v1/registrar/queues/today", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        total_entries = sum(len(queue.get('entries', [])) for queue in data.get('queues', []))
        print(f"‚úÖ –û—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω—ã: {data.get('total_queues', 0)} –æ—á–µ—Ä–µ–¥–µ–π, {total_entries} –∑–∞–ø–∏—Å–µ–π")
        
        for queue in data.get('queues', []):
            queue_name = queue.get('queue_name', 'Unknown')
            entries_count = len(queue.get('entries', []))
            print(f"   üìä {queue_name}: {entries_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
            for i, entry in enumerate(queue.get('entries', [])[-3:]):
                print(f"      {i+1}. ID:{entry.get('id')} - {entry.get('patient_fio')} ({entry.get('created_at', 'N/A')})")
        
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    print("=" * 60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_auth_token()
    if not token:
        return
    
    print("\n" + "=" * 60)
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
    print("üìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –°–û–ó–î–ê–ù–ò–Ø:")
    queues_before = check_today_queues(token)
    total_before = sum(len(q.get('entries', [])) for q in queues_before.get('queues', [])) if queues_before else 0
    
    print("\n" + "=" * 60)
    
    # 3. –°–æ–∑–¥–∞—ë–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patient_id = create_test_patient(token)
    if not patient_id:
        return
    
    print("\n" + "=" * 60)
    
    # 4. –°–æ–∑–¥–∞—ë–º –≤–∏–∑–∏—Ç
    visit_result = create_test_visit(token, patient_id)
    
    print("\n" + "=" * 60)
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    print("üìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø:")
    queues_after = check_today_queues(token)
    total_after = sum(len(q.get('entries', [])) for q in queues_after.get('queues', [])) if queues_after else 0
    
    print("\n" + "=" * 60)
    print("üìà –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ó–∞–ø–∏—Å–µ–π –¥–æ: {total_before}")
    print(f"   –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ: {total_after}")
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {total_after - total_before}")
    
    if visit_result and total_after > total_before:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏!")
    elif visit_result and total_after == total_before:
        print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ù–ï –ø–æ—è–≤–∏–ª–∞—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏!")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏!")

if __name__ == "__main__":
    main()
