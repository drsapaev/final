#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –∫–ª–∏–Ω–∏–∫–∏
"""
import json
import time
import urllib.parse
import urllib.request

BASE_URL = "http://127.0.0.1:8000"


def test_login():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω"""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    login_attempts = [
        {"username": "admin", "password": "admin123"},
        {"username": "test", "password": "test"},
        {"username": "user", "password": "user"}
    ]

    for login_data in login_attempts:
        try:
            form_data = urllib.parse.urlencode(login_data).encode("utf-8")
            req = urllib.request.Request(login_url, data=form_data)
            req.add_header("Content-Type", "application/x-www-form-urlencoded")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    token_data = json.loads(response_text)
                    token = token_data["access_token"]
                    print(f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω —Å {login_data['username']}")
                    return token
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —Å {login_data['username']}: {e}")
            continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    print("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)")
    return None


def test_create_patient(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞...")

    patient_data = {
        "first_name": "–ò–≤–∞–Ω",
        "last_name": "–ü–µ—Ç—Ä–æ–≤",
        "birth_date": "1990-01-01",
        "gender": "M",
        "phone": "+998901234567",
    }

    patient_url = f"{BASE_URL}/api/v1/patients/patients"

    try:
        req = urllib.request.Request(
            patient_url, data=json.dumps(patient_data).encode("utf-8")
        )
        req.add_header("Content-Type", "application/json")
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                response_text = response.read().decode("utf-8")
                patient = json.loads(response_text)
                print(
                    f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {patient['first_name']} {patient['last_name']} (ID: {patient['id']})"
                )
                return patient["id"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        return None


def test_create_visit(token, patient_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞...")

    visit_data = {"patient_id": patient_id, "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"}

    visit_url = f"{BASE_URL}/api/v1/visits/visits"

    try:
        req = urllib.request.Request(
            visit_url, data=json.dumps(visit_data).encode("utf-8")
        )
        req.add_header("Content-Type", "application/json")
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status in [200, 201]:  # 200 OK –∏–ª–∏ 201 Created
                response_text = response.read().decode("utf-8")
                visit = json.loads(response_text)
                print(
                    f"‚úÖ –í–∏–∑–∏—Ç —Å–æ–∑–¥–∞–Ω: ID {visit['id']} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {visit['patient_id']}"
                )
                return visit["id"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {response.read().decode('utf-8')}")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {e}")
        return None


def test_queue_operations(token, visit_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—á–µ—Ä–µ–¥—å—é"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—á–µ—Ä–µ–¥—å—é...")

    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
    print("  üìä –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏...")
    today = time.strftime("%Y-%m-%d")
    queue_url = f"{BASE_URL}/api/v1/queue/stats?department=THERAPY&date={today}"

    try:
        req = urllib.request.Request(queue_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                queue_state = json.loads(response_text)
                print(f"    ‚úÖ –û—á–µ—Ä–µ–¥—å –ø–æ–ª—É—á–µ–Ω–∞: {queue_state}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")
        return False


def test_online_queue(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å...")

    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏
    print("  üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...")
    today = time.strftime("%Y-%m-%d")
    stats_url = f"{BASE_URL}/api/v1/online-queue/stats?department=THERAPY&date={today}"

    try:
        req = urllib.request.Request(stats_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                stats = json.loads(response_text)
                print(f"    ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def test_appointments(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞–º–∏"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞–º–∏...")

    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—ë–º–æ–≤
    print("  üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏—ë–º–æ–≤...")
    today = time.strftime("%Y-%m-%d")
    appointments_url = (
        f"{BASE_URL}/api/v1/appointments/stats?department=THERAPY&date={today}"
    )

    try:
        req = urllib.request.Request(appointments_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                appointments = json.loads(response_text)
                print(f"    ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—ë–º–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞: {appointments}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—ë–º–æ–≤: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—ë–º–æ–≤: {e}")
        return False


def test_display_board(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥"""
    print("\nüì∫ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥...")

    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥–∞
    print("  üìä –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥–∞...")
    today = time.strftime("%Y-%m-%d")
    board_url = f"{BASE_URL}/api/v1/board/state?department=THERAPY&date={today}"

    try:
        req = urllib.request.Request(board_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                board_state = json.loads(response_text)
                print(f"    ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ: {board_state}")
                return True
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥–∞: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥–∞: {e}")
        return False


def test_printing(token, visit_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—á–∞—Ç–∏"""
    print("\nüñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—á–∞—Ç–∏...")

    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–µ—Ç–∞ PDF
    print("  üé´ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–ª–µ—Ç PDF...")
    today = time.strftime("%Y-%m-%d")
    ticket_url = (
        f"{BASE_URL}/api/v1/print/ticket.pdf?department=THERAPY&ticket_number=1"
    )

    try:
        req = urllib.request.Request(ticket_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                content_type = response.headers.get("content-type", "")
                if "application/pdf" in content_type:
                    print(
                        f"    ‚úÖ –ë–∏–ª–µ—Ç PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(response.read())} –±–∞–π—Ç)"
                    )
                    return True
                else:
                    print(f"    ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ PDF: {content_type}")
                    return False
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–∞: {response.read().decode('utf-8')}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–∞: {e}")
        return False


def test_public_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    public_endpoints = [
        "/api/v1/health",
        "/api/v1/status",
        "/api/v1/queue/stats?department=general&date=2024-01-01",
        "/api/v1/appointments/stats?department=general&date=2024-01-01"
    ]
    
    success_count = 0
    for endpoint in public_endpoints:
        try:
            req = urllib.request.Request(f"{BASE_URL}{endpoint}")
            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    print(f"‚úÖ {endpoint}: OK")
                    success_count += 1
                else:
                    print(f"‚ö†Ô∏è {endpoint}: HTTP {response.status}")
        except Exception as e:
            print(f"‚ö†Ô∏è {endpoint}: {e}")
    
    print(f"\nüìä –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {success_count}/{len(public_endpoints)} —Ä–∞–±–æ—Ç–∞—é—Ç")
    return success_count > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 70)

    # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    token = test_login()
    if not token:
        print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã)")
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        test_public_endpoints()
        return

    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patient_id = test_create_patient(token)
    if not patient_id:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        return

    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
    visit_id = test_create_visit(token, patient_id)
    if not visit_id:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç")
        return

    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
    queue_success = test_queue_operations(token, visit_id)

    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏
    online_success = test_online_queue(token)

    # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–æ–≤
    appointments_success = test_appointments(token)

    # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥–∞
    board_success = test_display_board(token)

    # –®–∞–≥ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏
    print_success = test_printing(token, visit_id)

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –û–ß–ï–†–ï–î–ï–ô:")
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {'–£–°–ü–ï–®–ù–û' if patient_id else '–û–®–ò–ë–ö–ê'}")
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞: {'–£–°–ü–ï–®–ù–û' if visit_id else '–û–®–ò–ë–ö–ê'}")
    print(f"  ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—á–µ—Ä–µ–¥—å—é: {'–£–°–ü–ï–®–ù–û' if queue_success else '–û–®–ò–ë–ö–ê'}")
    print(f"  ‚úÖ –û–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å: {'–£–°–ü–ï–®–ù–û' if online_success else '–û–®–ò–ë–ö–ê'}")
    print(
        f"  ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞–º–∏: {'–£–°–ü–ï–®–ù–û' if appointments_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(f"  ‚úÖ –î–∏—Å–ø–ª–µ–π-–±–æ—Ä–¥: {'–£–°–ü–ï–®–ù–û' if board_success else '–û–®–ò–ë–ö–ê'}")
    print(f"  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏: {'–£–°–ü–ï–®–ù–û' if print_success else '–û–®–ò–ë–ö–ê'}")

    success_count = sum(
        [
            bool(patient_id),
            bool(visit_id),
            queue_success,
            online_success,
            appointments_success,
            board_success,
            print_success,
        ]
    )
    total_count = 7

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 70)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
