#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫–∏
"""
import json
import time
import urllib.parse
import urllib.request
from datetime import datetime

BASE_URL = "http://127.0.0.1:8000"


def test_login_success():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω"""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)

                if "access_token" in token_data and "token_type" in token_data:
                    print(
                        f"    ‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω: –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω —Ç–∏–ø–∞ {token_data['token_type']}"
                    )
                    return token_data["access_token"]
                else:
                    print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {token_data}")
                    return None
            else:
                print(
                    f"    ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status} - {response.read().decode('utf-8')}"
                )
                return None
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        return None


def test_login_invalid_credentials():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\n‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "invalid_user", "password": "wrong_password"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 401:
                print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω (401)")
                return True
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
                return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_get_profile(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

    profile_url = f"{BASE_URL}/api/v1/auth/me"

    try:
        req = urllib.request.Request(profile_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                profile = json.loads(response_text)

                if "username" in profile:
                    print(f"    ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile['username']}")
                    if "role" in profile:
                        print(f"    ‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile['role']}")
                    if "is_active" in profile:
                        print(f"    ‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {profile['is_active']}")
                    return True
                else:
                    print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è: {profile}")
                    return False
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return False


def test_protected_endpoint_with_token(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É —Å —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É —Å —Ç–æ–∫–µ–Ω–æ–º...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    patients_url = f"{BASE_URL}/api/v1/patients/patients"

    try:
        req = urllib.request.Request(patients_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                print("    ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É —Ä–∞–∑—Ä–µ—à—ë–Ω")
                return True
            else:
                print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return False


def test_protected_endpoint_without_token():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    patients_url = f"{BASE_URL}/api/v1/patients/patients"

    try:
        req = urllib.request.Request(patients_url)

        with urllib.request.urlopen(req) as response:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response.status}")
            return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_invalid_token():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    patients_url = f"{BASE_URL}/api/v1/patients/patients"
    invalid_token = "invalid_token_12345"

    try:
        req = urllib.request.Request(patients_url)
        req.add_header("Authorization", f"Bearer {invalid_token}")

        with urllib.request.urlopen(req) as response:
            print(
                f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {response.status}"
            )
            return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_token_expiration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞...")

    # –°–æ–∑–¥–∞—ë–º "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π" —Ç–æ–∫–µ–Ω (–ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω—è–µ–º –µ–≥–æ)
    expired_token = "expired_token_" + str(int(time.time()))

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º" —Ç–æ–∫–µ–Ω–æ–º
    patients_url = f"{BASE_URL}/api/v1/patients/patients"

    try:
        req = urllib.request.Request(patients_url)
        req.add_header("Authorization", f"Bearer {expired_token}")

        with urllib.request.urlopen(req) as response:
            print(
                f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {response.status}"
            )
            return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_role_based_access(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π"""
    print("\nüëë –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π...")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_url = f"{BASE_URL}/api/v1/auth/me"

    try:
        req = urllib.request.Request(profile_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                profile = json.loads(response_text)

                user_role = profile.get("role", "Unknown")
                print(f"    ‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}")

                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                if user_role in ["Admin", "admin"]:
                    # –ê–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º
                    admin_endpoints = [
                        ("/api/v1/patients/patients", {}),
                        ("/api/v1/visits/visits", {}),
                        (
                            "/api/v1/queue/stats",
                            {
                                "department": "THERAPY",
                                "date": datetime.now().strftime("%Y-%m-%d"),
                            },
                        ),
                        (
                            "/api/v1/reports/summary",
                            {
                                "department": "THERAPY",
                                "date": datetime.now().strftime("%Y-%m-%d"),
                            },
                        ),
                    ]

                    for endpoint, params in admin_endpoints:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        if params:
                            param_strings = [f"{k}={v}" for k, v in params.items()]
                            endpoint_url = (
                                f"{BASE_URL}{endpoint}?{'&'.join(param_strings)}"
                            )
                        else:
                            endpoint_url = f"{BASE_URL}{endpoint}"

                        req = urllib.request.Request(endpoint_url)
                        req.add_header("Authorization", f"Bearer {token}")

                        try:
                            with urllib.request.urlopen(req) as response:
                                if response.status in [200, 201, 204]:
                                    print(f"        ‚úÖ –î–æ—Å—Ç—É–ø –∫ {endpoint} —Ä–∞–∑—Ä–µ—à—ë–Ω")
                                else:
                                    print(
                                        f"        ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {endpoint}: {response.status}"
                                    )
                        except Exception as e:
                            print(f"        ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {endpoint}: {e}")

                    return True
                else:
                    print(
                        f"    ‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –¥–ª—è —Ä–æ–ª–∏ '{user_role}' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"
                    )
                    return True
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π: {e}")
        return False


def test_public_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º...")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    root_url = f"{BASE_URL}/"

    try:
        req = urllib.request.Request(root_url)

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                root_data = json.loads(response_text)

                if "status" in root_data and root_data["status"] == "ok":
                    print("    ‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    return True
                else:
                    print(
                        f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {root_data}"
                    )
                    return False
            else:
                print(
                    f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {response.status}"
                )
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 80)

    # –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
    token = test_login_success()
    if not token:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return

    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞
    invalid_login_success = test_login_invalid_credentials()

    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_success = test_get_profile(token)

    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º —Å —Ç–æ–∫–µ–Ω–æ–º
    protected_with_token_success = test_protected_endpoint_with_token(token)

    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    protected_without_token_success = test_protected_endpoint_without_token()

    # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    invalid_token_success = test_invalid_token()

    # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä—É–µ–º "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π" —Ç–æ–∫–µ–Ω
    expired_token_success = test_token_expiration()

    # –®–∞–≥ 8: –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π
    role_based_success = test_role_based_access(token)

    # –®–∞–≥ 9: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    public_endpoints_success = test_public_endpoints()

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω: {'–£–°–ü–ï–®–ù–û' if token else '–û–®–ò–ë–ö–ê'}")
    print(
        f"  ‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {'–£–°–ü–ï–®–ù–û' if invalid_login_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {'–£–°–ü–ï–®–ù–û' if profile_success else '–û–®–ò–ë–ö–ê'}")
    print(
        f"  ‚úÖ –î–æ—Å—Ç—É–ø —Å —Ç–æ–∫–µ–Ω–æ–º: {'–£–°–ü–ï–®–ù–û' if protected_with_token_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(
        f"  ‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {'–£–°–ü–ï–®–ù–û' if protected_without_token_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(
        f"  ‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {'–£–°–ü–ï–®–ù–û' if invalid_token_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(
        f"  ‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {'–£–°–ü–ï–®–ù–û' if expired_token_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(
        f"  ‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π: {'–£–°–ü–ï–®–ù–û' if role_based_success else '–û–®–ò–ë–ö–ê'}"
    )
    print(
        f"  ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {'–£–°–ü–ï–®–ù–û' if public_endpoints_success else '–û–®–ò–ë–ö–ê'}"
    )

    success_count = sum(
        [
            bool(token),
            invalid_login_success,
            profile_success,
            protected_with_token_success,
            protected_without_token_success,
            invalid_token_success,
            expired_token_success,
            role_based_success,
            public_endpoints_success,
        ]
    )
    total_count = 9

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 80)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
