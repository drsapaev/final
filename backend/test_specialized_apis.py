#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""
import httpx
import time
import json

def test_specialized_apis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ API...")

    # 1. –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    for i in range(30):
        try:
            response = httpx.get("http://localhost:8000/_routes", timeout=1)
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                break
        except Exception:
            time.sleep(1)
    else:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        return

    try:
        with httpx.Client(timeout=10) as client:
            # 2. –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω
            print("\n2. –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ –∞–¥–º–∏–Ω...")
            login_data = {
                "username": "admin",
                "password": "admin123",
                "grant_type": "password"
            }
            login_response = client.post(
                "http://localhost:8000/api/v1/auth/login",
                data=login_data
            )

            if login_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {login_response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {login_response.text}")
                return

            token_data = login_response.json()
            access_token = token_data.get("access_token")
            if not access_token:
                print("‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç access_token")
                return

            print(f"‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω: {access_token[:20]}...")
            headers = {"Authorization": f"Bearer {access_token}"}

            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")

            # –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è
            print("\nü´Ä –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            endpoints = [
                ("GET", "/api/v1/cardio/ecg"),
                ("GET", "/api/v1/cardio/blood-tests"),
                ("GET", "/api/v1/cardio/risk-assessment"),
            ]

            for method, endpoint in endpoints:
                try:
                    response = client.request(method, f"http://localhost:8000{endpoint}", headers=headers)
                    print(f"   {method} {endpoint}: {response.status_code} {'‚úÖ' if response.status_code == 200 else '‚ö†Ô∏è'}")
                except Exception as e:
                    print(f"   {method} {endpoint}: –û—à–∏–±–∫–∞ - {e}")

            # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è
            print("\nüß¥ –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            endpoints = [
                ("GET", "/api/v1/derma/examinations"),
                ("GET", "/api/v1/derma/procedures"),
                ("GET", "/api/v1/derma/photo-gallery"),
            ]

            for method, endpoint in endpoints:
                try:
                    response = client.request(method, f"http://localhost:8000{endpoint}", headers=headers)
                    print(f"   {method} {endpoint}: {response.status_code} {'‚úÖ' if response.status_code == 200 else '‚ö†Ô∏è'}")
                except Exception as e:
                    print(f"   {method} {endpoint}: –û—à–∏–±–∫–∞ - {e}")

            # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
            print("\nü¶∑ –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            endpoints = [
                ("GET", "/api/v1/dental/examinations"),
                ("GET", "/api/v1/dental/treatments"),
                ("GET", "/api/v1/dental/prosthetics"),
                ("GET", "/api/v1/dental/xray"),
            ]

            for method, endpoint in endpoints:
                try:
                    response = client.request(method, f"http://localhost:8000{endpoint}", headers=headers)
                    print(f"   {method} {endpoint}: {response.status_code} {'‚úÖ' if response.status_code == 200 else '‚ö†Ô∏è'}")
                except Exception as e:
                    print(f"   {method} {endpoint}: –û—à–∏–±–∫–∞ - {e}")

            # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
            print("\nüß™ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            endpoints = [
                ("GET", "/api/v1/lab/tests"),
                ("GET", "/api/v1/lab/results"),
                ("GET", "/api/v1/lab/reference-ranges"),
                ("GET", "/api/v1/lab/equipment"),
                ("GET", "/api/v1/lab/reports"),
            ]

            for method, endpoint in endpoints:
                try:
                    response = client.request(method, f"http://localhost:8000{endpoint}", headers=headers)
                    print(f"   {method} {endpoint}: {response.status_code} {'‚úÖ' if response.status_code == 200 else '‚ö†Ô∏è'}")
                except Exception as e:
                    print(f"   {method} {endpoint}: –û—à–∏–±–∫–∞ - {e}")

            # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS
            print("\n4. –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ OPTIONS –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç
                cors_response = client.options(
                    "http://localhost:8000/api/v1/patients",
                    headers={"Origin": "http://localhost:5173", "Access-Control-Request-Method": "GET"}
                )
                if cors_response.status_code in [200, 204]:
                    print("   ‚úÖ CORS OPTIONS —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"   ‚ö†Ô∏è CORS OPTIONS: {cors_response.status_code}")
            except Exception as e:
                print(f"   ‚ùå CORS —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")

            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API...")
    print("=" * 60)
    test_specialized_apis()
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
