#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å Python 3.11.10
"""
import subprocess
import sys
import os

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python"""
    print(f"üêç –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Python: {sys.version}")
    if sys.version_info.major == 3 and sys.version_info.minor == 11:
        print("‚úÖ Python 3.11 - —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è")
        return True
    else:
        print(f"‚ö†Ô∏è  Python {sys.version_info.major}.{sys.version_info.minor} - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª requirements.txt"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
    req_paths = ["requirements.txt", "../requirements.txt"]
    req_path = None
    
    for path in req_paths:
        if os.path.exists(path):
            req_path = path
            break
    
    if not req_path:
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(req_path, "r") as f:
        requirements = f.read().strip().split("\n")
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(requirements)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    critical_deps = [
        "fastapi",
        "uvicorn", 
        "sqlalchemy",
        "alembic",
        "pydantic",
        "python-multipart",
        "python-jose",
        "passlib",
        "argon2-cffi"
    ]
    
    found_deps = []
    for req in requirements:
        if req.strip() and not req.startswith("#"):
            dep_name = req.split("==")[0].split(">=")[0].split("<=")[0].split("~=")[0].strip()
            if dep_name.lower() in critical_deps:
                found_deps.append(dep_name)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(found_deps)}/{len(critical_deps)}")
    for dep in found_deps:
        print(f"  - {dep}")
    
    missing_deps = set(critical_deps) - set(found_deps)
    if missing_deps:
        print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
    
    return len(found_deps) >= len(critical_deps) * 0.8  # 80% –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
    
    test_modules = [
        "fastapi",
        "uvicorn",
        "sqlalchemy",
        "alembic",
        "pydantic",
        "passlib",
        "argon2"
    ]
    
    success_count = 0
    for module in test_modules:
        try:
            __import__(module)
            print(f"  ‚úÖ {module}")
            success_count += 1
        except ImportError as e:
            print(f"  ‚ùå {module}: {e}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  {module}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞: {success_count}/{len(test_modules)} –º–æ–¥—É–ª–µ–π")
    return success_count >= len(test_modules) * 0.8

def check_docker_compatibility():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Docker"""
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Docker...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    dockerfile_paths = ["../ops/backend.Dockerfile", "ops/backend.Dockerfile", "../backend.Dockerfile"]
    dockerfile_path = None
    
    for path in dockerfile_paths:
        if os.path.exists(path):
            dockerfile_path = path
            break
    
    if not dockerfile_path:
        print("‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(dockerfile_path, "r") as f:
        content = f.read()
    
    if "python:3.11.10-slim" in content:
        print("‚úÖ Dockerfile –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Python 3.11.10")
        return True
    elif "python:3.14" in content:
        print("‚ùå Dockerfile –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Python 3.14")
        return False
    else:
        print("‚ö†Ô∏è  Dockerfile –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥—É—é –≤–µ—Ä—Å–∏—é Python")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 50)
    
    checks = [
        ("–í–µ—Ä—Å–∏—è Python", check_python_version),
        ("Requirements.txt", check_requirements),
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_imports),
        ("Docker —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", check_docker_compatibility)
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        try:
            if check_func():
                passed += 1
                print(f"‚úÖ {name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {name}: –ù–ï –ü–†–û–®–ï–õ")
        except Exception as e:
            print(f"‚ùå {name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å Python 3.11.10")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
        return 1

if __name__ == "__main__":
    sys.exit(main())
