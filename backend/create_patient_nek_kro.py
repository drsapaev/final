#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ "–Ω–µ–∫ –∫—Ä–æ" —Å –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏
–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:
- –§–ò–û: –Ω–µ–∫ –∫—Ä–æ
- –í–æ–∑—Ä–∞—Å—Ç: 33 –≥–æ–¥–∞ (–≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è 1992)
- –¢–µ–ª–µ—Ñ–æ–Ω: +998 (92) 365-86-63
- –ê–¥—Ä–µ—Å: –∂–¥–ª–æ—Ä–ø–∞ 654
- –£—Å–ª—É–≥–∏: D01, D12 (–¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ)
- –¢–∏–ø: –ü–ª–∞—Ç–Ω—ã–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import date, datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.db.session import _get_db_url_from_env_or_settings
from app.models.patient import Patient
from app.models.appointment import Appointment
from app.models.service import Service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_patient_nek_kro():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º"""

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_url = _get_db_url_from_env_or_settings()
        engine = create_engine(db_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

        with SessionLocal() as db:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ '–Ω–µ–∫ –∫—Ä–æ'...")

            # –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            patient_data = {
                'first_name': '–ù–µ–∫',
                'last_name': '–ö—Ä–æ',
                'middle_name': None,
                'birth_date': date(1992, 1, 1),  # 33 –≥–æ–¥–∞
                'phone': '+998923658663',
                'address': '–∂–¥–ª–æ—Ä–ø–∞ 654',
                'doc_type': 'passport',
                'doc_number': '–ù–ï–ò–ó–í–ï–°–¢–ï–ù'
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç
            existing_patient = db.query(Patient).filter(
                Patient.first_name == patient_data['first_name'],
                Patient.last_name == patient_data['last_name'],
                Patient.phone == patient_data['phone']
            ).first()

            if existing_patient:
                logger.info(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={existing_patient.id}")
                patient = existing_patient
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                patient = Patient(**patient_data)
                db.add(patient)
                db.commit()
                db.refresh(patient)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç: ID={patient.id}, {patient.short_name()}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
            services = db.query(Service).filter(
                Service.service_code.in_(['D01', 'D12']),
                Service.active == True
            ).all()

            if not services:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—Å–ª—É–≥–∏ —Å –∫–æ–¥–∞–º–∏ D01, D12. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ seed_services.py")
                return False

            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —É—Å–ª—É–≥–∏: {[s.name for s in services]}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º
            appointment_data = {
                'patient_id': patient.id,
                'department': 'dermatology',
                'appointment_date': date.today(),
                'appointment_time': '10:00',  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
                'status': 'scheduled',
                'visit_type': 'paid',  # –ü–ª–∞—Ç–Ω—ã–π
                'payment_type': 'cash',
                'services': [s.name for s in services],  # –ù–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥
                'payment_amount': sum(s.price or 0 for s in services),
                'payment_currency': 'UZS',
                'notes': '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ–∫ –∫—Ä–æ'
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            existing_appointment = db.query(Appointment).filter(
                Appointment.patient_id == patient.id,
                Appointment.appointment_date == date.today(),
                Appointment.department == 'dermatology'
            ).first()

            if existing_appointment:
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ID={existing_appointment.id}")
                appointment = existing_appointment
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                appointment = Appointment(**appointment_data)
                db.add(appointment)
                db.commit()
                db.refresh(appointment)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º: ID={appointment.id}")

            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.info("üìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            logger.info(f"  üë§ –ü–∞—Ü–∏–µ–Ω—Ç: {patient.short_name()} (ID: {patient.id})")
            logger.info(f"  üìû –¢–µ–ª–µ—Ñ–æ–Ω: {patient.phone}")
            logger.info(f"  üìç –ê–¥—Ä–µ—Å: {patient.address}")
            logger.info(f"  üè• –û—Ç–¥–µ–ª–µ–Ω–∏–µ: {appointment.department}")
            logger.info(f"  üìÖ –î–∞—Ç–∞: {appointment.appointment_date}")
            logger.info(f"  ‚è∞ –í—Ä–µ–º—è: {appointment.appointment_time}")
            logger.info(f"  üí∞ –°—É–º–º–∞: {appointment.payment_amount} {appointment.payment_currency}")
            logger.info(f"  üè∑Ô∏è –£—Å–ª—É–≥–∏: {', '.join(appointment.services)}")
            logger.info(f"  üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {appointment.visit_type}")

            return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    success = create_patient_nek_kro()
    sys.exit(0 if success else 1)
