#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import urllib.request
import urllib.parse
import json

BASE_URL = "http://127.0.0.1:8000"

def test_transactions_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    print("üöÄ –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    print("=" * 50)
    
    # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
    print("üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω...")
    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {
        "username": "admin",
        "password": "admin"
    }
    
    try:
        form_data = urllib.parse.urlencode(login_data).encode('utf-8')
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode('utf-8')
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.read().decode('utf-8')}")
                return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
        return
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print("\nüí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
    urls_to_test = [
        f"{BASE_URL}/api/v1/webhooks/webhooks/payment/transactions",
        f"{BASE_URL}/api/v1/webhooks/webhooks/payment/transactions?skip=0&limit=10",
        f"{BASE_URL}/api/v1/webhooks/webhooks/payment/transactions?skip=0&limit=1"
    ]
    
    for i, url in enumerate(urls_to_test, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: {url}")
        
        try:
            req = urllib.request.Request(url)
            req.add_header('Authorization', f'Bearer {token}')
            req.add_header('Accept', 'application/json')
            
            with urllib.request.urlopen(req) as response:
                print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
                print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
                
                response_text = response.read().decode('utf-8')
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")
                
                if response.status == 200:
                    try:
                        data = json.loads(response_text)
                        print(f"‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {type(data)}")
                        if isinstance(data, list):
                            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data)}")
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if hasattr(e, 'code'):
                print(f"üì° HTTP –∫–æ–¥: {e.code}")
            if hasattr(e, 'read'):
                try:
                    error_text = e.read().decode('utf-8')
                    print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error_text}")
                except:
                    pass

if __name__ == "__main__":
    test_transactions_endpoint()
