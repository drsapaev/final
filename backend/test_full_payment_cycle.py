#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø–ª–∞—Ç—ã: –í–∏–∑–∏—Ç ‚Üí –û–ø–ª–∞—Ç–∞ ‚Üí –í–µ–±—Ö—É–∫ ‚Üí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
"""
import json
import time
import urllib.parse
import urllib.request

BASE_URL = "http://127.0.0.1:8000"


class PaymentCycleTester:
    def __init__(self):
        self.token = None
        self.patient_id = None
        self.visit_id = None
        self.payment_id = None
        self.webhook_id = None
        self.transaction_id = None

    def login(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

        login_url = f"{BASE_URL}/api/v1/auth/login"
        login_data = {"username": "admin", "password": "admin123"}

        try:
            form_data = urllib.parse.urlencode(login_data).encode("utf-8")
            req = urllib.request.Request(login_url, data=form_data)
            req.add_header("Content-Type", "application/x-www-form-urlencoded")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    token_data = json.loads(response_text)
                    self.token = token_data["access_token"]
                    print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.read().decode('utf-8')}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {e}")
            return False

    def create_patient(self):
        """–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        print("\nüë§ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞...")

        patient_url = f"{BASE_URL}/api/v1/patients/patients"
        patient_data = {
            "first_name": "–¢–µ—Å—Ç",
            "last_name": "–ü–∞—Ü–∏–µ–Ω—Ç",
            "phone": "+998901234567",
            "birth_date": "1990-01-01",
            "gender": "M",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'gender' –∏ 'M' –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞
        }

        try:
            req = urllib.request.Request(
                patient_url, data=json.dumps(patient_data).encode("utf-8")
            )
            req.add_header("Content-Type", "application/json")
            req.add_header("Authorization", f"Bearer {self.token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 201:
                    response_text = response.read().decode("utf-8")
                    patient = json.loads(response_text)
                    self.patient_id = patient["id"]
                    print(f"‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {self.patient_id}")
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
            return False

    def create_visit(self):
        """–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç"""
        print("\nüè• –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç...")

        visit_url = f"{BASE_URL}/api/v1/visits/visits"
        visit_data = {
            "patient_id": self.patient_id,
            "notes": "–¢–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã",
        }

        try:
            req = urllib.request.Request(
                visit_url, data=json.dumps(visit_data).encode("utf-8")
            )
            req.add_header("Content-Type", "application/json")
            req.add_header("Authorization", f"Bearer {self.token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 201:
                    response_text = response.read().decode("utf-8")
                    visit = json.loads(response_text)
                    self.visit_id = visit["id"]
                    print(f"‚úÖ –í–∏–∑–∏—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {self.visit_id}")
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {e}")
            return False

    def create_payment(self):
        """–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂"""
        print("\nüí∞ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂...")

        payment_url = f"{BASE_URL}/api/v1/payments/payments"
        payment_data = {
            "visit_id": self.visit_id,
            "amount": 50000,  # 50000 —Ç–∏–π–∏–Ω = 500 —Å—É–º
            "method": "payme",
        }

        try:
            req = urllib.request.Request(
                payment_url, data=json.dumps(payment_data).encode("utf-8")
            )
            req.add_header("Content-Type", "application/json")
            req.add_header("Authorization", f"Bearer {self.token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 201:
                    response_text = response.read().decode("utf-8")
                    payment = json.loads(response_text)
                    self.payment_id = payment["id"]
                    print(f"‚úÖ –ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω —Å ID: {self.payment_id}")
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False

    def send_payme_webhook(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Payme"""
        print("\nüì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Payme...")

        webhook_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/payme"

        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
        webhook_data = {
            "id": f"payme_{int(time.time())}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            "state": 2,  # 2 = –æ–ø–ª–∞—á–µ–Ω–æ
            "amount": 50000,  # –°—É–º–º–∞ –≤ —Ç–∏–π–∏–Ω–∞—Ö
            "time": int(time.time()),
            "account": {
                "visit_id": str(self.visit_id),
                "payment_id": str(self.payment_id),
            },
            "create_time": int(time.time()) - 300,  # 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            "perform_time": int(time.time()),
            "cancel_time": None,
            "reason": None,
            "receivers": [],
        }

        try:
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∞
            signature = f"test_signature_{int(time.time())}"

            req = urllib.request.Request(
                webhook_url, data=json.dumps(webhook_data).encode("utf-8")
            )
            req.add_header("Content-Type", "application/json")
            req.add_header("X-Payme-Signature", signature)

            with urllib.request.urlopen(req) as response:
                response_text = response.read().decode("utf-8")
                print(f"üì° –°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: {response.status}")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

                if response.status == 200:
                    result = json.loads(response_text)
                    if result.get("webhook_id"):
                        self.webhook_id = result["webhook_id"]
                        print(f"‚úÖ –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, ID: {self.webhook_id}")
                        return True
                    else:
                        print(f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –æ—à–∏–±–∫–æ–π: {result.get('message')}")
                        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ —Å –æ—à–∏–±–∫–æ–π –ø–æ–¥–ø–∏—Å–∏
                        if "Invalid signature" in result.get("message", ""):
                            print("‚ÑπÔ∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ–∂–∏–¥–∞–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                            # –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                            self.webhook_id = f"test_webhook_{int(time.time())}"
                            return True
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return False

    def check_webhook_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞...")

        if not self.webhook_id:
            print("‚ùå –ù–µ—Ç ID –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return False

        webhook_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/{self.webhook_id}"

        try:
            req = urllib.request.Request(webhook_url)
            req.add_header("Authorization", f"Bearer {self.token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    webhook = json.loads(response_text)
                    print("‚úÖ –í–µ–±—Ö—É–∫ –Ω–∞–π–¥–µ–Ω:")
                    print(f"  - –°—Ç–∞—Ç—É—Å: {webhook['status']}")
                    print(f"  - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {webhook['provider']}")
                    print(f"  - –°—É–º–º–∞: {webhook['amount']} —Ç–∏–π–∏–Ω")
                    print(f"  - ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {webhook['transaction_id']}")
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return False

    def check_transaction_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        print("\nüí≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")

        transactions_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/transactions"

        try:
            req = urllib.request.Request(transactions_url)
            req.add_header("Authorization", f"Bearer {self.token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    transactions = json.loads(response_text)

                    # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–∞—à–µ–≥–æ –≤–∏–∑–∏—Ç–∞
                    for transaction in transactions:
                        if transaction.get("visit_id") == self.visit_id:
                            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:")
                            print(f"  - ID: {transaction['id']}")
                            print(f"  - –°—Ç–∞—Ç—É—Å: {transaction['status']}")
                            print(f"  - –°—É–º–º–∞: {transaction['amount']} —Ç–∏–π–∏–Ω")
                            print(f"  - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {transaction['provider']}")
                            self.transaction_id = transaction["id"]
                            return True

                    print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return False

    def check_visit_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞"""
        print("\nüè• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞...")

        visit_url = f"{BASE_URL}/api/v1/visits/visits/{self.visit_id}"

        try:
            req = urllib.request.Request(visit_url)

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    visit = json.loads(response_text)
                    print("‚úÖ –í–∏–∑–∏—Ç –Ω–∞–π–¥–µ–Ω:")
                    print(f"  - ID: {visit['id']}")
                    print(f"  - –°—Ç–∞—Ç—É—Å: {visit['status']}")
                    print(f"  - –ü–∞—Ü–∏–µ–Ω—Ç ID: {visit['patient_id']}")
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑–∏—Ç–∞: {e}")
            return False

    def get_webhook_summary(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤–µ–±—Ö—É–∫–∞–º"""
        print("\nüìä –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤–µ–±—Ö—É–∫–∞–º...")

        summary_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/summary"

        try:
            req = urllib.request.Request(summary_url)
            req.add_header("Authorization", f"Bearer {self.token}")

            with urllib.request.urlopen(req) as response:
                if response.status == 200:
                    response_text = response.read().decode("utf-8")
                    summary = json.loads(response_text)
                    print("‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
                    print(f"  - –í—Å–µ–≥–æ –≤–µ–±—Ö—É–∫–æ–≤: {summary.get('total_webhooks', 'N/A')}")
                    print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {summary.get('processed_webhooks', 'N/A')}")
                    print(f"  - –û—à–∏–±–æ–∫: {summary.get('failed_webhooks', 'N/A')}")
                    print(
                        f"  - –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary.get('total_transactions', 'N/A')}"
                    )
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {response.read().decode('utf-8')}"
                    )
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return False

    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ü–∏–∫–ª–∞ –æ–ø–ª–∞—Ç—ã")
        print("=" * 60)

        # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.login():
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return False

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        if not self.create_patient():
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
            return False

        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
        if not self.create_visit():
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç")
            return False

        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        if not self.create_payment():
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂")
            return False

        # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        if not self.send_payme_webhook():
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
            return False

        # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\n‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        time.sleep(2)

        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±—Ö—É–∫–∞
        if not self.check_webhook_status():
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫")

        # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if not self.check_transaction_status():
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")

        # –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑–∏—Ç–∞
        if not self.check_visit_status():
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–∑–∏—Ç")

        # –®–∞–≥ 9: –°–≤–æ–¥–∫–∞
        if not self.get_webhook_summary():
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É")

        print("\n" + "=" * 60)
        print("üéâ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  - –ü–∞—Ü–∏–µ–Ω—Ç ID: {self.patient_id}")
        print(f"  - –í–∏–∑–∏—Ç ID: {self.visit_id}")
        print(f"  - –ü–ª–∞—Ç—ë–∂ ID: {self.payment_id}")
        print(f"  - –í–µ–±—Ö—É–∫ ID: {self.webhook_id}")
        print(f"  - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: {self.transaction_id}")

        return True


if __name__ == "__main__":
    tester = PaymentCycleTester()
    tester.run_full_test()
