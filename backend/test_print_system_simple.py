"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
from datetime import datetime
from sqlalchemy.orm import Session

from app.db.session import SessionLocal
from app.models.print_config import PrinterConfig, PrintTemplate
from app.crud import print_config as crud_print
from app.services.print_service import PrintService

def test_database_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ë–î...")
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä
        printer_data = {
            "name": "test_thermal_printer",
            "display_name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä",
            "printer_type": "ESC/POS",
            "connection_type": "network",
            "ip_address": "192.168.1.200",
            "port": 9100,
            "paper_width": 58,
            "encoding": "utf-8",
            "active": True,
            "is_default": True
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä
        existing = db.query(PrinterConfig).filter(PrinterConfig.name == printer_data["name"]).first()
        if existing:
            printer = existing
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏–Ω—Ç–µ—Ä")
        else:
            printer = PrinterConfig(**printer_data)
            db.add(printer)
            db.commit()
            db.refresh(printer)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä")
        
        print(f"   ID: {printer.id}")
        print(f"   –ò–º—è: {printer.display_name}")
        print(f"   –¢–∏–ø: {printer.printer_type}")
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {printer.connection_type}")
        
        return printer
        
    finally:
        db.close()

def test_template_rendering():
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    # –ü—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω —Ç–∞–ª–æ–Ω–∞
    template_content = """
========================================
      {{ clinic_name | upper }}
========================================
–¢–ê–õ–û–ù –û–ß–ï–†–ï–î–ò ‚Ññ {{ queue_number }}

–î–∞—Ç–∞: {{ date.strftime('%d.%m.%Y') }}
–í—Ä–µ–º—è: {{ time.strftime('%H:%M') }}

–í—Ä–∞—á: {{ doctor_name }}
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {{ specialty_name }}
{% if cabinet %}–ö–∞–±–∏–Ω–µ—Ç: {{ cabinet }}{% endif %}

–ü–∞—Ü–∏–µ–Ω—Ç: {{ patient_name or '–ù–µ —É–∫–∞–∑–∞–Ω' }}

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!
========================================
""".strip()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "clinic_name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –¢–ï–°–¢",
        "queue_number": "T001",
        "date": datetime.now(),
        "time": datetime.now(),
        "doctor_name": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.",
        "specialty_name": "–¢–µ—Ä–∞–ø–µ–≤—Ç",
        "cabinet": "205",
        "patient_name": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü."
    }
    
    try:
        from jinja2 import Environment
        env = Environment()
        template = env.from_string(template_content)
        rendered = template.render(**test_data)
        
        print("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω:")
        print("=" * 50)
        print(rendered)
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {e}")
        return False

def test_crud_operations():
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
        printers = crud_print.get_printer_configs(db, active_only=True)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {len(printers)}")
        
        if printers:
            printer = printers[0]
            print(f"   –ü–µ—Ä–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä: {printer.display_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            templates = crud_print.get_print_templates(db, active_only=True)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏
            job_data = {
                "printer_id": printer.id,
                "document_type": "ticket",
                "document_id": "TEST-CRUD-001",
                "status": "pending",
                "print_data": {
                    "queue_number": "CRUD-001",
                    "test": True
                }
            }
            
            job = crud_print.create_print_job(db, job_data)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—á–∞—Ç–∏: ID {job.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
            update_data = {
                "status": "completed",
                "completed_at": datetime.utcnow()
            }
            updated_job = crud_print.update_print_job(db, job.id, update_data)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è: {updated_job.status}")
            
            return True
        else:
            print("‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    finally:
        db.close()

def test_print_service():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—á–∞—Ç–∏"""
    print("\nüñ®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PrintService...")
    
    db = SessionLocal()
    try:
        service = PrintService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        printers = crud_print.get_printer_configs(db, active_only=True)
        
        if printers:
            printer = printers[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            status = service.get_printer_status(printer.name)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ '{printer.name}':")
            print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status['status']}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {status['message']}")
            
            # –¢–µ—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏
            test_data = {
                "clinic_name": "–¢–ï–°–¢–û–í–ê–Ø –ö–õ–ò–ù–ò–ö–ê",
                "queue_number": "SRV-001",
                "date": datetime.now(),
                "time": datetime.now(),
                "doctor_name": "–°–µ—Ä–≤–∏—Å–Ω—ã–π –í—Ä–∞—á",
                "specialty_name": "–¢–µ—Å—Ç–æ–ª–æ–≥–∏—è",
                "patient_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
            }
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã:")
            for key, value in test_data.items():
                if isinstance(value, datetime):
                    value = value.strftime('%d.%m.%Y %H:%M')
                print(f"   {key}: {value}")
            
            return True
        else:
            print("‚ö†Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
            
    finally:
        db.close()

def test_template_types():
    """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã (–∏–∑ API –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    template_types = [
        {"code": "ticket", "name": "–¢–∞–ª–æ–Ω –æ—á–µ—Ä–µ–¥–∏"},
        {"code": "prescription", "name": "–†–µ—Ü–µ–ø—Ç"},
        {"code": "certificate", "name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"},
        {"code": "payment_receipt", "name": "–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"},
        {"code": "lab_results", "name": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤"}
    ]
    
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    for doc_type in template_types:
        print(f"   {doc_type['code']}: {doc_type['name']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
    formats = [
        {"code": "ESC/POS", "name": "–¢–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä 58–º–º"},
        {"code": "A5", "name": "–õ–∞–∑–µ—Ä–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä A5"},
        {"code": "A4", "name": "–õ–∞–∑–µ—Ä–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä A4"}
    ]
    
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    for fmt in formats:
        print(f"   {fmt['code']}: {fmt['name']}")
    
    return True

def test_schemas_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º...")
    
    try:
        from app.schemas.print_config import (
            PrintResponse, PrintTicketRequest, PrintPrescriptionRequest,
            PrinterConfigOut, PrintTemplateOut, PrintJobOut
        )
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ö–µ–º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ö–µ–º—ã
        ticket_request = PrintTicketRequest(
            queue_number="SCHEMA-001",
            doctor_name="–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á",
            specialty_name="–¢–µ—Ä–∞–ø–∏—è",
            patient_name="–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç"
        )
        
        print("‚úÖ –°—Ö–µ–º–∞ PrintTicketRequest —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"   –ù–æ–º–µ—Ä: {ticket_request.queue_number}")
        print(f"   –í—Ä–∞—á: {ticket_request.doctor_name}")
        print(f"   –ü–∞—Ü–∏–µ–Ω—Ç: {ticket_request.patient_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –£–ü–†–û–©–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ï–ß–ê–¢–ò")
    print("=" * 60)
    
    results = []
    
    try:
        # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å—Ö–µ–º
        results.append(("–ò–º–ø–æ—Ä—Ç —Å—Ö–µ–º", test_schemas_import()))
        
        # 2. –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –ë–î
        results.append(("–ú–æ–¥–µ–ª–∏ –ë–î", test_database_models()))
        
        # 3. –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–æ–≤
        results.append(("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–æ–≤", test_template_rendering()))
        
        # 4. –¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
        results.append(("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏", test_crud_operations()))
        
        # 5. –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—á–∞—Ç–∏
        results.append(("PrintService", test_print_service()))
        
        # 6. –¢–µ—Å—Ç —Ç–∏–ø–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
        results.append(("–¢–∏–ø—ã —à–∞–±–ª–æ–Ω–æ–≤", test_template_types()))
        
        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {test_name}: {status}")
            if result:
                passed += 1
        
        print(f"\nüéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üñ®Ô∏è –°–ò–°–¢–ï–ú–ê –ü–ï–ß–ê–¢–ò –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
            print("   ‚Ä¢ Pydantic —Å—Ö–µ–º—ã")
            print("   ‚Ä¢ –ú–æ–¥–µ–ª–∏ SQLAlchemy")
            print("   ‚Ä¢ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏")
            print("   ‚Ä¢ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Jinja2 —à–∞–±–ª–æ–Ω–æ–≤")
            print("   ‚Ä¢ PrintService")
            print("   ‚Ä¢ –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç—ã")
        else:
            print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
