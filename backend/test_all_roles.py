#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
"""
import requests
import json

def test_role_login(username, password, expected_role):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏"""
    print(f"\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ–ª—å: {username}")
    
    try:
        # OAuth2 –ª–æ–≥–∏–Ω
        response = requests.post(
            "http://localhost:8000/api/v1/auth/login",
            data={
                "username": username,
                "password": password
            },
            headers={"Content-Type": "application/x-www-form-urlencoded"}
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            print(f"   ‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω")
            print(f"   üé´ Token: {token[:20]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile_response = requests.get(
                "http://localhost:8000/api/v1/auth/me",
                headers={"Authorization": f"Bearer {token}"}
            )
            
            if profile_response.status_code == 200:
                profile = profile_response.json()
                actual_role = profile.get("role")
                print(f"   üë§ –†–æ–ª—å: {actual_role}")
                
                if actual_role == expected_role:
                    print(f"   ‚úÖ –†–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    return True
                else:
                    print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_role}, –ø–æ–ª—É—á–µ–Ω–æ {actual_role}")
                    return False
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_response.status_code}")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–æ–ª–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    roles = [
        ("admin", "admin123", "Admin"),
        ("registrar", "registrar123", "Registrar"),
        ("lab", "lab123", "Lab"),
        ("doctor", "doctor123", "Doctor"),
        ("cashier", "cashier123", "Cashier"),
        ("cardio", "cardio123", "cardio"),
        ("derma", "derma123", "derma"),
        ("dentist", "dentist123", "dentist")
    ]
    
    success_count = 0
    total_count = len(roles)
    
    for username, password, expected_role in roles:
        if test_role_login(username, password, expected_role):
            success_count += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {total_count - success_count}/{total_count}")
    
    if success_count == total_count:
        print(f"\nüéâ –í–°–ï –†–û–õ–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ù–ï–ö–û–¢–û–†–´–ú–ò –†–û–õ–Ø–ú–ò")
        return False

if __name__ == "__main__":
    main()
