#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –≤ MorningAssignmentService
"""
import sys
import os
sys.path.append('/c/final/backend')

from datetime import date
from app.db.session import SessionLocal
from app.models.visit import Visit, VisitService
from app.models.service import Service
from app.models.user import User
from app.services.morning_assignment import MorningAssignmentService

def diagnose_morning_assignment():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MorningAssignmentService")
    
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–∏–∑–∏—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
        latest_visit = db.query(Visit).filter(
            Visit.visit_date == date.today(),
            Visit.status == "confirmed"
        ).order_by(Visit.id.desc()).first()
        
        if not latest_visit:
            print("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç ID {latest_visit.id}")
        print(f"   Patient ID: {latest_visit.patient_id}")
        print(f"   Department: {latest_visit.department}")
        print(f"   Doctor ID: {latest_visit.doctor_id}")
        print(f"   Status: {latest_visit.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏ –≤–∏–∑–∏—Ç–∞
        visit_services = db.query(VisitService).filter(VisitService.visit_id == latest_visit.id).all()
        print(f"üìã –£—Å–ª—É–≥–∏ –≤–∏–∑–∏—Ç–∞ ({len(visit_services)}):")
        
        for vs in visit_services:
            service = db.query(Service).filter(Service.id == vs.service_id).first()
            if service:
                print(f"   - Service ID: {service.id}, Code: {service.code}, Name: {service.name}")
                print(f"     Queue tag: {service.queue_tag}")
            else:
                print(f"   - ‚ùå Service ID {vs.service_id} –ù–ï –ù–ê–ô–î–ï–ù–ê!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º _get_visit_queue_tags
        with MorningAssignmentService() as service:
            service.db = db
            
            print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º _get_visit_queue_tags:")
            try:
                queue_tags = service._get_visit_queue_tags(latest_visit)
                print(f"‚úÖ Queue tags: {queue_tags}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _get_visit_queue_tags: {e}")
                import traceback
                traceback.print_exc()
                return
            
            if not queue_tags:
                print("‚ö†Ô∏è –ù–µ—Ç queue_tags –¥–ª—è —É—Å–ª—É–≥ –≤–∏–∑–∏—Ç–∞")
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º _assign_single_queue –¥–ª—è –∫–∞–∂–¥–æ–≥–æ queue_tag
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º _assign_single_queue –¥–ª—è –∫–∞–∂–¥–æ–≥–æ queue_tag:")
            for queue_tag in queue_tags:
                print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º queue_tag: {queue_tag} ---")
                try:
                    assignment = service._assign_single_queue(latest_visit, queue_tag, date.today())
                    if assignment:
                        print(f"‚úÖ –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {assignment}")
                    else:
                        print(f"‚ö†Ô∏è –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–≤–µ—Ä–Ω—É–ª None)")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _assign_single_queue –¥–ª—è {queue_tag}: {e}")
                    import traceback
                    traceback.print_exc()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π _assign_queues_for_visit
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π _assign_queues_for_visit:")
            try:
                assignments = service._assign_queues_for_visit(latest_visit, date.today())
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {assignments}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _assign_queues_for_visit: {e}")
                import traceback
                traceback.print_exc()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å-–≤—Ä–∞—á–µ–π
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å-–≤—Ä–∞—á–µ–π:")
        ecg_resource = db.query(User).filter(
            User.username == "ecg_resource",
            User.is_active == True
        ).first()
        print(f"–≠–ö–ì —Ä–µ—Å—É—Ä—Å: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if ecg_resource else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        lab_resource = db.query(User).filter(
            User.username == "lab_resource", 
            User.is_active == True
        ).first()
        print(f"–õ–∞–± —Ä–µ—Å—É—Ä—Å: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if lab_resource else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
    finally:
        db.close()

if __name__ == "__main__":
    diagnose_morning_assignment()
