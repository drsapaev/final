#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô ADMIN
"""
import sqlite3
import os
from argon2 import PasswordHasher

def fix_admin_auth():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ADMIN")
    print("=" * 50)
    
    db_path = 'clinic.db'
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...")
        cursor.execute("SELECT id, username, hashed_password FROM users WHERE username = 'admin';")
        admin_user = cursor.fetchone()
        
        if admin_user:
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–∞–π–¥–µ–Ω (ID: {admin_user[0]})")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            print("2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å admin...")
            ph = PasswordHasher()
            try:
                ph.verify(admin_user[2], "admin123")
                print("   ‚úÖ –ü–∞—Ä–æ–ª—å admin –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            except Exception as e:
                print(f"   ‚ùå –ü–∞—Ä–æ–ª—å admin –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {e}")
                
                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
                print("   üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è...")
                new_hash = ph.hash("admin123")
                cursor.execute("UPDATE users SET hashed_password = ? WHERE username = 'admin';", (new_hash,))
                print("   ‚úÖ –•–µ—à –ø–∞—Ä–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
            print("   üîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin...")
            ph = PasswordHasher()
            hashed_password = ph.hash("admin123")
            
            cursor.execute("""
                INSERT INTO users (username, email, hashed_password, full_name, role, is_active, is_verified)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                "admin",
                "admin@clinic.com", 
                hashed_password,
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã",
                "admin",
                True,
                True
            ))
            print("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å admin
        print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å admin...")
        cursor.execute("SELECT role FROM users WHERE username = 'admin';")
        role = cursor.fetchone()[0]
        print(f"   üìä –†–æ–ª—å admin: {role}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        print("4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å admin...")
        cursor.execute("SELECT is_active, is_verified FROM users WHERE username = 'admin';")
        active, verified = cursor.fetchone()
        print(f"   üìä –ê–∫—Ç–∏–≤–µ–Ω: {active}, –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {verified}")
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not active or not verified:
            print("   üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º admin...")
            cursor.execute("UPDATE users SET is_active = 1, is_verified = 1 WHERE username = 'admin';")
            print("   ‚úÖ Admin –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ admin –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é admin...")
        test_admin_auth()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_admin_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ admin"""
    import requests
    
    try:
        response = requests.post(
            "http://localhost:8000/api/v1/auth/login",
            data={"username": "admin", "password": "admin123"},
            timeout=10
        )
        
        if response.status_code == 200:
            token = response.json()["access_token"]
            print(f"   ‚úÖ Admin —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            print(f"   üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
            return token
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ admin: {response.status_code}")
            print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:100]}...")
            return None
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

if __name__ == "__main__":
    fix_admin_auth()
