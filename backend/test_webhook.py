#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç
"""
import json
import urllib.parse
import urllib.request

BASE_URL = "http://127.0.0.1:8000"


def test_payme_webhook():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Payme"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Payme...")

    url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/payme"
    headers = {
        "Content-Type": "application/json",
        "X-Payme-Signature": "test_signature",
    }
    data = {"id": "test_123", "state": 1, "amount": 50000}

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(
            url, data=json.dumps(data).encode("utf-8"), headers=headers
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req) as response:
            response_text = response.read().decode("utf-8")
            print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

            if response.status == 200:
                result = json.loads(response_text)
                if result.get("ok"):
                    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                else:
                    print(f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –æ—à–∏–±–∫–æ–π: {result.get('message')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def test_click_webhook():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Click"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Click...")

    url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/click"
    data = {
        "click_trans_id": "test_click_456",
        "merchant_trans_id": "visit_789",
        "amount": "500.00",
        "action": "0",
        "error": "",
        "sign_time": "1234567890",
        "sign_string": "test_sign",
    }

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        form_data = urllib.parse.urlencode(data).encode("utf-8")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req) as response:
            response_text = response.read().decode("utf-8")
            print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response_text}")

            if response.status == 200:
                result = json.loads(response_text)
                if result.get("ok"):
                    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                else:
                    print(f"‚ö†Ô∏è –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –æ—à–∏–±–∫–æ–π: {result.get('message')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def test_providers_list():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin123"}

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏–Ω–∞
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
        login_req = urllib.request.Request(login_url, data=form_data)
        login_req.add_header("Content-Type", "application/x-www-form-urlencoded")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞
        with urllib.request.urlopen(login_req) as response:
            if response.status == 200:
                login_response_text = response.read().decode("utf-8")
                token_data = json.loads(login_response_text)
                token = token_data["access_token"]
                print("üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")

                # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
                providers_url = f"{BASE_URL}/api/v1/webhooks/webhooks/payment/providers"

                # –°–æ–∑–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º
                providers_req = urllib.request.Request(providers_url)
                providers_req.add_header("Authorization", f"Bearer {token}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                with urllib.request.urlopen(providers_req) as providers_response:
                    print(f"üì° –°—Ç–∞—Ç—É—Å: {providers_response.status}")

                    if providers_response.status == 200:
                        providers_text = providers_response.read().decode("utf-8")
                        providers = json.loads(providers_text)
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(providers)}")
                        for provider in providers:
                            status = (
                                "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
                                if provider["is_active"]
                                else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                            )
                            print(
                                f"  - {provider['name']} ({provider['code']}): {status}"
                            )
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {providers_response.read().decode('utf-8')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {response.read().decode('utf-8')}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç")
    print("=" * 50)

    test_payme_webhook()
    test_click_webhook()
    test_providers_list()

    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
