#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—ã appointments –∏ patients
–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

–î–æ–±–∞–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è:
- appointments.visit_type (paid/repeat/free)
- appointments.payment_type (cash/card/online) 
- appointments.services (JSON —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥)
- patients.address —É–∂–µ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏

–ó–∞–ø—É—Å–∫: python add_registrar_fields.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import text
from app.db.session import SessionLocal
from app.core.config import settings

def add_registrar_fields():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    db = SessionLocal()
    
    try:
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É appointments
        print("üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã appointments...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º visit_type
        try:
            db.execute(text("""
                ALTER TABLE appointments 
                ADD COLUMN visit_type VARCHAR(16) DEFAULT 'paid'
            """))
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ visit_type")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e).lower():
                print("‚ÑπÔ∏è  –ü–æ–ª–µ visit_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è visit_type: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º payment_type
        try:
            db.execute(text("""
                ALTER TABLE appointments 
                ADD COLUMN payment_type VARCHAR(16) DEFAULT 'cash'
            """))
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ payment_type")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e).lower():
                print("‚ÑπÔ∏è  –ü–æ–ª–µ payment_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è payment_type: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º services (JSON)
        try:
            db.execute(text("""
                ALTER TABLE appointments 
                ADD COLUMN services JSON
            """))
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ services")
        except Exception as e:
            if "already exists" in str(e) or "duplicate column" in str(e).lower():
                print("‚ÑπÔ∏è  –ü–æ–ª–µ services —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è services: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ address –≤ —Ç–∞–±–ª–∏—Ü–µ patients (SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
        print("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã patients...")
        try:
            result = db.execute(text("""
                PRAGMA table_info(patients)
            """)).fetchall()
            
            address_exists = any(col[1] == 'address' for col in result)
            
            if address_exists:
                print("‚ÑπÔ∏è  –ü–æ–ª–µ address –≤ —Ç–∞–±–ª–∏—Ü–µ patients —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                db.execute(text("""
                    ALTER TABLE patients 
                    ADD COLUMN address VARCHAR(512)
                """))
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ address –≤ —Ç–∞–±–ª–∏—Ü—É patients")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–æ–ª–µ–º address: {e}")
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        print("üéâ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü (SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
        print("\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã appointments:")
        result = db.execute(text("""
            PRAGMA table_info(appointments)
        """)).fetchall()
        
        for row in result:
            print(f"  - {row[1]}: {row[2]} {'NULL' if row[3] == 0 else 'NOT NULL'} {f'DEFAULT {row[4]}' if row[4] else ''}")
        
        print("\nüë§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã patients:")
        result = db.execute(text("""
            PRAGMA table_info(patients)
        """)).fetchall()
        
        for row in result:
            if row[1] in ['address', 'last_name', 'first_name', 'phone']:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                print(f"  - {row[1]}: {row[2]} {'NULL' if row[3] == 0 else 'NOT NULL'}")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    print(f"üì° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL}")
    
    try:
        add_registrar_fields()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ")
        print("3. –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –ø–æ–ª—è")
    except Exception as e:
        print(f"\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        sys.exit(1)
