#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CI/CD –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CI/CD pipeline
"""

import urllib.request
import urllib.parse
import json
import time
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"
ADMIN_CREDENTIALS = {
    "username": "admin",
    "password": "admin123"
}

def test_health_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    print("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/health...")
    try:
        response = urllib.request.urlopen(f"{BASE_URL}/api/v1/health")
        if response.getcode() == 200:
            print("‚úÖ /api/v1/health —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå /api/v1/health –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/health: {e}")
        return False

def test_status_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/status...")
    try:
        response = urllib.request.urlopen(f"{BASE_URL}/api/v1/status")
        if response.getcode() == 200:
            data = json.loads(response.read().decode())
            print(f"‚úÖ /api/v1/status —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status', 'N/A')}")
            return True
        else:
            print(f"‚ùå /api/v1/status –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/status: {e}")
        return False

def test_queue_stats_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
    print("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/queue/stats...")
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        params = urllib.parse.urlencode({
            "department": "THERAPY",
            "date": today
        })
        url = f"{BASE_URL}/api/v1/queue/stats?{params}"
        
        response = urllib.request.urlopen(url)
        if response.getcode() == 200:
            data = json.loads(response.read().decode())
            print(f"‚úÖ /api/v1/queue/stats —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('total_tickets', 'N/A')} –±–∏–ª–µ—Ç–æ–≤")
            return True
        else:
            print(f"‚ùå /api/v1/queue/stats –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/queue/stats: {e}")
        return False

def get_auth_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        auth_data = urllib.parse.urlencode(ADMIN_CREDENTIALS).encode('utf-8')
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/auth/login",
            data=auth_data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        response = urllib.request.urlopen(req)
        if response.getcode() == 200:
            data = json.loads(response.read().decode())
            return data.get('access_token')
        return None
    except:
        return None

def test_appointments_stats_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—ë–º–æ–≤"""
    print("üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/appointments/stats...")
    try:
        token = get_auth_token()
        if not token:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return False
            
        today = datetime.now().strftime("%Y-%m-%d")
        params = urllib.parse.urlencode({
            "department": "THERAPY",
            "date": today
        })
        url = f"{BASE_URL}/api/v1/appointments/stats?{params}"
        
        req = urllib.request.Request(url)
        req.add_header('Authorization', f'Bearer {token}')
        
        response = urllib.request.urlopen(req)
        if response.getcode() == 200:
            data = json.loads(response.read().decode())
            print(f"‚úÖ /api/v1/appointments/stats —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('total_appointments', 'N/A')} –ø—Ä–∏—ë–º–æ–≤")
            return True
        else:
            print(f"‚ùå /api/v1/appointments/stats –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/appointments/stats: {e}")
        return False

def test_payment_webhook_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    print("üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/payment-webhook/payme...")
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π payload –¥–ª—è Payme
        test_payload = {
            "method": "checkPerformTransaction",
            "params": {
                "id": "test_123",
                "account": {
                    "order_id": "test_order"
                },
                "amount": 100000
            }
        }
        
        data = json.dumps(test_payload).encode('utf-8')
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/webhooks/payment/payme",
            data=data,
            headers={'Content-Type': 'application/json'}
        )
        
        response = urllib.request.urlopen(req)
        if response.getcode() in [200, 201, 422]:  # 422 - –≤–∞–ª–∏–¥–∞—Ü–∏—è, —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            print(f"‚úÖ /api/v1/webhooks/payment/payme —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: {response.getcode()})")
            return True
        else:
            print(f"‚ùå /api/v1/webhooks/payment/payme –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/webhooks/payment/payme: {e}")
        return False

def test_printing_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–µ—á–∞—Ç–∏"""
    print("üñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/print/ticket.pdf...")
    try:
        token = get_auth_token()
        if not token:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return False
            
        params = urllib.parse.urlencode({
            "department": "THERAPY",
            "ticket_number": 1
        })
        url = f"{BASE_URL}/api/v1/print/ticket.pdf?{params}"
        
        req = urllib.request.Request(url)
        req.add_header('Authorization', f'Bearer {token}')
        
        response = urllib.request.urlopen(req)
        if response.getcode() == 200:
            content_type = response.headers.get('Content-Type', '')
            if 'pdf' in content_type.lower() or 'application/octet-stream' in content_type:
                print(f"‚úÖ /api/v1/print/ticket.pdf —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–∏–ø: {content_type})")
                return True
            else:
                print(f"‚ö†Ô∏è /api/v1/print/ticket.pdf —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_type}")
                return True
        else:
            print(f"‚ùå /api/v1/print/ticket.pdf –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/print/ticket.pdf: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CI/CD –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 60)
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(5)
    
    tests = [
        test_health_endpoint,
        test_status_endpoint,
        test_queue_stats_endpoint,
        test_appointments_stats_endpoint,
        test_payment_webhook_endpoint,
        test_printing_endpoint
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
            print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    print(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(sum(results)/len(results)*100):.1f}%")
    
    if sum(results) >= len(results) * 0.8:
        print("\nüéâ CI/CD –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        print("–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API")
        return True
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
