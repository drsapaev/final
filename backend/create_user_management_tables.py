#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine, text
from app.db.base_class import Base
from app.db.session import engine
from app.models.user_profile import (
    UserProfile, UserPreferences, UserNotificationSettings, 
    UserRole, UserPermission, RolePermission, UserGroup, 
    UserGroupMember, UserAuditLog
)

def create_user_management_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("üîß –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name LIKE 'user_%'
                ORDER BY name
            """))
            tables = [row[0] for row in result.fetchall()]
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                print(f"   - {table}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
        print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π...")
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª–∏
            result = conn.execute(text("SELECT COUNT(*) FROM user_roles"))
            role_count = result.scalar()
            
            if role_count == 0:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
                roles = [
                    ("Admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ", True),
                    ("Doctor", "–í—Ä–∞—á", "–î–æ—Å—Ç—É–ø –∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –∏ –∑–∞–ø–∏—Å—è–º", True),
                    ("Nurse", "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞", "–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å—è–º –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", True),
                    ("Receptionist", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å—è–º –∏ –ø–ª–∞—Ç–µ–∂–∞–º", True),
                    ("Patient", "–ü–∞—Ü–∏–µ–Ω—Ç", "–î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é", True)
                ]
                
                for name, display_name, description, is_system in roles:
                    conn.execute(text("""
                        INSERT INTO user_roles (name, display_name, description, is_system, is_active)
                        VALUES (:name, :display_name, :description, :is_system, :is_active)
                    """), {
                        "name": name,
                        "display_name": display_name,
                        "description": description,
                        "is_system": is_system,
                        "is_active": True
                    })
                
                conn.commit()
                print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print(f"‚úÖ –†–æ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({role_count} —Ä–æ–ª–µ–π)")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        print("\nüîê –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            result = conn.execute(text("SELECT COUNT(*) FROM user_permissions"))
            permission_count = result.scalar()
            
            if permission_count == 0:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                permissions = [
                    ("users:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "users"),
                    ("users:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "users"),
                    ("users:delete", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "users"),
                    ("users:bulk_action", "–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "users"),
                    ("profile:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "profile"),
                    ("profile:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "profile"),
                    ("patients:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "patients"),
                    ("patients:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "patients"),
                    ("patients:delete", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", "patients"),
                    ("appointments:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º", "appointments"),
                    ("appointments:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π", "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π", "appointments"),
                    ("appointments:delete", "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π", "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º", "appointments"),
                    ("emr:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∫–∞—Ä—Ç", "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç", "emr"),
                    ("emr:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∫–∞—Ä—Ç", "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∫–∞—Ä—Ç", "emr"),
                    ("emr:delete", "–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∫–∞—Ä—Ç", "–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–∞—Ä—Ç", "emr"),
                    ("payments:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π", "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π", "payments"),
                    ("payments:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π", "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π", "payments"),
                    ("payments:delete", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π", "payments"),
                    ("analytics:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤", "analytics"),
                    ("settings:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã", "settings"),
                    ("settings:write", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã", "settings"),
                    ("audit:read", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏—Ç–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä –∂—É—Ä–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞", "audit"),
                    ("export:write", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã", "export")
                ]
                
                for name, display_name, description, category in permissions:
                    conn.execute(text("""
                        INSERT INTO user_permissions (name, display_name, description, category, is_system, is_active)
                        VALUES (:name, :display_name, :description, :category, :is_system, :is_active)
                    """), {
                        "name": name,
                        "display_name": display_name,
                        "description": description,
                        "category": category,
                        "is_system": True,
                        "is_active": True
                    })
                
                conn.commit()
                print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({permission_count} —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print("\nüîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑–∏
            result = conn.execute(text("SELECT COUNT(*) FROM role_permissions"))
            link_count = result.scalar()
            
            if link_count == 0:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–µ–π
                result = conn.execute(text("SELECT id, name FROM user_roles"))
                roles = {name: id for id, name in result.fetchall()}
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
                result = conn.execute(text("SELECT id, name FROM user_permissions"))
                permissions = {name: id for id, name in result.fetchall()}
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è —Ä–æ–ª–∏ Admin (–≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
                admin_role_id = roles.get("Admin")
                if admin_role_id:
                    for perm_name, perm_id in permissions.items():
                        conn.execute(text("""
                            INSERT INTO role_permissions (role_id, permission_id)
                            VALUES (:role_id, :permission_id)
                        """), {
                            "role_id": admin_role_id,
                            "permission_id": perm_id
                        })
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è —Ä–æ–ª–∏ Doctor
                doctor_role_id = roles.get("Doctor")
                if doctor_role_id:
                    doctor_permissions = [
                        "patients:read", "patients:write",
                        "appointments:read", "appointments:write",
                        "emr:read", "emr:write",
                        "analytics:read", "profile:read", "profile:write"
                    ]
                    for perm_name in doctor_permissions:
                        if perm_name in permissions:
                            conn.execute(text("""
                                INSERT INTO role_permissions (role_id, permission_id)
                                VALUES (:role_id, :permission_id)
                            """), {
                                "role_id": doctor_role_id,
                                "permission_id": permissions[perm_name]
                            })
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è —Ä–æ–ª–∏ Nurse
                nurse_role_id = roles.get("Nurse")
                if nurse_role_id:
                    nurse_permissions = [
                        "patients:read", "appointments:read", "emr:read", "profile:read"
                    ]
                    for perm_name in nurse_permissions:
                        if perm_name in permissions:
                            conn.execute(text("""
                                INSERT INTO role_permissions (role_id, permission_id)
                                VALUES (:role_id, :permission_id)
                            """), {
                                "role_id": nurse_role_id,
                                "permission_id": permissions[perm_name]
                            })
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è —Ä–æ–ª–∏ Receptionist
                receptionist_role_id = roles.get("Receptionist")
                if receptionist_role_id:
                    receptionist_permissions = [
                        "patients:read", "patients:write",
                        "appointments:read", "appointments:write",
                        "payments:read", "payments:write",
                        "profile:read", "profile:write"
                    ]
                    for perm_name in receptionist_permissions:
                        if perm_name in permissions:
                            conn.execute(text("""
                                INSERT INTO role_permissions (role_id, permission_id)
                                VALUES (:role_id, :permission_id)
                            """), {
                                "role_id": receptionist_role_id,
                                "permission_id": permissions[perm_name]
                            })
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è —Ä–æ–ª–∏ Patient
                patient_role_id = roles.get("Patient")
                if patient_role_id:
                    patient_permissions = [
                        "profile:read", "profile:write",
                        "appointments:read", "payments:read"
                    ]
                    for perm_name in patient_permissions:
                        if perm_name in permissions:
                            conn.execute(text("""
                                INSERT INTO role_permissions (role_id, permission_id)
                                VALUES (:role_id, :permission_id)
                            """), {
                                "role_id": patient_role_id,
                                "permission_id": permissions[perm_name]
                            })
                
                conn.commit()
                print("‚úÖ –°–≤—è–∑–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")
            else:
                print(f"‚úÖ –°–≤—è–∑–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({link_count} —Å–≤—è–∑–µ–π)")
        
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("‚úÖ –°–≤—è–∑–∏ —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = create_user_management_tables()
    sys.exit(0 if success else 1)
