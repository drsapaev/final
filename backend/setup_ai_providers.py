"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω–æ–≤
–û—Å–Ω–æ–≤–∞: passport.md —Å—Ç—Ä. 3325-3888
"""
from app.db.session import SessionLocal
from app.models.ai_config import AIProvider, AIPromptTemplate
from app.crud import ai_config as crud_ai

def create_ai_providers():
    """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print('ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...')

    db = SessionLocal()
    try:
        # 1. OpenAI GPT-4
        openai_provider = {
            "name": "openai",
            "display_name": "OpenAI GPT-4",
            "api_url": "https://api.openai.com/v1/chat/completions",
            "model": "gpt-4",
            "temperature": 0.2,
            "max_tokens": 1500,
            "active": False,  # –ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞
            "is_default": False,
            "capabilities": ["text", "vision", "ocr"],
            "limits": {
                "requests_per_minute": 60,
                "tokens_per_day": 50000
            }
        }

        existing = db.query(AIProvider).filter(AIProvider.name == "openai").first()
        if not existing:
            provider = AIProvider(**openai_provider)
            db.add(provider)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä OpenAI")
        else:
            print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä OpenAI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # 2. Anthropic Claude
        anthropic_provider = {
            "name": "anthropic",
            "display_name": "Anthropic Claude",
            "api_url": "https://api.anthropic.com/v1/messages",
            "model": "claude-3-sonnet-20240229",
            "temperature": 0.3,
            "max_tokens": 2000,
            "active": False,
            "is_default": False,
            "capabilities": ["text", "vision"],
            "limits": {
                "requests_per_minute": 50,
                "tokens_per_day": 40000
            }
        }

        existing = db.query(AIProvider).filter(AIProvider.name == "anthropic").first()
        if not existing:
            provider = AIProvider(**anthropic_provider)
            db.add(provider)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä Anthropic")
        else:
            print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä Anthropic —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # 3. Yandex GPT
        yandex_provider = {
            "name": "yandex_gpt",
            "display_name": "Yandex GPT",
            "api_url": "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
            "model": "yandexgpt-lite",
            "temperature": 0.2,
            "max_tokens": 1000,
            "active": False,
            "is_default": True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
            "capabilities": ["text"],
            "limits": {
                "requests_per_minute": 30,
                "tokens_per_day": 20000
            }
        }

        existing = db.query(AIProvider).filter(AIProvider.name == "yandex_gpt").first()
        if not existing:
            provider = AIProvider(**yandex_provider)
            db.add(provider)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä Yandex GPT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        else:
            print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä Yandex GPT —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        providers = crud_ai.get_ai_providers(db)
        print(f"‚úÖ –í—Å–µ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(providers)}")
        
        for provider in providers:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if provider.active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            default = " (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if provider.is_default else ""
            print(f"   ‚Ä¢ {provider.display_name}: {status}{default}")

    finally:
        db.close()

def create_prompt_templates():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω—ã"""
    print('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω–æ–≤...')

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_provider = db.query(AIProvider).filter(AIProvider.is_default == True).first()
        
        if not default_provider:
            print("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # 1. –®–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± –¥–ª—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏
        complaints_template = {
            "provider_id": default_provider.id,
            "task_type": "complaints_analysis",
            "specialty": "cardiology",
            "language": "ru",
            "version": "1.0",
            "system_prompt": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–∫–∞—Ä–¥–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∂–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
            "context_template": """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {{ specialty }}
–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {{ language }}""",
            "task_template": """–ñ–∞–ª–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞: {{ complaints }}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∂–∞–ª–æ–±—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏:
1. –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã (3-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö)
2. –ü–ª–∞–Ω –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–∏–∑—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
3. –ù–µ–æ—Ç–ª–æ–∂–Ω—ã–µ –º–µ—Ä—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è)
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏""",
            "examples": [
                "–ü—Ä–∏–º–µ—Ä: –ë–æ–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–µ—Ä–¥—Ü–∞ ‚Üí –≠–ö–ì, –≠—Ö–æ–ö–ì, –∞–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏",
                "–ü—Ä–∏–º–µ—Ä: –û–¥—ã—à–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ ‚Üí –†–µ–Ω—Ç–≥–µ–Ω –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏, –≠—Ö–æ–ö–ì"
            ],
            "temperature": 0.3,
            "max_tokens": 1000,
            "response_schema": {
                "type": "object",
                "properties": {
                    "possible_diagnoses": {"type": "array"},
                    "examination_plan": {"type": "array"},
                    "urgent_actions": {"type": "array"},
                    "recommendations": {"type": "array"}
                }
            },
            "active": True
        }

        existing = db.query(AIPromptTemplate).filter(
            AIPromptTemplate.task_type == "complaints_analysis",
            AIPromptTemplate.specialty == "cardiology"
        ).first()
        
        if not existing:
            template = AIPromptTemplate(**complaints_template)
            db.add(template)
            print("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± (–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è)")
        else:
            print("‚úÖ –®–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # 2. –®–∞–±–ª–æ–Ω –ø–æ–¥–±–æ—Ä–∞ –ú–ö–ë-10
        icd10_template = {
            "provider_id": default_provider.id,
            "task_type": "icd10_lookup",
            "specialty": "general",
            "language": "ru",
            "version": "1.0",
            "system_prompt": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ–ª–µ–∑–Ω–µ–π (–ú–ö–ë-10).
–ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–¥—ã –ú–ö–ë-10 –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–≥–Ω–æ–∑–∞.""",
            "context_template": """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {{ specialty }}
–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω—ã–π –ø–æ–¥–±–æ—Ä –∫–æ–¥–∞ –ú–ö–ë-10""",
            "task_template": """–î–∏–∞–≥–Ω–æ–∑: {{ diagnosis }}

–ù–∞–π–¥–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–¥–æ–≤ –ú–ö–ë-10:
- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ (–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π)
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
- –£–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∫–æ–¥–∞""",
            "examples": [
                "–ü—Ä–∏–º–µ—Ä: –°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è ‚Üí I20.9 –°—Ç–µ–Ω–æ–∫–∞—Ä–¥–∏—è –Ω–µ—É—Ç–æ—á–Ω–µ–Ω–Ω–∞—è",
                "–ü—Ä–∏–º–µ—Ä: –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è ‚Üí I10 –≠—Å—Å–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è"
            ],
            "temperature": 0.1,
            "max_tokens": 800,
            "response_schema": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "code": {"type": "string"},
                        "description": {"type": "string"},
                        "confidence": {"type": "number"}
                    }
                }
            },
            "active": True
        }

        existing = db.query(AIPromptTemplate).filter(
            AIPromptTemplate.task_type == "icd10_lookup"
        ).first()
        
        if not existing:
            template = AIPromptTemplate(**icd10_template)
            db.add(template)
            print("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø–æ–¥–±–æ—Ä–∞ –ú–ö–ë-10")
        else:
            print("‚úÖ –®–∞–±–ª–æ–Ω –ú–ö–ë-10 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # 3. –®–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        lab_template = {
            "provider_id": default_provider.id,
            "task_type": "lab_interpretation",
            "specialty": "general",
            "language": "ru",
            "version": "1.0",
            "system_prompt": """–¢—ã –≤—Ä–∞—á-–ª–∞–±–æ—Ä–∞–Ω—Ç —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.""",
            "context_template": """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –≤—Ä–∞—á–∞: {{ specialty }}
–í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞: {{ patient_age }}
–ü–æ–ª: {{ patient_gender }}""",
            "task_template": """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤:
{{ lab_results }}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–∫–∞–∂–∏:
1. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã
2. –ö–ª–∏–Ω–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª–µ—á–∞—â–µ–≥–æ –≤—Ä–∞—á–∞""",
            "examples": [
                "–ü—Ä–∏–º–µ—Ä: –•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω 6.8 ‚Üí –ì–∏–ø–µ—Ä—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–µ–º–∏—è, —Ä–∏—Å–∫ –ò–ë–°",
                "–ü—Ä–∏–º–µ—Ä: –ì–ª—é–∫–æ–∑–∞ 12.5 ‚Üí –ì–∏–ø–µ—Ä–≥–ª–∏–∫–µ–º–∏—è, –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥–∏–∞–±–µ—Ç"
            ],
            "temperature": 0.2,
            "max_tokens": 1200,
            "active": True
        }

        existing = db.query(AIPromptTemplate).filter(
            AIPromptTemplate.task_type == "lab_interpretation"
        ).first()
        
        if not existing:
            template = AIPromptTemplate(**lab_template)
            db.add(template)
            print("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤")
        else:
            print("‚úÖ –®–∞–±–ª–æ–Ω –∞–Ω–∞–ª–∏–∑–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        templates = crud_ai.get_prompt_templates(db)
        print(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
        
        for template in templates:
            print(f"   ‚Ä¢ {template.task_type} ({template.specialty or 'general'})")

    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê AI –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        create_ai_providers()
        
        # 2. –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        create_prompt_templates()
        
        print("\n" + "=" * 50)
        print("üéâ AI –°–ò–°–¢–ï–ú–ê –ù–ê–°–¢–†–û–ï–ù–ê!")
        print("\n‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   ‚Ä¢ 3 AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (OpenAI, Anthropic, Yandex)")
        print("   ‚Ä¢ 3 –ø—Ä–æ–º–ø—Ç-—à–∞–±–ª–æ–Ω–∞ (–∂–∞–ª–æ–±—ã, –ú–ö–ë-10, –∞–Ω–∞–ª–∏–∑—ã)")
        print("   ‚Ä¢ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        
        print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
        print("   2. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
