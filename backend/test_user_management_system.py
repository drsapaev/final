#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
import sys
import os
import json
from datetime import datetime, timedelta
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.models.user import User
from app.models.user_profile import UserProfile, UserPreferences, UserNotificationSettings, UserStatus
from app.services.user_management_service import get_user_management_service
from app.crud.user_management import user_profile, user_preferences, user_notification_settings
from app.core.security import get_password_hash

def test_user_management_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
    print("=" * 60)
    
    db = SessionLocal()
    service = get_user_management_service()
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        from app.schemas.user_management import UserCreateRequest
        
        import time
        timestamp = int(time.time())
        
        user_data = UserCreateRequest(
            username=f"test_doctor_{timestamp}",
            email=f"test_doctor_{timestamp}@clinic.com",
            password="TestPass123",
            role="Doctor",
            is_active=True,
            is_superuser=False,
            full_name="–¢–µ—Å—Ç –í—Ä–∞—á",
            first_name="–¢–µ—Å—Ç",
            last_name="–í—Ä–∞—á",
            phone="+7-999-123-45-67"
        )
        
        success, message, user = service.create_user(db, user_data, 1)  # 1 - ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
        
        if success:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.username} (ID: {user.id})")
            user_id = user.id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}")
            return False
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        profile_data = service.get_user_profile(db, user_id)
        
        if profile_data:
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {profile_data['full_name']}")
            print(f"   - Email: {profile_data['email']}")
            print(f"   - –†–æ–ª—å: {profile_data['role']}")
            print(f"   - –¢–µ–ª–µ—Ñ–æ–Ω: {profile_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
            return False
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...")
        from app.schemas.user_management import UserUpdateRequest
        
        update_data = UserUpdateRequest(
            full_name="–¢–µ—Å—Ç –í—Ä–∞—á –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π",
            phone="+7-999-123-45-68"
        )
        
        success, message = service.update_user(db, user_id, update_data, 1)
        
        if success:
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {message}")
            return False
        
        # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        from app.schemas.user_management import UserPreferencesUpdate
        
        preferences_data = UserPreferencesUpdate(
            theme="dark",
            language="en",
            timezone="Europe/London",
            working_hours_start="08:00",
            working_hours_end="17:00",
            working_days=[1, 2, 3, 4, 5],  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
            break_duration=60
        )
        
        success, message = service.update_user_preferences(db, user_id, preferences_data)
        
        if success:
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {message}")
            return False
        
        # –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        from app.schemas.user_management import UserNotificationSettingsUpdate
        
        notification_data = UserNotificationSettingsUpdate(
            email_appointment_reminder=True,
            email_appointment_cancellation=True,
            sms_appointment_reminder=False,
            push_appointment_reminder=True,
            reminder_time_before=120,  # 2 —á–∞—Å–∞
            quiet_hours_start="22:00",
            quiet_hours_end="08:00"
        )
        
        success, message = service.update_notification_settings(db, user_id, notification_data)
        
        if success:
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {message}")
            return False
        
        # –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        from app.schemas.user_management import UserSearchRequest
        
        search_params = UserSearchRequest(
            query="–¢–µ—Å—Ç",
            role="Doctor",
            page=1,
            per_page=10
        )
        
        users_data, total = service.search_users(db, search_params)
        
        if users_data:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
            for user_data in users_data:
                full_name = user_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                print(f"   - {user_data['username']} ({full_name})")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return False
        
        # –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        stats = service.get_user_stats(db)
        
        if stats:
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
            print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}")
            print(f"   - –ü–æ —Ä–æ–ª—è–º: {stats['users_by_role']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return False
        
        # –¢–µ—Å—Ç 8: –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        print("\n8Ô∏è‚É£ –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π...")
        from app.schemas.user_management import UserBulkActionRequest
        
        bulk_action_data = UserBulkActionRequest(
            user_ids=[user_id],
            action="activate",
            reason="–¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
        
        success, message, result = service.bulk_action_users(db, bulk_action_data, 1)
        
        if success:
            print(f"‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {message}")
            print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result['processed_count']}")
            print(f"   - –û—à–∏–±–æ–∫: {result['failed_count']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {message}")
            return False
        
        # –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
        print("\n9Ô∏è‚É£ –¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ CRUD
        profile = user_profile.get_by_user_id(db, user_id)
        if profile:
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ CRUD: {profile.full_name}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ CRUD")
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ CRUD
        preferences = user_preferences.get_by_user_id(db, user_id)
        if preferences:
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ CRUD: —Ç–µ–º–∞ {preferences.theme}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ CRUD")
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ CRUD
        notifications = user_notification_settings.get_by_user_id(db, user_id)
        if notifications:
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ CRUD: email –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {notifications.email_appointment_reminder}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ CRUD")
            return False
        
        # –¢–µ—Å—Ç 10: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüîü –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success, message = service.delete_user(db, user_id, 1)
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        db.close()

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
    print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API endpoints –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        from app.api.v1.endpoints import user_management
        print("‚úÖ API endpoints user_management –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω
        if hasattr(user_management, 'router'):
            print("‚úÖ –†–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
            print(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(user_management.router.routes)}")
        else:
            print("‚ùå –†–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        routes = [route.path for route in user_management.router.routes]
        expected_routes = [
            "/users",
            "/users/{user_id}",
            "/users/{user_id}/profile",
            "/users/{user_id}/preferences",
            "/users/{user_id}/notifications",
            "/users/{user_id}/activity",
            "/users/stats",
            "/users/bulk-action",
            "/users/export",
            "/users/health"
        ]
        
        for expected_route in expected_routes:
            if any(expected_route in route for route in routes):
                print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç {expected_route} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç {expected_route} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        print("‚úÖ –í—Å–µ API endpoints –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {str(e)}")
        return False

def test_middleware():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware"""
    print("\nüõ°Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MIDDLEWARE")
    print("=" * 30)
    
    try:
        from app.middleware.user_permissions import (
            user_permissions_middleware,
            user_activity_middleware,
            user_rate_limit_middleware
        )
        print("‚úÖ Middleware –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ middleware
        print(f"‚úÖ UserPermissionsMiddleware: {len(user_permissions_middleware.role_permissions)} —Ä–æ–ª–µ–π")
        print(f"‚úÖ UserActivityMiddleware: –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print(f"‚úÖ UserRateLimitMiddleware: {len(user_rate_limit_middleware.rate_limits)} –ª–∏–º–∏—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è middleware: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tests_passed = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    if test_user_management_system():
        tests_passed += 1
        print("\n‚úÖ –¢–µ—Å—Ç 1/3: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –ü–†–û–ô–î–ï–ù")
    else:
        print("\n‚ùå –¢–µ—Å—Ç 1/3: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –ü–†–û–í–ê–õ–ï–ù")
    
    # –¢–µ—Å—Ç 2: API endpoints
    if test_api_endpoints():
        tests_passed += 1
        print("\n‚úÖ –¢–µ—Å—Ç 2/3: API endpoints - –ü–†–û–ô–î–ï–ù")
    else:
        print("\n‚ùå –¢–µ—Å—Ç 2/3: API endpoints - –ü–†–û–í–ê–õ–ï–ù")
    
    # –¢–µ—Å—Ç 3: Middleware
    if test_middleware():
        tests_passed += 1
        print("\n‚úÖ –¢–µ—Å—Ç 3/3: Middleware - –ü–†–û–ô–î–ï–ù")
    else:
        print("\n‚ùå –¢–µ—Å—Ç 3/3: Middleware - –ü–†–û–í–ê–õ–ï–ù")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 70)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if tests_passed == total_tests:
        print("üéâ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ API endpoints –≥–æ—Ç–æ–≤—ã")
        print("‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        return True
    else:
        print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
