#!/usr/bin/env python3
"""
üß™ –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç CI/CD –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import urllib.request
import urllib.parse
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://127.0.0.1:8000"

def test_health_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    print("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/health...")
    try:
        response = urllib.request.urlopen(f"{BASE_URL}/api/v1/health")
        if response.getcode() == 200:
            print("‚úÖ /api/v1/health —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå /api/v1/health –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/health: {e}")
        return False

def test_status_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/status...")
    try:
        response = urllib.request.urlopen(f"{BASE_URL}/api/v1/status")
        if response.getcode() == 200:
            data = json.loads(response.read().decode())
            print(f"‚úÖ /api/v1/status —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status', 'N/A')}")
            return True
        else:
            print(f"‚ùå /api/v1/status –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/status: {e}")
        return False

def test_queue_stats_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
    print("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/queue/stats...")
    try:
        today = datetime.now().strftime("%Y-%m-%d")
        params = urllib.parse.urlencode({
            "department": "THERAPY",
            "date": today
        })
        url = f"{BASE_URL}/api/v1/queue/stats?{params}"
        
        response = urllib.request.urlopen(url)
        if response.getcode() == 200:
            data = json.loads(response.read().decode())
            print(f"‚úÖ /api/v1/queue/stats —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('total_tickets', 'N/A')} –±–∏–ª–µ—Ç–æ–≤")
            return True
        else:
            print(f"‚ùå /api/v1/queue/stats –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/queue/stats: {e}")
        return False

def test_payment_webhook_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    print("üí≥ –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/webhooks/payment/payme...")
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π payload –¥–ª—è Payme
        test_payload = {
            "method": "checkPerformTransaction",
            "params": {
                "id": "test_123",
                "account": {
                    "order_id": "test_order"
                },
                "amount": 100000
            }
        }
        
        data = json.dumps(test_payload).encode('utf-8')
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/webhooks/payment/payme",
            data=data,
            headers={'Content-Type': 'application/json'}
        )
        
        response = urllib.request.urlopen(req)
        if response.getcode() in [200, 201, 422]:  # 422 - –≤–∞–ª–∏–¥–∞—Ü–∏—è, —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            print(f"‚úÖ /api/v1/webhooks/payment/payme —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: {response.getcode()})")
            return True
        else:
            print(f"‚ùå /api/v1/webhooks/payment/payme –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/webhooks/payment/payme: {e}")
        return False

def test_auth_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v1/auth/login...")
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
        auth_data = urllib.parse.urlencode({
            "username": "admin",
            "password": "admin123"
        }).encode('utf-8')
        
        req = urllib.request.Request(
            f"{BASE_URL}/api/v1/auth/login",
            data=auth_data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        response = urllib.request.urlopen(req)
        if response.getcode() in [200, 401]:  # 401 - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"‚úÖ /api/v1/auth/login —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: {response.getcode()})")
            if response.getcode() == 200:
                data = json.loads(response.read().decode())
                print(f"   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {data.get('access_token', 'N/A')[:20]}...")
            else:
                print("   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (–æ–∂–∏–¥–∞–µ–º–æ)")
            return True
        else:
            print(f"‚ùå /api/v1/auth/login –≤–µ—Ä–Ω—É–ª {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ /api/v1/auth/login: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        response = urllib.request.urlopen(f"{BASE_URL}/api/v1/queue/stats?department=THERAPY&date={datetime.now().strftime('%Y-%m-%d')}")
        if response.getcode() == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: –∫–æ–¥ {response.getcode()}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ CI/CD –¥–ª—è –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 60)
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    tests = [
        test_health_endpoint,
        test_status_endpoint,
        test_queue_stats_endpoint,
        test_payment_webhook_endpoint,
        test_auth_endpoint,
        test_database_connection
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
            print()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
            print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(results) - sum(results)}")
    print(f"üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(sum(results)/len(results)*100):.1f}%")
    
    if sum(results) >= len(results) * 0.8:
        print("\nüéâ CI/CD –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        print("–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∏–Ω–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        print("‚úÖ –í–µ–±—Ö—É–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
    elif sum(results) >= len(results) * 0.6:
        print("\n‚ö†Ô∏è CI/CD –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û")
        print("–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return True
    else:
        print("\n‚ùå –ï—Å—Ç—å —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("–ú–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
