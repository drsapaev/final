#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–æ–π
"""
import sys
import os
from datetime import datetime, date, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_clinic_management_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–æ–π"""
    print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô")
    print("=" * 60)
    
    try:
        from app.db.session import SessionLocal
        from app.services.clinic_management_service import (
            branch_management, equipment_management, license_management,
            backup_management, system_info_service, clinic_management
        )
        from app.schemas.clinic import (
            BranchCreate, EquipmentCreate, LicenseCreate, BackupCreate,
            SystemInfoCreate
        )
        
        db = SessionLocal()
        
        try:
            print("1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞...")
            import time
            timestamp = int(time.time())
            branch_data = BranchCreate(
                name=f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª {timestamp}",
                code=f"TEST{timestamp}",
                address="–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å",
                phone="+998901234567",
                email="test@clinic.com",
                status="active",
                timezone="Asia/Tashkent",
                capacity=50
            )
            branch = branch_management.create_branch(db=db, branch_data=branch_data)
            print(f"‚úÖ –§–∏–ª–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {branch.name} (ID: {branch.id})")
            
            print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
            equipment_data = EquipmentCreate(
                name=f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ {timestamp}",
                model="Test Model 2024",
                serial_number=f"TEST{timestamp}",
                equipment_type="medical",
                branch_id=branch.id,
                cabinet="101",
                status="active",
                cost=100000.00,
                supplier="Test Supplier"
            )
            equipment = equipment_management.create_equipment(db=db, equipment_data=equipment_data)
            print(f"‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {equipment.name} (ID: {equipment.id})")
            
            print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏...")
            license_data = LicenseCreate(
                name=f"–¢–µ—Å—Ç–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è {timestamp}",
                license_type="software",
                license_key=f"TEST-LICENSE-KEY-{timestamp}",
                status="active",
                issued_by="Test Company",
                issued_date=date(2024, 1, 1),
                expires_date=date(2025, 1, 1),
                cost=50000.00,
                features=["basic", "advanced"],
                restrictions=["single_user"]
            )
            license = license_management.create_license(db=db, license_data=license_data)
            print(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ–∑–¥–∞–Ω–∞: {license.name} (ID: {license.id})")
            
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            backup_data = BackupCreate(
                name=f"–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {timestamp}",
                backup_type="full",
                status="pending",
                retention_days=30
            )
            backup = backup_management.create_backup_task(db=db, backup_data=backup_data)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup.name} (ID: {backup.id})")
            
            print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
            system_info = system_info_service.set_system_info(
                db=db, 
                key="test_key", 
                value={"test": "value"}, 
                description="–¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            )
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {system_info.key}")
            
            print("\n6Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–Ω–∏–∫–∏...")
            stats = clinic_management.get_clinic_stats(db=db)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"   - –§–∏–ª–∏–∞–ª–æ–≤: {stats.total_branches}")
            print(f"   - –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {stats.total_equipment}")
            print(f"   - –õ–∏—Ü–µ–Ω–∑–∏–π: {stats.total_licenses}")
            print(f"   - –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {stats.total_backups}")
            print(f"   - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {stats.system_health}")
            
            print("\n7Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            health = clinic_management.get_system_health(db=db)
            print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {health['status']}")
            if health['warnings']:
                print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {', '.join(health['warnings'])}")
            else:
                print("   ‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç")
            
            print("\n8Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
            init_results = clinic_management.initialize_default_data(db=db)
            print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            for key, value in init_results.items():
                print(f"   - {key}: {value}")
            
            print("\n9Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤...")
            branches = branch_management.get_branches(db=db, limit=10)
            equipment_list = equipment_management.get_equipment_list(db=db, limit=10)
            licenses = license_management.get_licenses(db=db, limit=10)
            backups = backup_management.get_backups(db=db, limit=10)
            
            print(f"‚úÖ –°–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"   - –§–∏–ª–∏–∞–ª–æ–≤: {len(branches)}")
            print(f"   - –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {len(equipment_list)}")
            print(f"   - –õ–∏—Ü–µ–Ω–∑–∏–π: {len(licenses)}")
            print(f"   - –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}")
            
            print("\nüîü –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...")
            # –ü–æ–∏—Å–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
            search_branches = branch_management.get_branches(db=db, search="–¢–µ—Å—Ç", limit=10)
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(search_branches)}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            active_equipment = equipment_management.get_equipment_list(db=db, status="active", limit=10)
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {len(active_equipment)}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π
            active_licenses = license_management.get_licenses(db=db, status="active", limit=10)
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏: {len(active_licenses)}")
            
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–Ω–∏–∫–∏ - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ - –ü–†–û–ô–î–ï–ù")
            print("‚úÖ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –ü–†–û–ô–î–ï–ù")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_clinic_management_system()
    sys.exit(0 if success else 1)
