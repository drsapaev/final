#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–æ–π
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def create_clinic_management_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–Ω–∏–∫–æ–π"""
    print("üè• –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô")
    print("=" * 50)
    
    try:
        from app.db.base_class import Base
        from app.db.session import engine
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        from app.models.clinic import (
            Branch, BranchStatus, Equipment, EquipmentStatus, EquipmentType, EquipmentMaintenance,
            License, LicenseStatus, LicenseType, LicenseActivation,
            Backup, BackupStatus, BackupType, SystemInfo
        )
        
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        from sqlalchemy import text
        with engine.connect() as conn:
            result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%branch%' OR name LIKE '%equipment%' OR name LIKE '%license%' OR name LIKE '%backup%' OR name LIKE '%system_info%'"))
            tables = [row[0] for row in result.fetchall()]
            
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                print(f"  ‚úÖ {table}")
        
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô –ì–û–¢–û–í–ê!")
        print("=" * 50)
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –ë–î —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ Pydantic —Å—Ö–µ–º—ã –≥–æ—Ç–æ–≤—ã")
        print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ API endpoints –≥–æ—Ç–æ–≤—ã")
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = create_clinic_management_tables()
    sys.exit(0 if success else 1)
