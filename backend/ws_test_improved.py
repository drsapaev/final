#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Ç–∞–±–ª–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""
import asyncio
import json
import urllib.parse
import urllib.request
from datetime import datetime

import websockets


async def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        data = urllib.parse.urlencode(
            {"username": "admin", "password": "admin"}
        ).encode()
        req = urllib.request.Request(
            "http://127.0.0.1:8000/api/v1/login",
            data=data,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
        )

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                data = json.loads(response.read().decode())
                return data.get("access_token")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


async def test_ws_queue_auth(token):
    """–¢–µ—Å—Ç WebSocket –æ—á–µ—Ä–µ–¥–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä—É—é /ws/queue —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    try:
        uri = (
            "ws://127.0.0.1:8000/ws/queue?department=ENT&date=2025-08-28&token=" + token
        )
        headers = {"Origin": "http://localhost:5173"}

        print(f"üì° –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫: {uri}")
        async with websockets.connect(uri, additional_headers=headers) as ws:
            print("üîó WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await ws.recv()
            data = json.loads(msg)
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {data}")

            if data.get("type") == "queue.connected":
                print("üéØ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ –æ—á–µ—Ä–µ–¥–∏!")

                # –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                print("‚è≥ –û–∂–∏–¥–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ (5 —Å–µ–∫)...")
                try:
                    msg = await asyncio.wait_for(ws.recv(), timeout=5.0)
                    data = json.loads(msg)
                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
                except asyncio.TimeoutError:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç - –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ 5 —Å–µ–∫—É–Ω–¥")
                except Exception as e:
                    print(f"üì® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


async def test_broadcast_trigger(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä broadcast —á–µ—Ä–µ–∑ API"""
    print("\nüîî –¢–µ—Å—Ç–∏—Ä—É—é —Ç—Ä–∏–≥–≥–µ—Ä broadcast...")

    headers = {"Authorization": f"Bearer {token}"}

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ–Ω—å (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å broadcast)
    print("üìÖ –û—Ç–∫—Ä—ã–≤–∞—é –¥–µ–Ω—å –¥–ª—è ENT...")
    try:
        req = urllib.request.Request(
            "http://127.0.0.1:8000/api/v1/appointments/open?department=ENT&date_str=2025-08-28&start_number=1",
            headers=headers,
            method="POST",
        )
        with urllib.request.urlopen(req) as response:
            print(f"üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è: {response.status} OK")
            response_data = response.read().decode()
            print(f"üìÖ –û—Ç–≤–µ—Ç: {response_data}")
    except urllib.error.HTTPError as e:
        print(f"üìÖ –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: {e.code}")
        try:
            error_details = e.read().decode()
            print(f"üìÖ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
        except Exception:
            pass
    except Exception as e:
        print(f"üìÖ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    # –í—ã–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–ª–æ–Ω (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å broadcast)
    print("\nüé´ –í—ã–¥–∞—é —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–ª–æ–Ω...")
    try:
        req = urllib.request.Request(
            "http://127.0.0.1:8000/api/v1/next-ticket?department=ENT&date=2025-08-28",
            headers=headers,
            method="POST",
        )
        with urllib.request.urlopen(req) as response:
            print(f"üé´ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–∞—á–∏: {response.status} OK")
            response_data = response.read().decode()
            print(f"üé´ –û—Ç–≤–µ—Ç: {response_data}")
    except urllib.error.HTTPError as e:
        print(f"üé´ –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏: {e.code}")
    except Exception as e:
        print(f"üé´ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def test_ws_with_broadcast(token):
    """–¢–µ—Å—Ç WebSocket —Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º broadcast"""
    print("\nüîÑ –¢–µ—Å—Ç WebSocket + Broadcast –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –≤ —Ñ–æ–Ω–µ
    ws_task = asyncio.create_task(test_ws_queue_auth(token))

    # –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await asyncio.sleep(2)

    # –¢—Ä–∏–≥–≥–µ—Ä–∏–º broadcast
    await test_broadcast_trigger(token)

    # –ñ–¥—ë–º WebSocket –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        await asyncio.wait_for(ws_task, timeout=10.0)
    except asyncio.TimeoutError:
        print("‚è∞ WebSocket —Ç–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç")
        ws_task.cancel()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π WebSocket —Ç–µ—Å—Ç —Ç–∞–±–ª–æ - {datetime.now()}")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = await get_auth_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return

    print(f"üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")

    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await test_ws_queue_auth(token)

    # –¢–µ—Å—Ç 2: API —Ç—Ä–∏–≥–≥–µ—Ä—ã
    await test_broadcast_trigger(token)

    # –¢–µ—Å—Ç 3: WebSocket + Broadcast –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await test_ws_with_broadcast(token)

    print("\n" + "=" * 60)
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π WebSocket —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")


if __name__ == "__main__":
    asyncio.run(main())
