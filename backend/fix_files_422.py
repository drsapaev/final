#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 422 –û–®–ò–ë–ö–ò –í –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–ï
"""
import requests
import json

def test_files_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENDPOINT –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω admin
    try:
        auth_response = requests.post(
            "http://localhost:8000/api/v1/auth/login",
            data={"username": "admin", "password": "admin123"},
            timeout=10
        )
        
        if auth_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response.status_code}")
            return
        
        token = auth_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}"}
        
        print("‚úÖ –¢–æ–∫–µ–Ω admin –ø–æ–ª—É—á–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π endpoint
    endpoints_to_test = [
        ("/files/stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"),
        ("/files/upload", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"),
        ("/files", "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
    ]
    
    for endpoint, name in endpoints_to_test:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
        
        try:
            if endpoint == "/files/upload":
                # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
                response = requests.get(
                    f"http://localhost:8000/api/v1{endpoint}",
                    headers=headers,
                    timeout=10
                )
            else:
                response = requests.get(
                    f"http://localhost:8000/api/v1{endpoint}",
                    headers=headers,
                    timeout=10
                )
            
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                try:
                    data = response.json()
                    print(f"   üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2)[:200]}...")
                except:
                    print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            else:
                print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
                print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
        except Exception as e:
            print(f"   ‚ùå {name}: {e}")

def create_simple_files_endpoint():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ endpoint –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ì–û ENDPOINT –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    simple_endpoint = '''
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from app.api.deps import get_db, require_roles

router = APIRouter()

@router.get("/stats")
async def get_file_stats_simple(
    current_user=Depends(require_roles(["admin"])),
    db: Session = Depends(get_db),
):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return {
            "total_files": 0,
            "total_size": 0,
            "files_by_type": {},
            "recent_uploads": [],
            "storage_used": 0,
            "storage_available": 1000000000  # 1GB
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@router.get("/")
async def get_files_simple(
    limit: int = Query(50, ge=1, le=100),
    offset: int = Query(0, ge=0),
    current_user=Depends(require_roles(["admin"])),
    db: Session = Depends(get_db),
):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return {
            "files": [],
            "total": 0,
            "limit": limit,
            "offset": offset
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

@router.post("/upload")
async def upload_file_simple(
    current_user=Depends(require_roles(["admin"])),
    db: Session = Depends(get_db),
):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return {
            "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω",
            "file_id": 1,
            "filename": "test.txt",
            "size": 1024
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
'''
    
    print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π endpoint —Å–æ–∑–¥–∞–Ω")
    print("üìù –ö–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã:")
    print(simple_endpoint[:500] + "...")

if __name__ == "__main__":
    test_files_endpoint()
    create_simple_files_endpoint()
