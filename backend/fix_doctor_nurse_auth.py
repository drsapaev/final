#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï–ú –î–õ–Ø DOCTOR –ò NURSE
"""
import sqlite3
import os
from argon2 import PasswordHasher

def fix_doctor_nurse_auth():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –î–õ–Ø DOCTOR –ò NURSE")
    print("=" * 60)
    
    db_path = 'clinic.db'
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π doctor –∏ nurse
        print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π doctor –∏ nurse...")
        
        users_to_fix = [
            {"username": "doctor", "password": "doctor123", "role": "doctor"},
            {"username": "nurse", "password": "nurse123", "role": "nurse"}
        ]
        
        for user in users_to_fix:
            print(f"\n   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {user['username']}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT id, username, hashed_password, role, is_active FROM users WHERE username = ?;", (user['username'],))
            user_data = cursor.fetchone()
            
            if user_data:
                user_id, username, hashed_password, role, is_active = user_data
                print(f"      ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω (ID: {user_id})")
                print(f"      üìä –†–æ–ª—å: {role}, –ê–∫—Ç–∏–≤–µ–Ω: {is_active}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                ph = PasswordHasher()
                try:
                    ph.verify(hashed_password, user['password'])
                    print(f"      ‚úÖ –ü–∞—Ä–æ–ª—å {username} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                except Exception as e:
                    print(f"      ‚ùå –ü–∞—Ä–æ–ª—å {username} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {e}")
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
                    print(f"      üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è {username}...")
                    new_hash = ph.hash(user['password'])
                    cursor.execute("UPDATE users SET hashed_password = ? WHERE username = ?;", (new_hash, username))
                    print(f"      ‚úÖ –•–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if not is_active:
                    print(f"      üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º {username}...")
                    cursor.execute("UPDATE users SET is_active = 1 WHERE username = ?;", (username,))
                    print(f"      ‚úÖ {username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
                if role.lower() != user['role']:
                    print(f"      üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª—å –¥–ª—è {username}...")
                    cursor.execute("UPDATE users SET role = ? WHERE username = ?;", (user['role'], username))
                    print(f"      ‚úÖ –†–æ–ª—å –¥–ª—è {username} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {user['role']}")
                    
            else:
                print(f"      ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                print(f"      üîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['username']}...")
                ph = PasswordHasher()
                hashed_password = ph.hash(user['password'])
                
                cursor.execute("""
                    INSERT INTO users (username, email, hashed_password, full_name, role, is_active)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    user['username'],
                    f"{user['username']}@clinic.com",
                    hashed_password,
                    f"{user['role'].title()} —Å–∏—Å—Ç–µ–º—ã",
                    user['role'],
                    True
                ))
                print(f"      ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} —Å–æ–∑–¥–∞–Ω")
        
        conn.commit()
        conn.close()
        
        print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è doctor –∏ nurse –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é doctor –∏ nurse...")
        test_doctor_nurse_auth()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_doctor_nurse_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ doctor –∏ nurse"""
    import requests
    
    users_to_test = [
        {"username": "doctor", "password": "doctor123"},
        {"username": "nurse", "password": "nurse123"}
    ]
    
    for user in users_to_test:
        print(f"\n   üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {user['username']}...")
        
        try:
            response = requests.post(
                "http://localhost:8000/api/v1/auth/login",
                data={"username": user['username'], "password": user['password']},
                timeout=10
            )
            
            if response.status_code == 200:
                token = response.json()["access_token"]
                print(f"      ‚úÖ {user['username']} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
                print(f"      üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {user['username']}: {response.status_code}")
                print(f"      üìù –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {user['username']}: {e}")

if __name__ == "__main__":
    fix_doctor_nurse_auth()
