"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
import requests
import json
import sys

BASE_URL = 'http://127.0.0.1:8000'

def test_user_login_and_role(username, password, expected_role, expected_redirect=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    
    # –õ–æ–≥–∏–Ω
    login_url = f'{BASE_URL}/api/v1/auth/login'
    login_data = {
        'username': username,
        'password': password,
        'grant_type': 'password'
    }
    
    try:
        response = requests.post(login_url, data=login_data)
        if response.status_code != 200:
            print(f"‚ùå –õ–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è: {response.status_code}")
            return False
            
        token_data = response.json()
        token = token_data.get('access_token')
        if not token:
            print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_url = f'{BASE_URL}/api/v1/auth/me'
        headers = {'Authorization': f'Bearer {token}'}
        profile_response = requests.get(profile_url, headers=headers)
        
        if profile_response.status_code != 200:
            print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω: {profile_response.status_code}")
            return False
            
        profile = profile_response.json()
        actual_role = profile.get('role')
        
        if actual_role != expected_role:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_role}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_role}'")
            return False
            
        print(f"‚úÖ {username}: —Ä–æ–ª—å '{actual_role}' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {username}: {e}")
        return False

def test_all_critical_users():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–æ–ª–∏
    critical_users = [
        ('admin', 'admin123', 'Admin'),
        ('registrar', 'registrar123', 'Registrar'),
        ('lab', 'lab123', 'Lab'),
        ('doctor', 'doctor123', 'Doctor'),
        ('cashier', 'cashier123', 'Cashier'),
        ('cardio', 'cardio123', 'cardio'),
        ('derma', 'derma123', 'derma'),
        ('dentist', 'dentist123', 'dentist'),
    ]
    
    results = []
    for username, password, expected_role in critical_users:
        result = test_user_login_and_role(username, password, expected_role)
        results.append((username, result))
        print()
    
    # –ò—Ç–æ–≥–∏
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for username, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {username}")
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π!")
        return False

def test_api_endpoints_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º API endpoints"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API endpoints")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞
    login_data = {'username': 'admin', 'password': 'admin123', 'grant_type': 'password'}
    response = requests.post(f'{BASE_URL}/api/v1/auth/login', data=login_data)
    if response.status_code != 200:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞")
        return False
        
    token = response.json().get('access_token')
    headers = {'Authorization': f'Bearer {token}'}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoints
    endpoints = [
        ('/api/v1/cardio/ecg', 'Cardio API'),
        ('/api/v1/derma/examinations', 'Derma API'),
        ('/api/v1/dental/examinations', 'Dental API'),
        ('/api/v1/lab/tests', 'Lab API'),
    ]
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f'{BASE_URL}{endpoint}', headers=headers)
            if response.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                print(f"‚úÖ {name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå {name}: –æ—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"‚ùå {name}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
    
    return True

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f'{BASE_URL}/api/v1/health')
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            sys.exit(1)
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success1 = test_all_critical_users()
    success2 = test_api_endpoints_access()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï!")
        sys.exit(1)
