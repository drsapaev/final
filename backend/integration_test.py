#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: password-reset, phone-verification, queue-reorder, AI, FCM, Telegram
"""

import asyncio
import aiohttp
import json
import time
from datetime import datetime
from typing import Dict, Any, List

class APIIntegrationTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = None
        self.auth_token = None
        self.test_results = []
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def test_endpoint(self, method: str, endpoint: str, data: Dict = None, 
                          headers: Dict = None, expected_status: int = 200,
                          test_name: str = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω endpoint"""
        url = f"{self.base_url}{endpoint}"
        
        if headers is None:
            headers = {}
            
        if self.auth_token:
            headers['Authorization'] = f'Bearer {self.auth_token}'
            
        start_time = time.time()
        
        try:
            async with self.session.request(method, url, json=data, headers=headers) as response:
                response_time = time.time() - start_time
                response_data = None
                
                try:
                    response_data = await response.json()
                except:
                    response_data = await response.text()
                
                result = {
                    'test_name': test_name or f"{method} {endpoint}",
                    'endpoint': endpoint,
                    'method': method,
                    'status_code': response.status,
                    'expected_status': expected_status,
                    'response_time': round(response_time, 3),
                    'success': response.status == expected_status,
                    'response_data': response_data,
                    'timestamp': datetime.now().isoformat()
                }
                
                self.test_results.append(result)
                return result
                
        except Exception as e:
            result = {
                'test_name': test_name or f"{method} {endpoint}",
                'endpoint': endpoint,
                'method': method,
                'status_code': 0,
                'expected_status': expected_status,
                'response_time': time.time() - start_time,
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            
            self.test_results.append(result)
            return result

    async def authenticate(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        print("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = {
            "email": "test@example.com",
            "password": "testpassword123",
            "full_name": "Test User"
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await self.test_endpoint("POST", "/api/v1/auth/register", test_user, 
                                expected_status=201, test_name="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        login_data = {
            "username": test_user["email"],
            "password": test_user["password"]
        }
        
        result = await self.test_endpoint("POST", "/api/v1/auth/login", login_data,
                                        test_name="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        
        if result['success'] and isinstance(result['response_data'], dict):
            self.auth_token = result['response_data'].get('access_token')
            if self.auth_token:
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
            else:
                print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    async def test_password_reset(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        print("\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è...")
        
        # –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–æ email
        await self.test_endpoint("POST", "/api/v1/password-reset/initiate", 
                                {"email": "test@example.com", "method": "email"},
                                test_name="–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ email")
        
        # –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        await self.test_endpoint("POST", "/api/v1/password-reset/initiate",
                                {"phone": "+998901234567", "method": "phone"},
                                test_name="–ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–±—Ä–æ—Å–∞
        await self.test_endpoint("GET", "/api/v1/password-reset/status/test@example.com",
                                test_name="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")

    async def test_phone_verification(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await self.test_endpoint("POST", "/api/v1/phone-verification/send-code",
                                {"phone": "+998901234567", "purpose": "registration"},
                                test_name="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (—Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–æ–¥–æ–º)
        await self.test_endpoint("POST", "/api/v1/phone-verification/verify-code",
                                {"phone": "+998901234567", "code": "123456"},
                                expected_status=400,
                                test_name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await self.test_endpoint("GET", "/api/v1/phone-verification/stats",
                                test_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    async def test_queue_reorder(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏
        await self.test_endpoint("GET", "/api/v1/queue-reorder/status/by-specialist/1",
                                test_name="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        await self.test_endpoint("POST", "/api/v1/queue-reorder/move-entry",
                                {"queue_id": 1, "entry_id": 1, "new_position": 2},
                                expected_status=404,  # –û–∂–∏–¥–∞–µ–º 404 –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                                test_name="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏")

    async def test_ai_functions(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
        symptoms_data = {
            "symptoms": ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Å–ª–∞–±–æ—Å—Ç—å"],
            "patient_age": 30,
            "patient_gender": "female"
        }
        await self.test_endpoint("POST", "/api/v1/ai/diagnose-symptoms", symptoms_data,
                                test_name="AI –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ —Ñ–∞–π–ª–∞ - –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É)
        await self.test_endpoint("POST", "/api/v1/ai/analyze-medical-image",
                                {"image_type": "xray", "description": "chest xray"},
                                expected_status=422,
                                test_name="AI –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ —Ñ–∞–π–ª–∞)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        drugs_data = {
            "medications": ["–∞—Å–ø–∏—Ä–∏–Ω", "–ø–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª"],
            "patient_age": 30,
            "patient_conditions": ["–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è"]
        }
        await self.test_endpoint("POST", "/api/v1/ai/check-drug-interactions", drugs_data,
                                test_name="AI –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤")

    async def test_fcm_notifications(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        print("\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_data = {
            "token": "test_fcm_token",
            "title": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "body": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "data": {"test": "true"}
        }
        await self.test_endpoint("POST", "/api/v1/fcm/send-notification", notification_data,
                                test_name="–û—Ç–ø—Ä–∞–≤–∫–∞ FCM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫
        await self.test_endpoint("POST", "/api/v1/fcm/subscribe-to-topic",
                                {"token": "test_fcm_token", "topic": "test_topic"},
                                test_name="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ FCM —Ç–æ–ø–∏–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FCM
        await self.test_endpoint("GET", "/api/v1/fcm/stats",
                                test_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FCM")

    async def test_telegram_bot(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram –±–æ—Ç"""
        print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_data = {
            "chat_id": "123456789",
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞",
            "parse_mode": "HTML"
        }
        await self.test_endpoint("POST", "/api/v1/telegram-bot/send-notification", telegram_data,
                                test_name="–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        await self.test_endpoint("GET", "/api/v1/telegram-bot/settings",
                                test_name="–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –±–æ—Ç–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        await self.test_endpoint("GET", "/api/v1/telegram-bot/stats",
                                test_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Telegram –±–æ—Ç–∞")

    async def test_health_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ health endpoints"""
        print("\n‚ù§Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints...")
        
        await self.test_endpoint("GET", "/health", test_name="Health check")
        await self.test_endpoint("GET", "/api/v1/health", test_name="API Health check")
        await self.test_endpoint("GET", "/docs", test_name="API Documentation")

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...\n")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await self.test_health_endpoints()
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await self.authenticate()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await self.test_password_reset()
        await self.test_phone_verification()
        await self.test_queue_reorder()
        await self.test_ai_functions()
        await self.test_fcm_notifications()
        await self.test_telegram_bot()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_report()

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("="*80)
        
        total_tests = len(self.test_results)
        successful_tests = len([r for r in self.test_results if r['success']])
        failed_tests = total_tests - successful_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")
        
        avg_response_time = sum(r['response_time'] for r in self.test_results) / total_tests
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}s")
        
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("-" * 80)
        
        for result in self.test_results:
            status_icon = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status_icon} {result['test_name']}")
            print(f"   {result['method']} {result['endpoint']}")
            print(f"   –°—Ç–∞—Ç—É—Å: {result['status_code']} (–æ–∂–∏–¥–∞–ª—Å—è {result['expected_status']})")
            print(f"   –í—Ä–µ–º—è: {result['response_time']}s")
            
            if not result['success']:
                if 'error' in result:
                    print(f"   –û—à–∏–±–∫–∞: {result['error']}")
                elif 'response_data' in result:
                    print(f"   –û—Ç–≤–µ—Ç: {result['response_data']}")
            print()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'failed_tests': failed_tests,
                'success_rate': (successful_tests/total_tests)*100,
                'avg_response_time': avg_response_time
            },
            'results': self.test_results
        }
        
        with open('integration_test_report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: integration_test_report.json")
        
        if failed_tests > 0:
            print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ {failed_tests} —Ç–µ—Å—Ç–∞—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ!")
        else:
            print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    async with APIIntegrationTester() as tester:
        await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())

