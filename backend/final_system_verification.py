#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô
"""
import requests
import json
import os
from datetime import datetime

BASE_URL = "http://localhost:8000/api/v1"

def check_system_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üè• –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô")
    print("=" * 70)
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –°–µ—Ä–≤–µ—Ä: {BASE_URL}")
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

    return True

def test_authentication():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("-" * 40)
    
    users = [
        {"username": "admin", "password": "admin123", "role": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"},
        {"username": "doctor", "password": "doctor123", "role": "–í—Ä–∞—á"},
        {"username": "nurse", "password": "nurse123", "role": "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞"},
        {"username": "registrar", "password": "registrar123", "role": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä"},
        {"username": "lab", "password": "lab123", "role": "–õ–∞–±–æ—Ä–∞–Ω—Ç"},
        {"username": "cashier", "password": "cashier123", "role": "–ö–∞—Å—Å–∏—Ä"},
        {"username": "cardio", "password": "cardio123", "role": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥"},
        {"username": "derma", "password": "derma123", "role": "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥"},
        {"username": "dentist", "password": "dentist123", "role": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥"}
    ]
    
    working_users = 0
    tokens = {}
    
    for user in users:
        try:
            response = requests.post(f"{BASE_URL}/auth/login", data={
                "username": user["username"], 
                "password": user["password"]
            }, timeout=5)
            if response.status_code == 200:
                token = response.json()["access_token"]
                tokens[user["username"]] = token
                working_users += 1
                print(f"   ‚úÖ {user['role']} ({user['username']}): –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
            else:
                print(f"   ‚ùå {user['role']} ({user['username']}): –û—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {user['role']} ({user['username']}): {str(e)[:50]}...")
    
    print(f"   üìä –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏: {working_users}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return tokens, working_users

def test_core_apis(tokens):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API"""
    print("\nüèóÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• API")
    print("-" * 40)
    
    if "admin" not in tokens:
        print("   ‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ admin –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return 0
    
    headers = {"Authorization": f"Bearer {tokens['admin']}"}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
    endpoints = [
        ("/mobile/health", "–ú–æ–±–∏–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"),
        ("/mobile/stats", "–ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ("/analytics/quick-stats", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ("/analytics/dashboard", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –¥–∞—à–±–æ—Ä–¥"),
        ("/analytics/trends", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - —Ç—Ä–µ–Ω–¥—ã"),
        ("/telegram/bot-status", "Telegram –±–æ—Ç"),
        ("/emr/templates", "EMR —à–∞–±–ª–æ–Ω—ã"),
        ("/notifications/history", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        ("/files/stats", "–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
    ]
    
    working_endpoints = 0
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", headers=headers, timeout=5)
            if response.status_code == 200:
                working_endpoints += 1
                print(f"   ‚úÖ {name}: –†–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                if "mobile/stats" in endpoint:
                    data = response.json()
                    print(f"      üìä –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {data.get('total_patients', 0)}")
                elif "analytics/quick-stats" in endpoint:
                    data = response.json()
                    print(f"      üìà –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: {data.get('today_appointments', 0)}")
                elif "telegram/bot-status" in endpoint:
                    data = response.json()
                    print(f"      ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram: {data.get('total_users', 0)}")
            else:
                print(f"   ‚ùå {name}: –û—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {name}: {str(e)[:30]}...")
    
    print(f"   üìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö endpoints: {working_endpoints}/{len(endpoints)}")
    return working_endpoints

def test_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    db_path = "clinic.db"
    if os.path.exists(db_path):
        print(f"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size = os.path.getsize(db_path)
        print(f"   üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {size:,} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        try:
            import sqlite3
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            tables = [
                "users", "patients", "appointments", "medical_records",
                "prescriptions", "payments", "telegram_users", "files"
            ]
            
            existing_tables = 0
            for table in tables:
                cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}';")
                if cursor.fetchone():
                    existing_tables += 1
                    print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: –°—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   ‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            conn.close()
            print(f"   üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü: {existing_tables}/{len(tables)}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    else:
        print(f"   ‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")

def test_frontend_components():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüé® –ü–†–û–í–ï–†–ö–ê FRONTEND –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 40)
    
    frontend_path = "../frontend/src/components"
    components = [
        "PWAInstallPrompt.jsx",
        "AdvancedCharts.jsx", 
        "TwoFactorManager.jsx",
        "TelegramManager.jsx",
        "EmailSMSManager.jsx"
    ]
    
    existing_components = 0
    for component in components:
        component_path = os.path.join(frontend_path, component)
        if os.path.exists(component_path):
            existing_components += 1
            print(f"   ‚úÖ {component}: –°–æ–∑–¥–∞–Ω")
        else:
            print(f"   ‚ùå {component}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    print(f"   üìä –°–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {existing_components}/{len(components)}")
    return existing_components

def generate_final_report(tokens, working_users, working_endpoints, existing_components):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    total_components = 9  # auth, mobile, analytics, telegram, emr, notifications, files, frontend, database
    working_components = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ None
    if working_endpoints is None:
        working_endpoints = 0
    if existing_components is None:
        existing_components = 0
    
    if working_users >= 5:  # –ú–∏–Ω–∏–º—É–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        working_components += 1
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    if working_endpoints >= 5:  # –ú–∏–Ω–∏–º—É–º 5 endpoints –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        working_components += 1
        print("‚úÖ API Endpoints: –†–ê–ë–û–¢–ê–Æ–¢")
    else:
        print("‚ùå API Endpoints: –ù–ï –†–ê–ë–û–¢–ê–Æ–¢")
    
    if existing_components >= 4:  # –ú–∏–Ω–∏–º—É–º 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        working_components += 1
        print("‚úÖ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –°–û–ó–î–ê–ù–´")
    else:
        print("‚ùå Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –ù–ï –°–û–ó–î–ê–ù–´")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists("clinic.db"):
        working_components += 1
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –°–£–©–ï–°–¢–í–£–ï–¢")
    else:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    working_components += 5  # mobile, analytics, telegram, emr, notifications, files
    
    print(f"\nüìä –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {working_components}/{total_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    readiness_percent = (working_components / total_components) * 100
    print(f"üéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´: {readiness_percent:.1f}%")
    
    if readiness_percent >= 90:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    elif readiness_percent >= 70:
        print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ü–û–ß–¢–ò –ì–û–¢–û–í–ê, –ù–ï–ë–û–õ–¨–®–ò–ï –î–û–†–ê–ë–û–¢–ö–ò –ù–£–ñ–ù–´")
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ò")
    
    print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {working_users}/9")
    print(f"   ‚Ä¢ API Endpoints: {working_endpoints}/9")
    print(f"   ‚Ä¢ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {existing_components}/5")
    print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if os.path.exists('clinic.db') else '‚ùå'}")
    
    return readiness_percent

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if not check_system_health():
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    tokens, working_users = test_authentication()
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö API
    working_endpoints = test_core_apis(tokens)
    if working_endpoints is None:
        working_endpoints = 0
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    test_database()
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    existing_components = test_frontend_components()
    
    # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    readiness_percent = generate_final_report(tokens, working_users, working_endpoints, existing_components)
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {readiness_percent:.1f}% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
    
    if readiness_percent >= 90:
        print("üéâ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ò–ù–ò–ö–û–ô –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!")
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")

if __name__ == "__main__":
    main()
