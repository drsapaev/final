#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏
"""
import json
import urllib.parse
import urllib.request
from datetime import datetime

BASE_URL = "http://127.0.0.1:8000"


def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    login_url = f"{BASE_URL}/api/v1/auth/login"
    login_data = {"username": "admin", "password": "admin"}

    try:
        form_data = urllib.parse.urlencode(login_data).encode("utf-8")
        req = urllib.request.Request(login_url, data=form_data)
        req.add_header("Content-Type", "application/x-www-form-urlencoded")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                token_data = json.loads(response_text)
                token = token_data["access_token"]
                print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                return token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.read().decode('utf-8')}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def test_print_ticket_pdf(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å –±–∏–ª–µ—Ç–∞ –≤ PDF"""
    print("\nüé´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å –±–∏–ª–µ—Ç–∞ –≤ PDF...")

    params = {"department": "THERAPY", "ticket_number": "001"}

    param_strings = [f"{k}={v}" for k, v in params.items()]
    print_url = f"{BASE_URL}/api/v1/print/ticket.pdf?{'&'.join(param_strings)}"

    try:
        req = urllib.request.Request(print_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_data = response.read()
                content_type = response.headers.get("Content-Type", "")

                print(f"    ‚úÖ PDF –±–∏–ª–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(response_data)} –±–∞–π—Ç")
                print(f"    üìÑ Content-Type: {content_type}")
                return True
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PDF –±–∏–ª–µ—Ç–∞: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PDF –±–∏–ª–µ—Ç–∞: {e}")
        return False


def test_print_invoice_pdf(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å —Å—á—ë—Ç–∞ –≤ PDF"""
    print("\nüßæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å —Å—á—ë—Ç–∞ –≤ PDF...")

    # –î–ª—è invoice.pdf –Ω—É–∂–µ–Ω visit_id, –∞ –Ω–µ department –∏ ticket_number
    params = {"visit_id": "1"}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –≤–∏–∑–∏—Ç–∞

    param_strings = [f"{k}={v}" for k, v in params.items()]
    print_url = f"{BASE_URL}/api/v1/print/invoice.pdf?{'&'.join(param_strings)}"

    try:
        req = urllib.request.Request(print_url)
        req.add_header("Authorization", f"Bearer {token}")

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_data = response.read()
                content_type = response.headers.get("Content-Type", "")

                print(f"    ‚úÖ PDF —Å—á—ë—Ç –ø–æ–ª—É—á–µ–Ω: {len(response_data)} –±–∞–π—Ç")
                print(f"    üìÑ Content-Type: {content_type}")
                return True
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PDF —Å—á—ë—Ç–∞: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PDF —Å—á—ë—Ç–∞: {e}")
        return False


def test_print_ticket_escpos(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å –±–∏–ª–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä (ESC/POS)"""
    print("\nüñ®Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å –±–∏–ª–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä (ESC/POS)...")

    # –î–ª—è ESC/POS –ø–µ—á–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–∞–∫ query parameters
    params = {"department": "THERAPY", "ticket_number": "1"}

    param_strings = [f"{k}={v}" for k, v in params.items()]
    print_url = f"{BASE_URL}/api/v1/print/ticket?{'&'.join(param_strings)}"

    try:
        req = urllib.request.Request(print_url, data=b"")  # –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –¥–ª—è POST
        req.add_header("Authorization", f"Bearer {token}")
        req.get_method = lambda: "POST"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ POST

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                print(f"    ‚úÖ –ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å: {response_text}")
                return True
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –±–∏–ª–µ—Ç–∞: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –±–∏–ª–µ—Ç–∞: {e}")
        return False


def test_print_receipt_escpos(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å —á–µ–∫–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä (ESC/POS)"""
    print("\nüßæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç—å —á–µ–∫–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä (ESC/POS)...")

    # –î–ª—è ESC/POS –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞ –Ω—É–∂–Ω—ã visit_id, amount –∏ currency –∫–∞–∫ query parameters
    params = {"visit_id": "1", "amount": "150000", "currency": "UZS"}

    param_strings = [f"{k}={v}" for k, v in params.items()]
    print_url = f"{BASE_URL}/api/v1/print/receipt?{'&'.join(param_strings)}"

    try:
        req = urllib.request.Request(print_url, data=b"")  # –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –¥–ª—è POST
        req.add_header("Authorization", f"Bearer {token}")
        req.get_method = lambda: "POST"  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ POST

        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                response_text = response.read().decode("utf-8")
                print(f"    ‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å: {response_text}")
                return True
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞: {response.status}")
                return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ–∫–∞: {e}")
        return False


def test_print_unauthorized():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–µ—á–∞—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–µ—á–∞—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    try:
        print_url = (
            f"{BASE_URL}/api/v1/print/ticket.pdf?department=THERAPY&ticket_number=001"
        )

        req = urllib.request.Request(print_url)

        with urllib.request.urlopen(req) as response:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {response.status}")
            return False
    except urllib.error.HTTPError as e:
        if e.code == 401:
            print("    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (401)")
            return True
        else:
            print(f"    ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP –∫–æ–¥ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {e.code}")
            return False
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∏ –∫–ª–∏–Ω–∏–∫–∏")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = get_auth_token()
    if not token:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–µ—á–∞—Ç—å –±–∏–ª–µ—Ç–∞ –≤ PDF", lambda: test_print_ticket_pdf(token)),
        ("–ü–µ—á–∞—Ç—å —Å—á—ë—Ç–∞ –≤ PDF", lambda: test_print_invoice_pdf(token)),
        ("–ü–µ—á–∞—Ç—å –±–∏–ª–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä", lambda: test_print_ticket_escpos(token)),
        ("–ü–µ—á–∞—Ç—å —á–µ–∫–∞ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä", lambda: test_print_receipt_escpos(token)),
        ("–î–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", test_print_unauthorized),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            print(f"\n{'='*60}")
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n" + "=" * 80)
    print("üñ®Ô∏è –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–ï–ß–ê–¢–ò:")

    for test_name, result in results:
        status = "–£–°–ü–ï–®–ù–û" if result else "–û–®–ò–ë–ö–ê"
        print(f"  ‚úÖ {test_name}: {status}")

    success_count = sum(1 for _, result in results if result)
    total_count = len(results)

    print(
        f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} ({success_count/total_count*100:.1f}%)"
    )

    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif success_count >= total_count * 0.8:
        print("üëç –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

    print("\n" + "=" * 80)
    print("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")


if __name__ == "__main__":
    main()
