#!/usr/bin/env python3
"""–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CI/CD"""

import os
import sys
import time

sys.path.insert(0, '.')


def debug_environment():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"  Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"  –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"  PYTHONPATH: {sys.path[:3]}")
    print(f"  DATABASE_URL: {os.environ.get('DATABASE_URL', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    print(f"  CORS_DISABLE: {os.environ.get('CORS_DISABLE', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    print(f"  WS_DEV_ALLOW: {os.environ.get('WS_DEV_ALLOW', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    print()


def debug_imports():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í:")
    try:
        from app.db.base import Base

        print("  ‚úÖ app.db.base –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ metadata: {len(Base.metadata.tables)}")
        for table_name in sorted(Base.metadata.tables.keys()):
            print(f"    - {table_name}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ app.db.base: {e}")
        return False

    try:
        print("  ‚úÖ app.db.session –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ app.db.session: {e}")
        return False

    try:
        print("  ‚úÖ app.models.user –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ app.models.user: {e}")
        return False

    try:
        print("  ‚úÖ app.core.security –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ app.core.security: {e}")
        return False

    try:
        print("  ‚úÖ sqlalchemy.text –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ sqlalchemy.text: {e}")
        return False

    print()
    return True


def debug_database_creation():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•:")

    try:
        from sqlalchemy import text

        from app.core.security import get_password_hash
        from app.db.base import Base
        from app.db.session import engine, SessionLocal
        from app.models.user import User

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("  üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        Base.metadata.create_all(bind=engine)
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
        with engine.connect() as conn:
            result = conn.execute(
                text(
                    "SELECT name FROM sqlite_master WHERE type='table' AND name='users'"
                )
            )
            if not result.fetchone():
                print("  ‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
                raise Exception("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(1)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
        db = SessionLocal()
        try:
            existing_admin = db.query(User).filter(User.username == "admin").first()
            if not existing_admin:
                admin_user = User(
                    username="admin",
                    email="admin@clinic.com",
                    hashed_password=get_password_hash("admin123"),
                    role="Admin",
                    is_active=True,
                    is_superuser=True,
                )
                db.add(admin_user)
                db.commit()
                print("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω")
            else:
                print("  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        finally:
            db.close()

        print("  üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        import traceback

        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò CI/CD")
    print("=" * 50)

    debug_environment()

    if not debug_imports():
        print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô: –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏")
        return False

    if not debug_database_creation():
        print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ë–î")
        return False

    print("=" * 50)
    print("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
