#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç—ã
"""
import asyncio
import os
import sys
from datetime import datetime

import httpx

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, '.')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DATABASE_URL', 'sqlite:///./test_clinic.db')
os.environ.setdefault('CORS_DISABLE', '1')
os.environ.setdefault('WS_DEV_ALLOW', '1')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from app.db.base import Base
from app.db.session import engine

BASE_URL = "http://127.0.0.1:8000"


async def test_payment_webhooks():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –æ–ø–ª–∞—Ç—ã...")

    async with httpx.AsyncClient(timeout=30.0) as client:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        try:
            response = await client.get(f"{BASE_URL}/api/v1/health")
            if response.status_code != 200:
                print(f"‚ùå Health check failed: {response.status_code}")
                return False
            print("‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞
        webhook_data = {
            "payment_id": "test_payment_001",
            "amount": 100000,
            "status": "completed",
            "timestamp": datetime.now().isoformat(),
        }

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫ —á–µ—Ä–µ–∑ API
            response = await client.post(
                f"{BASE_URL}/api/v1/webhooks/payment", json=webhook_data
            )

            if response.status_code in [200, 201]:
                print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            elif response.status_code == 404:
                print("‚ö†Ô∏è Endpoint –≤–µ–±—Ö—É–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω (404), –Ω–æ —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç—ã

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints_to_test = [
            "/api/v1/status",
            "/api/v1/queue/stats",
            "/api/v1/appointments/stats",
        ]

        for endpoint in endpoints_to_test:
            try:
                response = await client.get(f"{BASE_URL}{endpoint}")
                if response.status_code == 200:
                    print(f"‚úÖ {endpoint}: OK")
                else:
                    print(f"‚ö†Ô∏è {endpoint}: {response.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è {endpoint}: {e}")

    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        result = asyncio.run(test_payment_webhooks())

        if not result:
            print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            sys.exit(1)

        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(0)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
