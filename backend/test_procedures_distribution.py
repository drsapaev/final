#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import sqlite3

def test_procedures_distribution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    conn = sqlite3.connect('clinic.db')
    cursor = conn.cursor()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–û–¶–ï–î–£–†")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("""
        SELECT service_code, name, category_code, department 
        FROM services 
        WHERE service_code LIKE 'P%' OR service_code LIKE 'C%' OR service_code LIKE 'D_PROC%' OR service_code LIKE 'D%'
        ORDER BY service_code
    """)
    all_services = cursor.fetchall()
    
    print("\nüìã –í–°–ï –£–°–õ–£–ì–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("-" * 30)
    
    categories = {}
    for service in all_services:
        code, name, category, dept = service
        if category not in categories:
            categories[category] = []
        categories[category].append((code, name, dept))
    
    for category, services in categories.items():
        print(f"\nüè∑Ô∏è –ö–ê–¢–ï–ì–û–†–ò–Ø '{category}':")
        for code, name, dept in services:
            print(f"  {code} - {name} (–æ—Ç–¥–µ–ª: {dept})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–†–´–• –ö–û–î–û–í:")
    print("-" * 30)
    
    old_codes = ['D10', 'D11', 'D12', 'D13', 'D14', 'D20', 'D21', 'D22']
    for old_code in old_codes:
        cursor.execute("SELECT service_code FROM services WHERE service_code = ?", (old_code,))
        result = cursor.fetchone()
        if result:
            print(f"  ‚ùå {old_code} - –°–¢–ê–†–´–ô –ö–û–î –í–°–ï –ï–©–ï –°–£–©–ï–°–¢–í–£–ï–¢!")
        else:
            print(f"  ‚úÖ {old_code} - —Å—Ç–∞—Ä—ã–π –∫–æ–¥ —É–¥–∞–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–¥—ã
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ù–û–í–´–• –ö–û–î–û–í:")
    print("-" * 30)
    
    new_physio_codes = ['P01', 'P02', 'P03', 'P04', 'P05']
    new_derm_proc_codes = ['D_PROC01', 'D_PROC02', 'D_PROC03']
    
    print("–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è:")
    for code in new_physio_codes:
        cursor.execute("SELECT service_code, category_code FROM services WHERE service_code = ?", (code,))
        result = cursor.fetchone()
        if result:
            print(f"  ‚úÖ {code} - –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {result[1]}")
        else:
            print(f"  ‚ùå {code} - –ù–ï –ù–ê–ô–î–ï–ù!")
    
    print("–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:")
    for code in new_derm_proc_codes:
        cursor.execute("SELECT service_code, category_code FROM services WHERE service_code = ?", (code,))
        result = cursor.fetchone()
        if result:
            print(f"  ‚úÖ {code} - –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {result[1]}")
        else:
            print(f"  ‚ùå {code} - –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 30)
    
    cursor.execute("SELECT COUNT(*) FROM services WHERE category_code = 'P'")
    physio_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM services WHERE category_code = 'C'")
    cosmo_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM services WHERE category_code = 'D_PROC'")
    derm_proc_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM services WHERE category_code = 'D'")
    derm_count = cursor.fetchone()[0]
    
    print(f"üìã –§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è (P): {physio_count} —É—Å–ª—É–≥")
    print(f"üíÑ –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è (C): {cosmo_count} —É—Å–ª—É–≥")
    print(f"üî¨ –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (D_PROC): {derm_proc_count} —É—Å–ª—É–≥")
    print(f"üë®‚Äç‚öïÔ∏è –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (D): {derm_count} —É—Å–ª—É–≥")
    print(f"üéØ –ò–¢–û–ì–û –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ '–ü—Ä–æ—Ü–µ–¥—É—Ä—ã': {physio_count + cosmo_count + derm_proc_count} —É—Å–ª—É–≥")
    
    conn.close()

if __name__ == "__main__":
    test_procedures_distribution()
