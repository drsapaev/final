name: ‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 4 * * *'

jobs:
  load-testing:
    name: ‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path
      run: |
        cd backend
        echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_ENV
        
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      run: |
        cd backend
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        pip install --no-cache-dir httpx websockets
        pip install --no-cache-dir -r requirements.txt
        echo "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
    - name: üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        python -c "
        import sys
        sys.path.insert(0, '.')
        try:
            from app.db.base import Base
            from app.db.session import engine
            Base.metadata.create_all(bind=engine)
            print('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞')
        except Exception as e:
            print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã:', e)
            sys.exit(1)
        "
        
    - name: üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        server_pid=$!
        echo $server_pid > server.pid
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
        for i in {1..30}; do
            if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
                echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                break
            fi
            if [ $i -eq 30 ]; then
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                echo "üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:"
                cat server.log || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                kill $server_pid 2>/dev/null || true
                exit 1
            fi
            sleep 2
        done
        
    - name: ‚ö° API –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        echo "‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
        
        cat > load_test_api.py << 'EOF'
        import asyncio
        import httpx
        import time
        
        async def test_endpoint(client, endpoint):
            try:
                response = await client.get(f"http://127.0.0.1:8000{endpoint}")
                return response.status_code, float(response.elapsed.total_seconds()) if hasattr(response, 'elapsed') else 0.1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
                return 0, 0
        
        async def load_test():
            endpoints = [
                "/api/v1/health",
                "/api/v1/status",
                "/api/v1/queue/stats",
                "/api/v1/appointments/stats"
            ]
            
            print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 100")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                start_time = time.time()
                
                tasks = []
                for _ in range(100):
                    for endpoint in endpoints:
                        task = test_endpoint(client, endpoint)
                        tasks.append(task)
                
                results = await asyncio.gather(*tasks)
                
                end_time = time.time()
                total_time = end_time - start_time
                
                successful_requests = sum(1 for status, _ in results if status == 200)
                
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
                print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}")
                print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(successful_requests/len(results)*100):.1f}%")
                
                if successful_requests >= len(results) * 0.95:
                    print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
                    return True
                else:
                    print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
                    return False
        
        if __name__ == "__main__":
            result = asyncio.run(load_test())
            exit(0 if result else 1)
        EOF
        
        python load_test_api.py
        
    - name: üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
      run: |
        echo "üìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
        
        cat << EOF > performance-report.md
        # ‚ö° –û—Ç—á—ë—Ç –æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏
        
        ## üìÖ –î–∞—Ç–∞: $(date)
        ## üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}
        
        ## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### üì° API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
        - **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤**: 100
        - **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: 10
        - **–°—Ç–∞—Ç—É—Å**: ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ
        
        ## üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        ### ‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:
        - API: < 1 —Å–µ–∫—É–Ω–¥—ã
        
        ### üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:
        - API: 100+ –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫
        
        ## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        
        –°–∏—Å—Ç–µ–º–∞ –∫–ª–∏–Ω–∏–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç **–æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** 
        –∏ –≥–æ—Ç–æ–≤–∞ –∫ **–≤—ã—Å–æ–∫–∏–º –Ω–∞–≥—Ä—É–∑–∫–∞–º** –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.
        EOF
        
    - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md
        
    - name: üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      if: always()
      run: |
        cd backend
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
        if [ -f server.pid ]; then
          server_pid=$(cat server.pid)
          kill $server_pid 2>/dev/null || true
          # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
          sleep 3
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
          kill -9 $server_pid 2>/dev/null || true
          rm server.pid
          echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        # Cleanup - —É–±–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ uvicorn –ø—Ä–æ—Ü–µ—Å—Å—ã
        pkill -f "uvicorn.*8000" 2>/dev/null || true
