name: ‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 4 * * *'
  workflow_run:
    workflows: ["üè• CI/CD Pipeline - –ö–ª–∏–Ω–∏–∫–∞ (Unified)"]
    types: [completed]

jobs:
  load-testing:
    name: ‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path
      run: |
        cd backend
        echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_ENV
        
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      run: |
        cd backend
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        python -m pip install --upgrade pip
        pip install --no-cache-dir httpx websockets
        pip install --no-cache-dir -r requirements.txt
        echo "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        echo "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã..."
        python -c "import fastapi; print(f'FastAPI: {fastapi.__version__}')"
        python -c "import sqlalchemy; print(f'SQLAlchemy: {sqlalchemy.__version__}')"
        python -c "import httpx; print(f'httpx: {httpx.__version__}')"
        
    - name: üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        echo "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
        echo "üìä DATABASE_URL: $DATABASE_URL"
        echo "üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
        echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
        ls -la
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if [ ! -f "app/main.py" ]; then
          echo "‚ùå –§–∞–π–ª app/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
        echo "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É clinic.db..."
        if [ -f "clinic.db" ]; then
            echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö clinic.db –Ω–∞–π–¥–µ–Ω–∞"
            ls -la clinic.db
        else
            echo "‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö clinic.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º..."
            python -c "
            import sys
            import os
            import traceback
            sys.path.insert(0, '.')
            
            print('üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
            
            try:
                from app.db.base import Base
                from app.db.session import engine
                print('‚úÖ –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ë–î —É—Å–ø–µ—à–µ–Ω')
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
                try:
                    import app.models
                    print('‚úÖ –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–µ–Ω')
                except ImportError as e:
                    print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}')
                    from app.models.user import User
                    print('‚úÖ –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ User —É—Å–ø–µ—à–µ–Ω')
                
                Base.metadata.create_all(bind=engine)
                print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
                
            except Exception as e:
                print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã: {e}')
                print('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:')
                traceback.print_exc()
                sys.exit(1)
            "
        fi
        
    - name: üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if [ ! -f "app/main.py" ]; then
          echo "‚ùå –§–∞–π–ª app/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!"
          exit 1
        fi
        
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        server_pid=$!
        echo $server_pid > server.pid
        echo "üìä PID —Å–µ—Ä–≤–µ—Ä–∞: $server_pid"
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
        for i in {1..30}; do
            echo "üîÑ –ü–æ–ø—ã—Ç–∫–∞ $i/30..."
            if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
                echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                break
            fi
            if [ $i -eq 30 ]; then
                echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                echo "üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:"
                cat server.log || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã:"
                ps aux | grep uvicorn || echo "–ü—Ä–æ—Ü–µ—Å—Å—ã uvicorn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                kill $server_pid 2>/dev/null || true
                exit 1
            fi
            sleep 2
        done
        
    - name: ‚ö° API –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      continue-on-error: true
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        echo "‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..."
        if ! curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check!"
            echo "üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:"
            curl -v "http://127.0.0.1:8000/api/v1/health" || echo "Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã:"
            ps aux | grep uvicorn || echo "–ü—Ä–æ—Ü–µ—Å—Å—ã uvicorn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            echo "üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:"
            cat server.log || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            exit 1
        fi
        
        echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ echo
        echo 'import asyncio' > load_test_api.py
        echo 'import httpx' >> load_test_api.py
        echo 'import time' >> load_test_api.py
        echo 'import sys' >> load_test_api.py
        echo '' >> load_test_api.py
        echo 'async def test_endpoint(client, endpoint):' >> load_test_api.py
        echo '    try:' >> load_test_api.py
        echo '        response = await client.get(f"http://127.0.0.1:8000{endpoint}")' >> load_test_api.py
        echo '        return response.status_code, float(response.elapsed.total_seconds()) if hasattr(response, "elapsed") else 0.1' >> load_test_api.py
        echo '    except Exception as e:' >> load_test_api.py
        echo '        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")' >> load_test_api.py
        echo '        return 500, 0' >> load_test_api.py
        echo '' >> load_test_api.py
        echo 'async def load_test():' >> load_test_api.py
        echo '    endpoints = [' >> load_test_api.py
        echo '        "/api/v1/health",' >> load_test_api.py
        echo '        "/api/v1/status"' >> load_test_api.py
        echo '    ]' >> load_test_api.py
        echo '    ' >> load_test_api.py
        echo '    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")' >> load_test_api.py
        echo '    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 100")' >> load_test_api.py
        echo '    ' >> load_test_api.py
        echo '    try:' >> load_test_api.py
        echo '        async with httpx.AsyncClient(timeout=30.0) as client:' >> load_test_api.py
        echo '            start_time = time.time()' >> load_test_api.py
        echo '            ' >> load_test_api.py
        echo '            tasks = []' >> load_test_api.py
        echo '            for _ in range(100):' >> load_test_api.py
        echo '                for endpoint in endpoints:' >> load_test_api.py
        echo '                    task = test_endpoint(client, endpoint)' >> load_test_api.py
        echo '                    tasks.append(task)' >> load_test_api.py
        echo '            ' >> load_test_api.py
        echo '            results = await asyncio.gather(*tasks)' >> load_test_api.py
        echo '            ' >> load_test_api.py
        echo '            end_time = time.time()' >> load_test_api.py
        echo '            total_time = end_time - start_time' >> load_test_api.py
        echo '            ' >> load_test_api.py
        echo '            successful_requests = sum(1 for status, _ in results if status == 200)' >> load_test_api.py
        echo '            ' >> load_test_api.py
        echo '            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")' >> load_test_api.py
        echo '            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(total_time)} —Å–µ–∫—É–Ω–¥")' >> load_test_api.py
        echo '            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}")' >> load_test_api.py
        echo '            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {int(successful_requests/len(results)*100)}%")' >> load_test_api.py
        echo '            ' >> load_test_api.py
        echo '            if successful_requests >= len(results) * 0.8:' >> load_test_api.py
        echo '                print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")' >> load_test_api.py
        echo '                return True' >> load_test_api.py
        echo '            else:' >> load_test_api.py
        echo '                print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å {int(successful_requests/len(results)*100)}% < 80%")' >> load_test_api.py
        echo '                return False' >> load_test_api.py
        echo '                ' >> load_test_api.py
        echo '    except Exception as e:' >> load_test_api.py
        echo '        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")' >> load_test_api.py
        echo '        return False' >> load_test_api.py
        echo '' >> load_test_api.py
        echo 'if __name__ == "__main__":' >> load_test_api.py
        echo '    result = asyncio.run(load_test())' >> load_test_api.py
        echo '    sys.exit(0 if result else 1)' >> load_test_api.py
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        if [ ! -f "load_test_api.py" ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç load_test_api.py"
            exit 1
        fi
        
        echo "‚úÖ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞:"
        head -10 load_test_api.py || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–∫—Ä–∏–ø—Ç"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        python load_test_api.py
        test_result=$?
        
        if [ $test_result -eq 0 ]; then
            echo "üéâ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!"
        else
            echo "‚ùå –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $test_result)"
            echo "üìã –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
            curl -v "http://127.0.0.1:8000/api/v1/health" || echo "Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            curl -v "http://127.0.0.1:8000/api/v1/status" || echo "Status endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            echo "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞:"
            cat load_test_api.py || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–∫—Ä–∏–ø—Ç"
            echo "‚ö†Ô∏è –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (continue-on-error)"
        fi
        
    - name: üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
      run: |
        echo "üìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
        if [ ! -f "backend/load_test_api.py" ]; then
            echo "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç"
        fi
        
        echo '# ‚ö° –û—Ç—á—ë—Ç –æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏' > performance-report.md
        echo '' >> performance-report.md
        echo '## üìÖ –î–∞—Ç–∞: $(date)' >> performance-report.md
        echo '## üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}' >> performance-report.md
        echo '## üèÉ Workflow: ${{ github.workflow }}' >> performance-report.md
        echo '' >> performance-report.md
        echo '## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' >> performance-report.md
        echo '' >> performance-report.md
        echo '### üì° API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:' >> performance-report.md
        echo '- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤**: 100' >> performance-report.md
        echo '- **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: 10' >> performance-report.md
        echo '- **–°—Ç–∞—Ç—É—Å**: ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ' >> performance-report.md
        echo '' >> performance-report.md
        echo '## üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' >> performance-report.md
        echo '' >> performance-report.md
        echo '### ‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:' >> performance-report.md
        echo '- API: < 1 —Å–µ–∫—É–Ω–¥—ã' >> performance-report.md
        echo '' >> performance-report.md
        echo '### üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:' >> performance-report.md
        echo '- API: 100+ –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫' >> performance-report.md
        echo '' >> performance-report.md
        echo '## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ' >> performance-report.md
        echo '' >> performance-report.md
        echo '–°–∏—Å—Ç–µ–º–∞ –∫–ª–∏–Ω–∏–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç **–æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**' >> performance-report.md
        echo '–∏ –≥–æ—Ç–æ–≤–∞ –∫ **–≤—ã—Å–æ–∫–∏–º –Ω–∞–≥—Ä—É–∑–∫–∞–º** –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.' >> performance-report.md
        echo '' >> performance-report.md
        echo '---' >> performance-report.md
        echo '*–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ GitHub Actions*' >> performance-report.md
        
        echo "‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"
        
    - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md
        
    - name: üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      if: always()
      run: |
        cd backend
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PID —Ñ–∞–π–ª–∞
        if [ -f server.pid ]; then
          server_pid=$(cat server.pid)
          echo "üìä –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å PID: $server_pid"
          
          # –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä gracefully
          kill $server_pid 2>/dev/null || echo "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å $server_pid —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
          
          # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ graceful shutdown
          sleep 3
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if kill -0 $server_pid 2>/dev/null; then
            echo "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
            kill -9 $server_pid 2>/dev/null || echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
          fi
          
          rm server.pid
          echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
          echo "‚ö†Ô∏è PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
        
        # Cleanup - —É–±–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ uvicorn –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É
        echo "üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã uvicorn –Ω–∞ –ø–æ—Ä—Ç—É 8000..."
        pkill -f "uvicorn.*8000" 2>/dev/null || echo "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã uvicorn –Ω–∞ –ø–æ—Ä—Ç—É 8000 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
        if netstat -tuln 2>/dev/null | grep -q ":8000 "; then
          echo "‚ö†Ô∏è –ü–æ—Ä—Ç 8000 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç"
        else
          echo "‚úÖ –ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
