name: üè• CI/CD Pipeline - –ö–ª–∏–Ω–∏–∫–∞ (Unified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00
  workflow_dispatch:  # –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DATABASE_URL: 'sqlite:///./clinic.db'
  CORS_DISABLE: '1'
  WS_DEV_ALLOW: '1'

jobs:
  # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ ---
  code-quality:
    name: üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 ruff vulture bandit mypy
    
    - name: üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
      run: |
        cd backend
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞..."
        ls -la
        echo "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ app –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
        ls -la app/ || echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è app –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        echo "üé® –ü—Ä–∏–º–µ–Ω—è–µ–º black —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
        black . --diff || echo "‚ö†Ô∏è Black –Ω–µ —Å–º–æ–≥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"
        
        echo "üì¶ –ü—Ä–∏–º–µ–Ω—è–µ–º isort —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏–º–ø–æ—Ä—Ç–æ–≤..."
        isort . --diff || echo "‚ö†Ô∏è isort –Ω–µ —Å–º–æ–≥ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º pipeline)
        echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º black —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
        black . --check --diff || echo "‚ö†Ô∏è –ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        echo "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º isort —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É..."
        isort . --check-only --diff || echo "‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
    
    - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥
      run: |
        cd backend
        # Ruff –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        ruff check . --output-format=text || echo "‚ö†Ô∏è Ruff –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ"
        # Flake8 –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        flake8 app --select=E9,F63,F7,F82 --show-source --statistics || echo "‚ö†Ô∏è Flake8 –Ω–∞—à–µ–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
        # MyPy –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
        mypy app --ignore-missing-imports || echo "‚ö†Ô∏è MyPy –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏"
        # Vulture –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞
        vulture app --min-confidence 80 --exclude app/api/v1/endpoints/ || echo "‚ö†Ô∏è Vulture –Ω–∞—à–µ–ª –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥"
        # Bandit –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        bandit -r app -f json || echo "‚ö†Ô∏è Bandit –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

  # --- Frontend —Ç–µ—Å—Ç—ã ---
  frontend-tests:
    name: üé® Frontend —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd frontend
        npm ci
    
    - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥ frontend
      run: |
        cd frontend
        npm run lint || echo "‚ö†Ô∏è Frontend –ª–∏–Ω—Ç–∏–Ω–≥ –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã"
    
    - name: üß™ –¢–µ—Å—Ç—ã frontend
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || echo "‚ö†Ô∏è Frontend —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
    
    - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ frontend
      run: |
        cd frontend
        npm run build

  # --- Backend —Ç–µ—Å—Ç—ã ---
  backend-tests:
    name: üêç Backend —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: üóÑÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      run: |
        cd backend
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        python -c "
        from app.db.base import Base
        from app.db.session import engine
        Base.metadata.create_all(bind=engine)
        print('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
        "
    
    - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --dead-fixtures || echo "‚ö†Ô∏è Backend —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
    
    - name: üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: backend/htmlcov/

  # --- Security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
  security:
    name: üîí Security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
    
    - name: üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        # Safety –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
        safety check --json || true
        # Bandit –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
        bandit -r app -f json || true
        # Semgrep –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        semgrep --config=auto app/ || true

  # --- Docker —Å–±–æ—Ä–∫–∞ ---
  docker:
    name: üê≥ Docker —Å–±–æ—Ä–∫–∞
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, frontend-tests, backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile'–æ–≤
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Dockerfile'–æ–≤..."
        ls -la ops/
        if [ ! -f "ops/backend.Dockerfile" ]; then
          echo "‚ùå Backend Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
          exit 1
        fi
        if [ ! -f "ops/frontend.Dockerfile" ]; then
          echo "‚ùå Frontend Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
          exit 1
        fi
        echo "‚úÖ –í—Å–µ Dockerfile'—ã –Ω–∞–π–¥–µ–Ω—ã"
    
    - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Backend Docker
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./ops/backend.Dockerfile
        push: false
        tags: clinic-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: üèóÔ∏è –°–±–æ—Ä–∫–∞ Frontend Docker
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./ops/frontend.Dockerfile
        push: false
        tags: clinic-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã ---
  integration:
    name: üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: üóÑÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        python -c "
        from app.db.base import Base
        from app.db.session import engine
        Base.metadata.create_all(bind=engine)
        print('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
        "
    
    - name: üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        echo $! > server.pid
        sleep 10
    
    - name: üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
      run: |
        cd backend
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            cat server.log
            exit 1
          fi
          sleep 2
        done
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        python -m pytest tests/integration/ -v || true
    
    - name: üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
      if: always()
      run: |
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid) 2>/dev/null || true
        fi

  # --- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ---
  docs:
    name: üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme
    
    - name: üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      run: |
        cd backend
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OpenAPI —Å—Ö–µ–º—É
        python -c "
        from app.main import app
        import json
        openapi_schema = app.openapi()
        with open('openapi.json', 'w') as f:
            json.dump(openapi_schema, f, indent=2)
        print('‚úÖ OpenAPI —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞')
        "
    
    - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      uses: actions/upload-artifact@v4
      with:
        name: api-docs
        path: backend/openapi.json

  # --- Deploy Staging ---
  deploy-staging:
    name: üöÄ Deploy Staging
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker, integration, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üöÄ Deploy to Staging
      run: |
        echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ staging –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
        echo "üì¶ Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
        echo "üîí Security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        echo "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"

  # --- Deploy Production ---
  deploy-production:
    name: üåü Deploy Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker, integration, security, docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üåü Deploy to Production
      run: |
        echo "üåü –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
        echo "üì¶ Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
        echo "üîí Security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        echo "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

  # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
  notifications:
    name: üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
          echo "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"
        else
          echo "‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        fi
