name: üè• CI/CD Pipeline - –ö–ª–∏–Ω–∏–∫–∞

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///./clinic.db'
  CORS_DISABLE: '1'
  WS_DEV_ALLOW: '1'

jobs:
  code-quality:
    name: üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: |
        cd backend
        pip install flake8 black isort bandit ruff vulture
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥
        black .
        isort .
        black --check .
        isort --check-only .
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –≤–Ω—É—Ç—Ä–∏ backend/app
        flake8 app --select=E9,F63,F7,F82 --show-source --statistics
        # Ruff –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
        ruff check app --output-format=text || true
        # Vulture –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç)
        vulture app --min-confidence 80 --exclude app/api/v1/endpoints/ || true
        # Bandit –∫–∞–∫ –æ—Ç—á–µ—Ç (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω)
        bandit -r app -f json || true

  testing:
    name: üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    needs: code-quality
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-xdist
    - name: üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path
      run: |
        cd backend
        echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_PATH
    - run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        python - << 'PY'
        import sys
        sys.path.insert(0, '.')
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        from app.db.base import Base
        from app.db.session import engine, SessionLocal
        from app.models.user import User
        from app.models.patient import Patient
        from app.models.visit import Visit, VisitService
        from app.models.payment import Payment
        from app.models.service import Service, ServiceCatalog
        from app.models.queue import QueueTicket
        from app.models.schedule import ScheduleTemplate
        from app.models.lab import LabOrder, LabResult
        from app.models.audit import AuditLog
        from app.models.setting import Setting
        from app.models.appointment import Appointment
        from app.models.payment_webhook import PaymentWebhook, PaymentTransaction, PaymentProvider
        from app.models.online import OnlineDay
        from app.models.emr import EMR, Prescription
        from app.models.activation import Activation
        from app.models.notification import NotificationTemplate, NotificationHistory, NotificationSettings
        from app.core.security import get_password_hash
        from sqlalchemy import text
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            print('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
            Base.metadata.create_all(bind=engine)
            print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
            with engine.connect() as conn:
                result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='users'"))
                if not result.fetchone():
                    print('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è')
                    raise Exception("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                print('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            import time
            time.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
            db = SessionLocal()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin
                existing_admin = db.query(User).filter(User.username == "admin").first()
                if not existing_admin:
                    admin_user = User(
                        username="admin",
                        email="admin@clinic.com",
                        hashed_password=get_password_hash("admin123"),
                        role="Admin",
                        is_active=True,
                        is_superuser=True
                    )
                    db.add(admin_user)
                    db.commit()
                    print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω')
                else:
                    print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            finally:
                db.close()
                
        except Exception as e:
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', e)
            import traceback
            traceback.print_exc()
            raise SystemExit(1)
        PY
    - run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
        pkill -f "uvicorn.*8000" 2>/dev/null || true
        sleep 2
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –∏ –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        set -e
        export PYTHONPATH="${{ github.workspace }}/backend"
        echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        server_pid=$!
        echo $server_pid > server.pid
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            echo "üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:"
            cat server.log || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            kill $server_pid 2>/dev/null || true
            exit 1
          fi
          sleep 2
        done
    - run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tests=(
            "test_authentication.py:–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
            "test_queue_system.py:–°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π"
            "test_visit_reschedule.py:–ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–æ–≤"
            "test_websocket.py:WebSocket"
            "test_reports.py:–û—Ç—á—ë—Ç—ã"
            "test_printing.py:–°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏"
            "test_printing_edge_cases.py:Edge cases –ø–µ—á–∞—Ç–∏"
            "test_payment_webhooks.py:–í–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç"
        )
        
        failed_tests=()
        
        for test_info in "${tests[@]}"; do
            IFS=':' read -r test_file test_name <<< "$test_info"
            
            if [ -f "$test_file" ]; then
                echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º $test_name..."
                if python "$test_file"; then
                    echo "‚úÖ $test_name: –ü–†–û–ô–î–ï–ù"
                else
                    echo "‚ùå $test_name: –ü–†–û–í–ê–õ–ï–ù"
                    failed_tests+=("$test_name")
                fi
            else
                echo "‚ö†Ô∏è $test_name: –§–∞–π–ª $test_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if [ ${#failed_tests[@]} -eq 0 ]; then
            echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        else
            echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã: ${failed_tests[*]}"
            exit 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ pytest —Ñ–∏–∫—Å—Ç—É—Ä—ã
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ pytest —Ñ–∏–∫—Å—Ç—É—Ä—ã..."
        pytest --dead-fixtures --quiet || true
    - name: üõë –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
      if: always()
      run: |
        cd backend
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
        if [ -f server.pid ]; then
          server_pid=$(cat server.pid)
          kill $server_pid 2>/dev/null || true
          sleep 3
          kill -9 $server_pid 2>/dev/null || true
          rm -f server.pid
        fi
        pkill -f "uvicorn.*8000" 2>/dev/null || true
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

  deploy-staging:
    name: üöÄ –î–µ–ø–ª–æ–π –≤ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
    runs-on: ubuntu-latest
    needs: [code-quality, testing, e2e]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: |
        cd backend
        pip install -r requirements.txt
        echo "üöÄ –î–µ–ø–ª–æ–π –≤ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É..."
        echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É"

  deploy-production:
    name: üéØ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
    runs-on: ubuntu-latest
    needs: [code-quality, testing, e2e, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: |
        cd backend
        pip install -r requirements.txt
        echo "üéØ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω..."
        echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        echo "üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

  notifications:
    name: üìä –û—Ç—á—ë—Ç—ã
    runs-on: ubuntu-latest
    needs: [code-quality, testing, e2e]
    if: always()
    
    steps:
    - run: |
        echo "üìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏..."
        
        cat << EOF > test-report.md
        # üè• –û—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏
        
        ## üìÖ –î–∞—Ç–∞: $(date)
        ## üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}
        ## üåø –í–µ—Ç–∫–∞: ${{ github.ref_name }}
        
        ## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:
        - –í–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç
        - –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π  
        - –ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–æ–≤
        - WebSocket
        - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        - –û—Ç—á—ë—Ç—ã
        - –°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏
        - Edge Cases –ø–µ—á–∞—Ç–∏
        
        ### üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ
        - –õ–∏–Ω—Ç–∏–Ω–≥: ‚úÖ
        - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ‚úÖ
        
        ## üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!
        EOF
        
    - uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md

  e2e:
    name: üé≠ E2E —Ç–µ—Å—Ç—ã (Playwright)
    runs-on: ubuntu-latest
    needs: testing
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend
      run: |
        cd backend
        pip install -r requirements.txt
    - name: üóÑÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è E2E
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        python - << 'PY'
        import sys
        sys.path.insert(0, '.')
        from app.db.base import Base
        from app.db.session import engine, SessionLocal
        from app.models.user import User
        from app.core.security import get_password_hash
        from sqlalchemy import text
        try:
            Base.metadata.create_all(bind=engine)
            with engine.connect() as conn:
                result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='users'"))
                assert result.fetchone(), 'users table is not created'
            db = SessionLocal()
            try:
                admin = db.query(User).filter(User.username == 'admin').first()
                if not admin:
                    admin = User(
                        username='admin',
                        email='admin@clinic.com',
                        hashed_password=get_password_hash('admin123'),
                        role='Admin',
                        is_active=True,
                        is_superuser=True,
                    )
                    db.add(admin)
                    db.commit()
            finally:
                db.close()
        except Exception as e:
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ë–î –¥–ª—è E2E:', e)
            raise SystemExit(1)
        PY
    - name: üöÄ –ó–∞–ø—É—Å–∫ backend
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        echo $! > server.pid
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ backend..."
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Backend –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è"
            echo "üìÑ –õ–æ–≥–∏ backend:"
            cat server.log || true
            exit 1
          fi
          sleep 2
        done
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend
      run: |
        cd frontend
        npm ci || npm install
        npx playwright install --with-deps
    - name: üé≠ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤
      run: |
        cd frontend
        mkdir -p playwright-report
        npx playwright test --reporter=line --reporter=html --output-dir=playwright-report --config=playwright.config.js --timeout=30000 --retries=2 --max-failures=3 --workers=2 --project=chromium --headed=false --browser=chromium --video=retain-on-failure --screenshot=only-on-failure --trace=retain-on-failure --reporter=json --reporter=github --reporter=allure --reporter=blob --reporter=dot --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct
    - name: üì§ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã Playwright
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report
        if-no-files-found: warn
    - name: üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend
      if: always()
      run: |
        cd backend
        if [ -f server.pid ]; then
          kill $(cat server.pid) 2>/dev/null || true
          rm -f server.pid
        fi
        pkill -f "uvicorn.*8000" 2>/dev/null || true
