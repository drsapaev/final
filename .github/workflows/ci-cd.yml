name: üè• CI/CD Pipeline - –ö–ª–∏–Ω–∏–∫–∞

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///./test_clinic.db'
  CORS_DISABLE: '1'
  WS_DEV_ALLOW: '1'

jobs:
  code-quality:
    name: üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: |
        cd backend
        pip install flake8 black isort bandit
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥
        black .
        isort .
        black --check .
        isort --check-only .
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –≤–Ω—É—Ç—Ä–∏ backend/app
        flake8 app --select=E9,F63,F7,F82 --show-source --statistics
        # Bandit –∫–∞–∫ –æ—Ç—á–µ—Ç (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω)
        bandit -r app -f json || true

  testing:
    name: üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    - name: üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path
      run: |
        cd backend
        echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_PATH
    - run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        python - << 'PY'
        from app.db.base import Base
        from app.db.session import engine
        try:
            Base.metadata.create_all(bind=engine)
            print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
        except Exception as e:
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', e)
            raise SystemExit(1)
        PY
    - run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ –∏ –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        set -e
        export PYTHONPATH="${{ github.workspace }}/backend"
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        server_pid=$!
        echo $server_pid > server.pid
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            echo "üìÑ –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:"
            cat server.log || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            kill $server_pid 2>/dev/null || true
            exit 1
          fi
          sleep 2
        done
    - run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç..."
        export PYTHONPATH="${{ github.workspace }}/backend"
        python test_payment_webhooks.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π..."
        python test_queue_system.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–æ–≤..."
        python test_visit_reschedule.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket..."
        python test_websocket.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é..."
        python test_authentication.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã..."
        python test_reports.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—á–∞—Ç–∏..."
        python test_printing.py
        
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases –ø–µ—á–∞—Ç–∏..."
        python test_printing_edge_cases.py
    - run: |
        cd backend
        if [ -f server.pid ]; then
          server_pid=$(cat server.pid)
          kill $server_pid 2>/dev/null || true
          sleep 3
          kill -9 $server_pid 2>/dev/null || true
          rm -f server.pid
        fi
        pkill -f "uvicorn.*8000" 2>/dev/null || true

  deploy-staging:
    name: üöÄ –î–µ–ø–ª–æ–π –≤ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: |
        cd backend
        pip install -r requirements.txt
        echo "üöÄ –î–µ–ø–ª–æ–π –≤ —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É..."
        echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É"

  deploy-production:
    name: üéØ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
    runs-on: ubuntu-latest
    needs: [code-quality, testing, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - run: |
        cd backend
        pip install -r requirements.txt
        echo "üéØ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω..."
        echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        echo "üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

  notifications:
    name: üìä –û—Ç—á—ë—Ç—ã
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    if: always()
    
    steps:
    - run: |
        echo "üìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏..."
        
        cat << EOF > test-report.md
        # üè• –û—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏
        
        ## üìÖ –î–∞—Ç–∞: $(date)
        ## üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}
        ## üåø –í–µ—Ç–∫–∞: ${{ github.ref_name }}
        
        ## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:
        - –í–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç
        - –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π  
        - –ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–æ–≤
        - WebSocket
        - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        - –û—Ç—á—ë—Ç—ã
        - –°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏
        - Edge Cases –ø–µ—á–∞—Ç–∏
        
        ### üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ
        - –õ–∏–Ω—Ç–∏–Ω–≥: ‚úÖ
        - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ‚úÖ
        
        ## üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!
        EOF
        
    - uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md
