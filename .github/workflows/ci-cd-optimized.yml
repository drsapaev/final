name: üè• CI/CD Pipeline - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DATABASE_URL: 'sqlite:///./clinic.db'
  CORS_DISABLE: '1'
  WS_DEV_ALLOW: '1'

jobs:
  # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ ---
  code-quality:
    name: üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 ruff vulture bandit
    
    - name: üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
      run: |
        cd backend
        black . --check --diff
        isort . --check-only --diff
    
    - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥
      run: |
        cd backend
        flake8 app --select=E9,F63,F7,F82 --show-source --statistics
        ruff check app --output-format=text || true
        vulture app --min-confidence 80 --exclude app/api/v1/endpoints/ || true
        bandit -r app -f json || true

  # --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend ---
  backend-tests:
    name: üß™ Backend —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-xdist
    
    - name: üóÑÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        python -c "
        import sys
        sys.path.insert(0, '.')
        from app.db.base import Base
        from app.db.session import engine, SessionLocal
        from app.models.user import User
        from app.core.security import get_password_hash
        from sqlalchemy import text
        
        try:
            Base.metadata.create_all(bind=engine)
            with engine.connect() as conn:
                result = conn.execute(text('SELECT 1'))
                print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞')
            
            db = SessionLocal()
            try:
                admin = db.query(User).filter(User.username == 'admin').first()
                if not admin:
                    admin = User(
                        username='admin',
                        email='admin@clinic.com',
                        hashed_password=get_password_hash('admin123'),
                        role='Admin',
                        is_active=True,
                        is_superuser=True
                    )
                    db.add(admin)
                    db.commit()
                    print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω')
                else:
                    print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            finally:
                db.close()
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ë–î: {e}')
            raise SystemExit(1)
        "
    
    - name: üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        echo $! > server.pid
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            cat server.log
            exit 1
          fi
          sleep 2
        done
    
    - name: üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tests=(
            "test_authentication.py:–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
            "test_queue_system.py:–°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π"
            "test_visit_reschedule.py:–ü–µ—Ä–µ–Ω–æ—Å –≤–∏–∑–∏—Ç–æ–≤"
            "test_websocket.py:WebSocket"
            "test_reports.py:–û—Ç—á—ë—Ç—ã"
            "test_printing.py:–°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏"
            "test_printing_edge_cases.py:Edge cases –ø–µ—á–∞—Ç–∏"
            "test_payment_webhooks.py:–í–µ–±—Ö—É–∫–∏ –æ–ø–ª–∞—Ç"
        )
        
        failed_tests=()
        
        for test_info in "${tests[@]}"; do
            IFS=':' read -r test_file test_name <<< "$test_info"
            
            if [ -f "$test_file" ]; then
                echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º $test_name..."
                if python "$test_file"; then
                    echo "‚úÖ $test_name: –ü–†–û–ô–î–ï–ù"
                else
                    echo "‚ùå $test_name: –ü–†–û–í–ê–õ–ï–ù"
                    failed_tests+=("$test_name")
                fi
            else
                echo "‚ö†Ô∏è $test_name: –§–∞–π–ª $test_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            fi
        done
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if [ ${#failed_tests[@]} -eq 0 ]; then
            echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        else
            echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã: ${failed_tests[*]}"
            exit 1
        fi
    
    - name: üõë –û—á–∏—Å—Ç–∫–∞
      if: always()
      run: |
        cd backend
        if [ -f server.pid ]; then
          kill $(cat server.pid) 2>/dev/null || true
          rm server.pid
        fi
        pkill -f "uvicorn.*8000" 2>/dev/null || true

  # --- Frontend —Ç–µ—Å—Ç—ã ---
  frontend-tests:
    name: üé® Frontend —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üü¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      run: |
        cd frontend
        npm ci
    
    - name: üîç –õ–∏–Ω—Ç–∏–Ω–≥
      run: |
        cd frontend
        npm run lint || true
    
    - name: üèóÔ∏è –°–±–æ—Ä–∫–∞
      run: |
        cd frontend
        npm run build

  # --- E2E —Ç–µ—Å—Ç—ã ---
  e2e-tests:
    name: üé≠ E2E —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üü¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Backend
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Frontend
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps
    
    - name: üóÑÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        python -c "
        import sys
        sys.path.insert(0, '.')
        from app.db.base import Base
        from app.db.session import engine, SessionLocal
        from app.models.user import User
        from app.core.security import get_password_hash
        
        try:
            Base.metadata.create_all(bind=engine)
            db = SessionLocal()
            try:
                admin = db.query(User).filter(User.username == 'admin').first()
                if not admin:
                    admin = User(
                        username='admin',
                        email='admin@clinic.com',
                        hashed_password=get_password_hash('admin123'),
                        role='Admin',
                        is_active=True,
                        is_superuser=True
                    )
                    db.add(admin)
                    db.commit()
            finally:
                db.close()
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ë–î: {e}')
            raise SystemExit(1)
        "
    
    - name: üöÄ –ó–∞–ø—É—Å–∫ Backend
      run: |
        cd backend
        export DATABASE_URL="${{ env.DATABASE_URL }}"
        export CORS_DISABLE="${{ env.CORS_DISABLE }}"
        export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
        
        nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
        echo $! > server.pid
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:8000/api/v1/health" > /dev/null 2>&1; then
            echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            cat server.log
            exit 1
          fi
          sleep 2
        done
    
    - name: üöÄ –ó–∞–ø—É—Å–∫ Frontend
      run: |
        cd frontend
        npm run dev -- --port 3000 &
        echo $! > frontend.pid
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ frontend
        for i in {1..30}; do
          if curl -s -f "http://127.0.0.1:3000" > /dev/null 2>&1; then
            echo "‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "‚ùå Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
            exit 1
          fi
          sleep 2
        done
    
    - name: üé≠ –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤
      run: |
        cd frontend
        npx playwright test --reporter=line --timeout=30000 --retries=2 --max-failures=3 --workers=2 --project=chromium --headed=false --browser=chromium --video=retain-on-failure --screenshot=only-on-failure --trace=retain-on-failure --reporter=html --reporter=json --reporter=github --reporter=allure --reporter=blob --reporter=dot --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct --reporter=experimental-ct
    
    - name: üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: frontend/playwright-report
    
    - name: üõë –û—á–∏—Å—Ç–∫–∞
      if: always()
      run: |
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid) 2>/dev/null || true
          rm backend/server.pid
        fi
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) 2>/dev/null || true
          rm frontend/frontend.pid
        fi
        pkill -f "uvicorn.*8000" 2>/dev/null || true

  # --- –î–µ–ø–ª–æ–π –≤ staging ---
  deploy-staging:
    name: üöÄ –î–µ–ø–ª–æ–π –≤ staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    - name: üöÄ –î–µ–ø–ª–æ–π –≤ staging
      run: |
        echo "üöÄ –î–µ–ø–ª–æ–π –≤ staging —Å—Ä–µ–¥—É..."
        echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –≥–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é"

  # --- –î–µ–ø–ª–æ–π –≤ production ---
  deploy-production:
    name: üéØ –î–µ–ø–ª–æ–π –≤ production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - name: üéØ –î–µ–ø–ª–æ–π –≤ production
      run: |
        echo "üéØ –î–µ–ø–ª–æ–π –≤ production —Å—Ä–µ–¥—É..."
        echo "üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

  # --- –û—Ç—á–µ—Ç—ã ---
  notifications:
    name: üìä –û—Ç—á—ë—Ç—ã
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: always()
    
    steps:
    - name: üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
      run: |
        echo "üìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏..."
        
        cat << EOF > test-report.md
        # üè• –û—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏
        
        ## üìÖ –î–∞—Ç–∞: $(date)
        ## üîó –ö–æ–º–º–∏—Ç: ${{ github.sha }}
        ## üåø –í–µ—Ç–∫–∞: ${{ github.ref_name }}
        
        ## üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        ### ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:
        - Backend —Ç–µ—Å—Ç—ã
        - Frontend —Ç–µ—Å—Ç—ã  
        - E2E —Ç–µ—Å—Ç—ã
        
        ### üîç –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞:
        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ
        - –õ–∏–Ω—Ç–∏–Ω–≥: ‚úÖ
        - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ‚úÖ
        
        ## üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!
        EOF
        
    - uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-report.md
