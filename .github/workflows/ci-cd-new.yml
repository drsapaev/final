name: üè• CI/CD Pipeline - –ö–ª–∏–Ω–∏–∫–∞

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "0 3 * * 0"   # —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é ‚Äî –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///./test_clinic.db'
  CORS_DISABLE: '1'
  WS_DEV_ALLOW: '1'

jobs:

  # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ ---
  lint:
    name: üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          cd backend
          pip install black flake8 ruff isort
      - name: Black check
        run: |
          cd backend
          black --check .
      - name: Ruff lint
        run: |
          cd backend
          ruff check .
      - name: Flake8 lint
        run: |
          cd backend
          flake8 app --select=E9,F63,F7,F82 --show-source --statistics
      - name: Isort check
        run: |
          cd backend
          isort --check-only .

  # --- Unit tests + –ø–æ–∫—Ä—ã—Ç–∏–µ ---
  tests:
    name: üß™ Unit —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python path
        run: |
          cd backend
          echo "PYTHONPATH=${{ github.workspace }}/backend" >> $GITHUB_ENV
      - name: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        run: |
          cd backend
          export DATABASE_URL="${{ env.DATABASE_URL }}"
          export CORS_DISABLE="${{ env.CORS_DISABLE }}"
          export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
          
          python - << 'PY'
          import sys
          sys.path.insert(0, '.')
          
          # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
          from app.db.base import Base
          from app.db.session import engine, SessionLocal
          from app.models.user import User
          from app.models.patient import Patient
          from app.models.visit import Visit, VisitService
          from app.models.payment import Payment
          from app.models.service import Service, ServiceCatalog
          from app.models.queue import QueueTicket
          from app.models.schedule import ScheduleTemplate
          from app.models.lab import LabOrder, LabResult
          from app.models.audit import AuditLog
          from app.models.setting import Setting
          from app.models.appointment import Appointment
          from app.models.payment_webhook import PaymentWebhook, PaymentTransaction, PaymentProvider
          from app.models.online import OnlineDay
          from app.models.emr import EMR, Prescription
          from app.models.activation import Activation
          from app.models.notification import NotificationTemplate, NotificationHistory, NotificationSettings
          from app.core.security import get_password_hash
          
          try:
              # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
              print('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
              Base.metadata.create_all(bind=engine)
              print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
              
              # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
              db = SessionLocal()
              try:
                  existing_admin = db.query(User).filter(User.username == "admin").first()
                  if not existing_admin:
                      admin_user = User(
                          username="admin",
                          email="admin@clinic.com",
                          hashed_password=get_password_hash("admin123"),
                          role="Admin",
                          is_active=True,
                          is_superuser=True
                      )
                      db.add(admin_user)
                      db.commit()
                      print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —Å–æ–∑–¥–∞–Ω')
                  else:
                      print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
              finally:
                  db.close()
                  
          except Exception as e:
              print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î:', e)
              import traceback
              traceback.print_exc()
              raise SystemExit(1)
          PY
      - name: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        run: |
          cd backend
          export DATABASE_URL="${{ env.DATABASE_URL }}"
          export CORS_DISABLE="${{ env.CORS_DISABLE }}"
          export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
          pytest test_*.py -v --cov=app --cov-report=xml --cov-report=html
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # --- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
  security:
    name: üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        run: |
          cd backend
          pip install bandit safety pip-audit
      - name: Bandit scan
        run: |
          cd backend
          bandit -r app -ll -f json -o bandit-report.json || true
      - name: Safety check
        run: |
          cd backend
          safety check --json --output safety-report.json || true
      - name: Pip audit
        run: |
          cd backend
          pip-audit --format json --output pip-audit-report.json || true
      - name: –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
            backend/pip-audit-report.json

  # --- Docker build & test run ---
  docker:
    name: üê≥ Docker —Å–±–æ—Ä–∫–∞
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v4
      - name: Build Backend Docker image
        run: |
          cd ops
          docker build -f backend.Dockerfile -t clinic-backend ../backend
      - name: Build Frontend Docker image
        run: |
          cd ops
          docker build -f frontend.Dockerfile -t clinic-frontend ../frontend
      - name: Test Backend run
        run: |
          docker run --rm -d -p 8000:8000 -e DATABASE_URL="sqlite:///./test.db" clinic-backend &
          sleep 10
          curl -f http://localhost:8000/api/v1/health || exit 1
          docker stop $(docker ps -q --filter ancestor=clinic-backend) || true
      - name: Test Frontend run
        run: |
          docker run --rm -d -p 3000:3000 clinic-frontend &
          sleep 10
          curl -f http://localhost:3000 || exit 1
          docker stop $(docker ps -q --filter ancestor=clinic-frontend) || true

  # --- E2E —Ç–µ—Å—Ç—ã (Playwright) ---
  e2e:
    name: üé≠ E2E —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Frontend
        run: |
          cd frontend
          npm install
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright
        run: |
          cd frontend
          npx playwright install --with-deps
      - name: –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤
        run: |
          cd frontend
          # –ó–∞–ø—É—Å–∫–∞–µ–º backend –≤ —Ñ–æ–Ω–µ
          cd ../backend
          export DATABASE_URL="sqlite:///./test.db"
          export CORS_DISABLE="1"
          export WS_DEV_ALLOW="1"
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º frontend
          cd ../frontend
          npm run dev &
          echo $! > frontend.pid
          sleep 10
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright —Ç–µ—Å—Ç—ã
          npx playwright test --reporter=line || true
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
          if [ -f ../backend/server.pid ]; then
            kill $(cat ../backend/server.pid) 2>/dev/null || true
            rm ../backend/server.pid
          fi
          if [ -f frontend.pid ]; then
            kill $(cat frontend.pid) 2>/dev/null || true
            rm frontend.pid
          fi

  # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (Swagger/OpenAPI) ---
  docs:
    name: üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - uses: actions/checkout@v4
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          cd backend
          pip install -r requirements.txt
      - name: –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenAPI
        run: |
          cd backend
          export DATABASE_URL="${{ env.DATABASE_URL }}"
          export CORS_DISABLE="${{ env.CORS_DISABLE }}"
          export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
          
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAPI —Å—Ö–µ–º—ã
        run: |
          cd backend
          curl -f http://localhost:8000/openapi.json > openapi.json
          test -s openapi.json
          echo "‚úÖ OpenAPI —Å—Ö–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI
        run: |
          cd backend
          curl -f http://localhost:8000/docs > /dev/null
          echo "‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω"
      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md
        run: |
          test -f README.md
          test -f docs/README.md
          echo "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞"
      - name: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if: always()
        run: |
          cd backend
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

  # --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã ---
  integration:
    name: üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - uses: actions/checkout@v4
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          cd backend
          pip install -r requirements.txt
      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
        run: |
          cd backend
          export DATABASE_URL="${{ env.DATABASE_URL }}"
          export CORS_DISABLE="${{ env.CORS_DISABLE }}"
          export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
          
          # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          python - << 'PY'
          import sys
          sys.path.insert(0, '.')
          
          from app.db.base import Base
          from app.db.session import engine, SessionLocal
          from app.models.user import User
          from app.core.security import get_password_hash
          
          Base.metadata.create_all(bind=engine)
          db = SessionLocal()
          try:
              existing_admin = db.query(User).filter(User.username == "admin").first()
              if not existing_admin:
                  admin_user = User(
                      username="admin",
                      email="admin@clinic.com",
                      hashed_password=get_password_hash("admin123"),
                      role="Admin",
                      is_active=True,
                      is_superuser=True
                  )
                  db.add(admin_user)
                  db.commit()
          finally:
              db.close()
          PY
      - name: –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        run: |
          cd backend
          export DATABASE_URL="${{ env.DATABASE_URL }}"
          export CORS_DISABLE="${{ env.CORS_DISABLE }}"
          export WS_DEV_ALLOW="${{ env.WS_DEV_ALLOW }}"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
          nohup uvicorn app.main:app --host 127.0.0.1 --port 8000 > server.log 2>&1 &
          echo $! > server.pid
          sleep 10
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
          python test_authentication.py
          python test_queue_system.py
          python test_visit_reschedule.py
          python test_websocket.py
          python test_reports.py
          python test_printing.py
          python test_printing_edge_cases.py
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

  # --- –î–µ–ø–ª–æ–π –≤ staging ---
  deploy-staging:
    name: üöÄ –î–µ–ø–ª–æ–π –≤ staging
    runs-on: ubuntu-latest
    needs: integration
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: –î–µ–ø–ª–æ–π –≤ staging
        run: |
          echo "üöÄ –î–µ–ø–ª–æ–π –≤ staging —Å—Ä–µ–¥—É..."
          echo "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –≥–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é"

  # --- –î–µ–ø–ª–æ–π –≤ production ---
  deploy-production:
    name: üéØ –î–µ–ø–ª–æ–π –≤ production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: –î–µ–ø–ª–æ–π –≤ production
        run: |
          echo "üéØ –î–µ–ø–ª–æ–π –≤ production —Å—Ä–µ–¥—É..."
          echo "üéâ –°–∏—Å—Ç–µ–º–∞ –∫–ª–∏–Ω–∏–∫–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ!"
