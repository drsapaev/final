name: Role System Integrity Check

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/src/App.jsx'
      - 'frontend/src/pages/Login.jsx'
      - 'frontend/src/pages/UserSelect.jsx'
      - 'backend/app/api/v1/endpoints/*.py'
      - 'backend/app/core/role_validation.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/src/App.jsx'
      - 'frontend/src/pages/Login.jsx'
      - 'frontend/src/pages/UserSelect.jsx'
      - 'backend/app/api/v1/endpoints/*.py'
      - 'backend/app/core/role_validation.py'

jobs:
  role-system-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install requests
    
    - name: Setup test database
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        
        python - << 'PY'
        import sys
        import time
        sys.path.insert(0, '.')
        
        from app.db.base import Base
        from app.db.session import engine, SessionLocal
        from app.models.user import User
        from app.core.security import get_password_hash
        from sqlalchemy import text
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            print('üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–æ–ª–µ–π...')
            Base.metadata.create_all(bind=engine)
            print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ users –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
            with engine.connect() as conn:
                result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='users'"))
                if not result.fetchone():
                    print('‚ùå –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è')
                    raise Exception("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                print('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
            db = SessionLocal()
            try:
                test_users = [
                    ("admin", "admin123", "Admin"),
                    ("registrar", "registrar123", "Registrar"),
                    ("lab", "lab123", "Lab"),
                    ("doctor", "doctor123", "Doctor"),
                    ("cashier", "cashier123", "Cashier"),
                    ("cardio", "cardio123", "cardio"),
                    ("derma", "derma123", "derma"),
                    ("dentist", "dentist123", "dentist"),
                ]
                
                for username, password, role in test_users:
                    existing_user = db.query(User).filter(User.username == username).first()
                    if not existing_user:
                        user = User(
                            username=username,
                            email=f"{username}@clinic.com",
                            hashed_password=get_password_hash(password),
                            role=role,
                            is_active=True,
                            is_superuser=(role == "Admin")
                        )
                        db.add(user)
                        print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω')
                    else:
                        print(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                
                db.commit()
                print('‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–æ—Ç–æ–≤—ã')
            finally:
                db.close()
        except Exception as e:
            print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–æ–ª–µ–π:', e)
            import traceback
            traceback.print_exc()
            raise SystemExit(1)
        PY
    
    - name: Start backend server
      run: |
        cd backend
        export DATABASE_URL="sqlite:///./test_clinic.db"
        export CORS_DISABLE="1"
        export WS_DEV_ALLOW="1"
        python -m uvicorn app.main:app --host 127.0.0.1 --port 8000 &
        sleep 10
    
    - name: Run role system tests
      run: |
        cd backend
        python test_role_routing.py
    
    - name: Check system integrity
      run: |
        cd backend
        python check_system_integrity.py
    
    - name: Validate role consistency
      run: |
        cd backend
        python -c "
        from app.core.role_validation import validate_critical_user_roles
        if not validate_critical_user_roles():
            exit(1)
        print('‚úÖ Role validation passed')
        "
    
    - name: Stop backend server
      if: always()
      run: |
        echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
        pkill -f "uvicorn.*8000" 2>/dev/null || true
        echo "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
