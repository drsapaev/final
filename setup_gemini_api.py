"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API –∫–ª—é—á–∞
"""
import os
import sys
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

def setup_gemini_api():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª .env
    env_file = "backend/.env"
    
    if os.path.exists(env_file):
        print(f"‚úÖ –§–∞–π–ª {env_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        with open(env_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "GEMINI_API_KEY" in content:
            print("‚úÖ GEMINI_API_KEY —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ñ–∞–π–ª–µ")
        else:
            print("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            print("üìù –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å")
    else:
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/.env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   GEMINI_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å")
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    gemini_key = os.getenv("GEMINI_API_KEY")
    if gemini_key and gemini_key != "–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å":
        print(f"‚úÖ GEMINI_API_KEY: {'*' * 8}...{gemini_key[-4:]}")
    else:
        print("‚ùå GEMINI_API_KEY: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    print(f"\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print(f"1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á: https://makersuite.google.com/app/apikey")
    print(f"2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/.env")
    print(f"3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: GEMINI_API_KEY=AIza...")
    print(f"4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env
    create_env = input(f"\n‚ùì –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {env_file}? (y/n): ").lower().strip()
    
    if create_env == 'y':
        api_key = input("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Gemini API –∫–ª—é—á: ").strip()
        
        if api_key and api_key.startswith("AIza"):
            env_content = f"""# AI Provider API Keys
GEMINI_API_KEY={api_key}

# MCP Settings
MCP_ENABLED=true
MCP_LOG_REQUESTS=true
MCP_FALLBACK_TO_DIRECT=true
MCP_REQUEST_TIMEOUT=30
MCP_HEALTH_CHECK_INTERVAL=60
MCP_MAX_BATCH_SIZE=10

# Database
DATABASE_URL=sqlite:///./clinic.db

# Auth
SECRET_KEY=dev-secret-key-for-clinic-management-system-change-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=10080

# CORS
BACKEND_CORS_ORIGINS=["http://localhost:5173","http://127.0.0.1:5173","http://localhost:8080","http://127.0.0.1:8080"]
"""
            
            with open(env_file, 'w', encoding='utf-8') as f:
                f.write(env_content)
            
            print(f"‚úÖ –§–∞–π–ª {env_file} —Å–æ–∑–¥–∞–Ω —Å Gemini API –∫–ª—é—á–æ–º")
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza'")
    else:
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤—ã—à–µ")

if __name__ == "__main__":
    setup_gemini_api()
