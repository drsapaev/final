#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —ç—Ç–∞–ø–∞ 3: –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤ –∏ –Ω–µ –∏–º–µ—é—Ç MUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

import fs from 'fs';
import path from 'path';

// –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const filesToCheck = [
  'src/components/auth/LoginForm.jsx',
  'src/components/admin/AdminNavigation.jsx',
  'src/components/buttons/ModernButton.jsx',
  'src/design-system/components/Input.jsx'
];

function checkFile(filePath) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${filePath}`);

  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if (filePath.includes('LoginForm.jsx')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const checks = [
      { pattern: /import.*colors.*from.*tokens/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤' },
      { pattern: /import.*Button.*Card.*Input.*from.*design-system/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞-—Å–∏—Å—Ç–µ–º—ã' },
      { pattern: /colors\.primary\[500\]/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π —Ü–≤–µ—Ç primary' },
      { pattern: /colors\.semantic\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞' },
      { pattern: /colors\.status\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è MUI
    const muiChecks = [
      { pattern: /from '@mui/, desc: '–ù–µ—Ç MUI –∏–º–ø–æ—Ä—Ç–æ–≤' },
      { pattern: /Box|Card|TextField|Button.*from '@mui/, desc: '–ù–µ—Ç MUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤' }
    ];

    muiChecks.forEach(check => {
      const found = !check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });
  }

  else if (filePath.includes('AdminNavigation.jsx')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const checks = [
      { pattern: /colors\.primary\[500\]/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã primary' },
      { pattern: /colors\.semantic\.surface/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞' },
      { pattern: /colors\.border\.medium/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const oldColors = ['#3b82f6', '#60a5fa'];
    oldColors.forEach(color => {
      const found = !content.includes(color);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ü–≤–µ—Ç ${color}`);
    });
  }

  else if (filePath.includes('ModernButton.jsx')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
    const checks = [
      { pattern: /colors\.primary\[500\]/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã primary' },
      { pattern: /colors\.status\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞' },
      { pattern: /colors\.semantic\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const found = !content.includes('getColor(');
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ getColor`);
  }

  else if (filePath.includes('Input.jsx')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Input –¥–∏–∑–∞–π–Ω–∞-—Å–∏—Å—Ç–µ–º—ã
    const checks = [
      { pattern: /colors\.semantic\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞' },
      { pattern: /colors\.border\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü' },
      { pattern: /colors\.status\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const oldColors = ['colors.brand.error', 'colors.neutral.gray'];
    oldColors.forEach(color => {
      const found = !content.includes(color);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ü–≤–µ—Ç ${color}`);
    });
  }

  return true;
}

function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 3: –ú–ò–ì–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í\n');
  console.log('=' .repeat(60));

  let allPassed = true;

  filesToCheck.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    const success = checkFile(filePath);

    if (!success) {
      allPassed = false;
    }
  });

  console.log('\n' + '=' .repeat(60));
  console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);

  if (allPassed) {
    console.log(`   ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!`);
    console.log(`   üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã`);
    console.log(`   üöÄ –ì–æ—Ç–æ–≤ –∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ`);
    return true;
  } else {
    console.log(`   ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´`);
    console.log(`   üîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`);
    return false;
  }
}

function generateMigrationReport() {
  console.log('\nüìã –û–¢–ß–ï–¢ –ú–ò–ì–†–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:');
  console.log('=' .repeat(60));

  console.log('‚úÖ –ú–ò–ì–†–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:');
  console.log('   ‚Ä¢ LoginForm.jsx - —Ñ–æ—Ä–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  console.log('   ‚Ä¢ AdminNavigation.jsx - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('   ‚Ä¢ ModernButton.jsx - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏');

  console.log('\nüîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  console.log('   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞-—Å–∏—Å—Ç–µ–º—ã');
  console.log('   ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ');
  console.log('   ‚Ä¢ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏');

  console.log('\nüéØ –¶–ï–õ–ò –î–û–°–¢–ò–ì–ù–£–¢–´:');
  console.log('   ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã MUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  console.log('   ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–∫–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤');
  console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞');
}

function main() {
  const testsPassed = runTests();
  generateMigrationReport();

  if (testsPassed) {
    console.log('\nüöÄ –≠–¢–ê–ü 3 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
    console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –û–®–ò–ë–ö–ò –ü–ï–†–ï–î –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï–ú');
    process.exit(1);
  }
}

main();
