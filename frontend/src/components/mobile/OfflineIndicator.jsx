import React, { useState, useEffect } from 'react';
import { Wifi, WifiOff, RefreshCw, CheckCircle, AlertCircle } from 'lucide-react';
import { Card, Button, Badge } from '../ui/native';

/**
 * –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 */
const OfflineIndicator = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [showIndicator, setShowIndicator] = useState(false);
  const [syncStatus, setSyncStatus] = useState('idle'); // idle, syncing, success, error
  const [cachedData, setCachedData] = useState({
    appointments: 0,
    patients: 0,
    notifications: 0
  });

  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      setShowIndicator(true);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowIndicator(false);
      }, 3000);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      syncData();
    };

    const handleOffline = () => {
      setIsOnline(false);
      setShowIndicator(true);
      loadCachedData();
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    loadCachedData();

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const loadCachedData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ IndexedDB –∏–ª–∏ localStorage
      const cachedAppointments = localStorage.getItem('cached_appointments');
      const cachedPatients = localStorage.getItem('cached_patients');
      const cachedNotifications = localStorage.getItem('cached_notifications');

      setCachedData({
        appointments: cachedAppointments ? JSON.parse(cachedAppointments).length : 0,
        patients: cachedPatients ? JSON.parse(cachedPatients).length : 0,
        notifications: cachedNotifications ? JSON.parse(cachedNotifications).length : 0
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  const syncData = async () => {
    setSyncStatus('syncing');
    
    try {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
      const promises = [
        fetch('/api/v1/mobile/appointments', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
          }
        }),
        fetch('/api/v1/mobile/notifications', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
          }
        })
      ];

      const responses = await Promise.allSettled(promises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      responses.forEach((response, index) => {
        if (response.status === 'fulfilled' && response.value.ok) {
          const dataKey = index === 0 ? 'cached_appointments' : 'cached_notifications';
          response.value.json().then(data => {
            localStorage.setItem(dataKey, JSON.stringify(data));
          });
        }
      });

      setSyncStatus('success');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setShowIndicator(false);
        setSyncStatus('idle');
      }, 2000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      setSyncStatus('error');
      
      setTimeout(() => {
        setSyncStatus('idle');
      }, 3000);
    }
  };

  const retryConnection = () => {
    if (navigator.onLine) {
      syncData();
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      alert('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
    }
  };

  if (!showIndicator && isOnline) {
    return null;
  }

  return (
    <div className="fixed top-4 left-4 right-4 z-50 md:left-auto md:right-4 md:max-w-sm">
      <Card className={`transition-all duration-300 ${
        isOnline 
          ? 'bg-green-50 border-green-200' 
          : 'bg-orange-50 border-orange-200'
      }`}>
        <div className="p-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              {isOnline ? (
                <Wifi className="w-4 h-4 text-green-600" />
              ) : (
                <WifiOff className="w-4 h-4 text-orange-600" />
              )}
              
              <span className={`font-medium text-sm ${
                isOnline ? 'text-green-800' : 'text-orange-800'
              }`}>
                {isOnline ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º'}
              </span>
              
              {syncStatus === 'syncing' && (
                <RefreshCw className="w-3 h-3 text-blue-600 animate-spin" />
              )}
              
              {syncStatus === 'success' && (
                <CheckCircle className="w-3 h-3 text-green-600" />
              )}
              
              {syncStatus === 'error' && (
                <AlertCircle className="w-3 h-3 text-red-600" />
              )}
            </div>
            
            {!isOnline && (
              <Button
                onClick={retryConnection}
                size="sm"
                variant="outline"
                className="text-xs"
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </Button>
            )}
          </div>
          
          {!isOnline && (
            <div className="mt-2 text-xs text-orange-700">
              <p className="mb-1">–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ:</p>
              <div className="flex space-x-4">
                {cachedData.appointments > 0 && (
                  <span>üìÖ {cachedData.appointments} –∑–∞–ø–∏—Å–µ–π</span>
                )}
                {cachedData.patients > 0 && (
                  <span>üë• {cachedData.patients} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</span>
                )}
                {cachedData.notifications > 0 && (
                  <span>üîî {cachedData.notifications} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
                )}
              </div>
            </div>
          )}
          
          {isOnline && syncStatus === 'success' && (
            <p className="mt-1 text-xs text-green-700">
              –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            </p>
          )}
          
          {syncStatus === 'error' && (
            <p className="mt-1 text-xs text-red-700">
              –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            </p>
          )}
        </div>
      </Card>
    </div>
  );
};

export default OfflineIndicator;

