import React, { useEffect, useMemo, useRef, useState } from "react";
import { api, getApiBase } from "../api/client.js";

/**
 * РўР°Р±Р»РёС†Р° РґРЅРµРІРЅРѕР№ РѕС‡РµСЂРµРґРё + РІС‹РґР°С‡Р° С‚Р°Р»РѕРЅР°.
 * Backend:
 *  - GET  /queues/stats?department=Reg&d=YYYY-MM-DD
 *  - POST /queues/next-ticket?department=Reg&d=YYYY-MM-DD
 *  - WS   /ws/queue?department=Reg&date_str=YYYY-MM-DD (broadcast stats)
 *
 * Props:
 *  - department: string
 *  - date: string (YYYY-MM-DD)
 */
export default function QueueTable({ department, date }) {
  const [stats, setStats] = useState(null);
  const [err, setErr] = useState("");
  const wsRef = useRef(null);
  const [busy, setBusy] = useState(false);

  async function load() {
    setErr("");
    try {
      const s = await api.get("/queues/stats", { params: { department, d: date } });
      setStats(s);
    } catch (e) {
      setErr(e?.data?.detail || e?.message || "РћС€РёР±РєР° Р·Р°РіСЂСѓР·РєРё");
    }
  }

  useEffect(() => {
    load();
    const t = setInterval(load, 15000); // fallback-РїСѓР»Р»РёРЅРі
    return () => clearInterval(t);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [department, date]);

  useEffect(() => {
    try {
      // ws://host/ws/queue?department=...&date_str=YYYY-MM-DD
      const base = new URL(getApiBase());
      const proto = base.protocol === "https:" ? "wss:" : "ws:";
      const url = `${proto}//${base.host}/ws/queue?department=${encodeURIComponent(
        department
      )}&date_str=${encodeURIComponent(date)}`;

      const ws = new WebSocket(url);
      wsRef.current = ws;

      ws.onmessage = (ev) => {
        try {
          const msg = JSON.parse(ev.data);
          if (msg?.type === "queue.update" && msg?.payload) {
            setStats((cur) => ({ ...(cur || {}), ...(msg.payload || {}) }));
          }
        } catch {}
      };
      ws.onerror = () => {};
      ws.onclose = () => {};

      return () => {
        try {
          ws.close(1000, "bye");
        } catch {}
        wsRef.current = null;
      };
    } catch {
      // ignore
      return () => {};
    }
  }, [department, date]);

  async function nextTicket() {
    setBusy(true);
    setErr("");
    try {
      const res = await api.post("/queues/next-ticket", { params: { department, d: date } });
      // res: {ticket, stats}
      setStats(res?.stats || null);
    } catch (e) {
      setErr(e?.data?.detail || e?.message || "РћС€РёР±РєР° РІС‹РґР°С‡Рё С‚Р°Р»РѕРЅР°");
    } finally {
      setBusy(false);
    }
  }

  const info = useMemo(() => {
    const s = stats || {};
    return [
      { k: "РќР°С‡Р°Р»СЊРЅС‹Р№ РЅРѕРјРµСЂ", v: s.start_number ?? "вЂ”" },
      { k: "РџРѕСЃР»РµРґРЅРёР№ С‚Р°Р»РѕРЅ", v: s.last_ticket ?? "вЂ”" },
      { k: "РћР¶РёРґР°СЋС‚", v: s.waiting ?? "вЂ”" },
      { k: "Р’ СЂР°Р±РѕС‚Рµ", v: s.serving ?? "вЂ”" },
      { k: "Р“РѕС‚РѕРІРѕ", v: s.done ?? "вЂ”" },
    ];
  }, [stats]);

  return (
    <div style={{ display: "grid", gap: 10 }}>
      {err && <div style={errBox}>{String(err)}</div>}

      <div style={statGrid}>
        {info.map((x) => (
          <div key={x.k} style={statCard}>
            <div style={{ fontSize: 12, opacity: 0.6 }}>{x.k}</div>
            <div style={{ fontSize: 22, fontWeight: 800 }}>{x.v}</div>
          </div>
        ))}
      </div>

      <div>
        <button onClick={nextTicket} disabled={busy} style={btnPrimary}>
          {busy ? "..." : "Р’С‹РґР°С‚СЊ СЃР»РµРґСѓСЋС‰РёР№ С‚Р°Р»РѕРЅ"}
        </button>
      </div>
    </div>
  );
}

const statGrid = { display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(160px, 1fr))", gap: 10 };
const statCard = { border: "1px solid #eee", borderRadius: 12, padding: 12, background: "#fff" };
const btnPrimary = { padding: "8px 12px", borderRadius: 10, border: "1px solid #0284c7", background: "#0ea5e9", color: "#fff", cursor: "pointer" };
const errBox = { color: "#7f1d1d", background: "#fee2e2", border: "1px solid #fecaca", borderRadius: 8, padding: 8 };
