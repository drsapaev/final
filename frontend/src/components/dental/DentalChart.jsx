import React, { useState, useCallback, useRef, useEffect } from 'react';
import { 
  Save, 
  RotateCcw, 
  ZoomIn, 
  ZoomOut, 
  Download, 
  Upload,
  Trash2,
  Edit3,
  CheckCircle,
  AlertCircle,
  XCircle,
  Plus,
  Minus
} from 'lucide-react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ö–µ–º—ã –∑—É–±–æ–≤ –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å—Ö–µ–º—É –∑—É–±–æ–≤ (–≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç–∏)
 * - –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤ (–∑–¥–æ—Ä–æ–≤—ã–π, –∫–∞—Ä–∏–µ—Å, –ø–ª–æ–º–±–∞, –∫–æ—Ä–æ–Ω–∫–∞, —É–¥–∞–ª–µ–Ω –∏ —Ç.–¥.)
 * - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ö–µ–º
 * - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
 */
const DentalChart = ({ 
  patientId, 
  initialData = null, 
  onSave, 
  onTreatmentPlan,
  readOnly = false 
}) => {
  const [teeth, setTeeth] = useState({});
  const [selectedTooth, setSelectedTooth] = useState(null);
  const [showToothModal, setShowToothModal] = useState(false);
  const [zoom, setZoom] = useState(1);
  const [pan, setPan] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  const [treatmentPlan, setTreatmentPlan] = useState([]);
  const [showTreatmentModal, setShowTreatmentModal] = useState(false);
  
  const canvasRef = useRef(null);
  const containerRef = useRef(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑—É–±–æ–≤
  useEffect(() => {
    if (initialData) {
      setTeeth(initialData.teeth || {});
      setTreatmentPlan(initialData.treatmentPlan || []);
    } else {
      initializeTeeth();
    }
  }, [initialData]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑—É–±–æ–≤ (32 –∑—É–±–∞)
  const initializeTeeth = () => {
    const teethData = {};
    
    // –í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å (11-18, 21-28)
    for (let i = 11; i <= 18; i++) {
      teethData[i] = { 
        id: i, 
        position: 'upper', 
        status: 'healthy', 
        condition: '', 
        treatment: '', 
        notes: '',
        x: 0, y: 0
      };
    }
    for (let i = 21; i <= 28; i++) {
      teethData[i] = { 
        id: i, 
        position: 'upper', 
        status: 'healthy', 
        condition: '', 
        treatment: '', 
        notes: '',
        x: 0, y: 0
      };
    }
    
    // –ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å (31-38, 41-48)
    for (let i = 31; i <= 38; i++) {
      teethData[i] = { 
        id: i, 
        position: 'lower', 
        status: 'healthy', 
        condition: '', 
        treatment: '', 
        notes: '',
        x: 0, y: 0
      };
    }
    for (let i = 41; i <= 48; i++) {
      teethData[i] = { 
        id: i, 
        position: 'lower', 
        status: 'healthy', 
        condition: '', 
        treatment: '', 
        notes: '',
        x: 0, y: 0
      };
    }
    
    setTeeth(teethData);
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤ –∏ –∏—Ö —Ü–≤–µ—Ç–∞
  const toothStatuses = {
    healthy: { color: '#10b981', label: '–ó–¥–æ—Ä–æ–≤—ã–π', icon: 'ü¶∑' },
    caries: { color: '#f59e0b', label: '–ö–∞—Ä–∏–µ—Å', icon: 'ü¶∑' },
    filling: { color: '#3b82f6', label: '–ü–ª–æ–º–±–∞', icon: 'ü¶∑' },
    crown: { color: '#8b5cf6', label: '–ö–æ—Ä–æ–Ω–∫–∞', icon: 'üëë' },
    bridge: { color: '#06b6d4', label: '–ú–æ—Å—Ç', icon: 'üåâ' },
    implant: { color: '#84cc16', label: '–ò–º–ø–ª–∞–Ω—Ç', icon: 'üî©' },
    missing: { color: '#6b7280', label: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', icon: '‚ùå' },
    root_canal: { color: '#dc2626', label: '–õ–µ—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤', icon: 'üîß' },
    extraction: { color: '#ef4444', label: '–ö —É–¥–∞–ª–µ–Ω–∏—é', icon: '‚ö†Ô∏è' },
    planned: { color: '#f97316', label: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', icon: 'üìã' }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∑—É–±—É
  const handleToothClick = (toothId) => {
    if (readOnly) return;
    
    setSelectedTooth(toothId);
    setShowToothModal(true);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–∞
  const updateTooth = (toothId, updates) => {
    setTeeth(prev => ({
      ...prev,
      [toothId]: { ...prev[toothId], ...updates }
    }));
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã
  const handleSave = () => {
    const data = {
      teeth,
      treatmentPlan,
      patientId,
      timestamp: new Date().toISOString()
    };
    
    if (onSave) {
      onSave(data);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
  const addToTreatmentPlan = (toothId, treatment) => {
    const tooth = teeth[toothId];
    const newItem = {
      id: Date.now(),
      toothId,
      toothNumber: toothId,
      treatment,
      status: 'planned',
      priority: 'medium',
      estimatedCost: 0,
      estimatedTime: 0,
      notes: ''
    };
    
    setTreatmentPlan(prev => [...prev, newItem]);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleZoom = (direction) => {
    const newZoom = direction === 'in' ? zoom * 1.2 : zoom / 1.2;
    setZoom(Math.max(0.5, Math.min(3, newZoom)));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleMouseDown = (e) => {
    if (e.target === canvasRef.current) {
      setIsDragging(true);
      setDragStart({ x: e.clientX - pan.x, y: e.clientY - pan.y });
    }
  };

  const handleMouseMove = (e) => {
    if (isDragging) {
      setPan({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y
      });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑—É–±–∞
  const renderTooth = (toothId, tooth) => {
    const status = toothStatuses[tooth.status] || toothStatuses.healthy;
    const isSelected = selectedTooth === toothId;
    
    return (
      <div
        key={toothId}
        className={`tooth ${isSelected ? 'selected' : ''}`}
        style={{
          position: 'absolute',
          left: tooth.x,
          top: tooth.y,
          width: '40px',
          height: '40px',
          borderRadius: '50%',
          backgroundColor: status.color,
          border: isSelected ? '3px solid #000' : '2px solid #fff',
          cursor: readOnly ? 'default' : 'pointer',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '16px',
          fontWeight: 'bold',
          color: '#fff',
          textShadow: '1px 1px 2px rgba(0,0,0,0.5)',
          transition: 'all 0.2s ease',
          transform: `scale(${zoom})`,
          zIndex: isSelected ? 10 : 1
        }}
        onClick={() => handleToothClick(toothId)}
        title={`–ó—É–± ${toothId}: ${status.label}`}
      >
        {toothId}
      </div>
    );
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–µ–ª—é—Å—Ç–∏
  const renderJaw = (isUpper = true) => {
    const jawTeeth = Object.values(teeth).filter(tooth => 
      tooth.position === (isUpper ? 'upper' : 'lower')
    );
    
    return (
      <div 
        className={`jaw ${isUpper ? 'upper' : 'lower'}`}
        style={{
          position: 'relative',
          width: '100%',
          height: '120px',
          marginBottom: '20px',
          border: '2px solid #e5e7eb',
          borderRadius: '8px',
          backgroundColor: '#f9fafb'
        }}
      >
        {jawTeeth.map(tooth => renderTooth(tooth.id, tooth))}
      </div>
    );
  };

  return (
    <div className="dental-chart-container" style={{ width: '100%', height: '100%' }}>
      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="toolbar" style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '10px',
        backgroundColor: '#f3f4f6',
        borderBottom: '1px solid #d1d5db',
        marginBottom: '20px'
      }}>
        <div className="toolbar-left" style={{ display: 'flex', gap: '10px' }}>
          <button
            onClick={() => handleZoom('in')}
            className="btn btn-sm"
            title="–£–≤–µ–ª–∏—á–∏—Ç—å"
          >
            <ZoomIn size={16} />
          </button>
          <button
            onClick={() => handleZoom('out')}
            className="btn btn-sm"
            title="–£–º–µ–Ω—å—à–∏—Ç—å"
          >
            <ZoomOut size={16} />
          </button>
          <button
            onClick={() => setZoom(1)}
            className="btn btn-sm"
            title="–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±"
          >
            <RotateCcw size={16} />
          </button>
        </div>

        <div className="toolbar-center" style={{ display: 'flex', gap: '10px' }}>
          <span style={{ fontSize: '14px', fontWeight: '500' }}>
            –ú–∞—Å—à—Ç–∞–±: {Math.round(zoom * 100)}%
          </span>
        </div>

        <div className="toolbar-right" style={{ display: 'flex', gap: '10px' }}>
          {!readOnly && (
            <>
              <button
                onClick={() => setShowTreatmentModal(true)}
                className="btn btn-primary btn-sm"
                title="–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è"
              >
                <Plus size={16} />
                –ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è
              </button>
              <button
                onClick={handleSave}
                className="btn btn-success btn-sm"
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
              >
                <Save size={16} />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </>
          )}
        </div>
      </div>

      {/* –°—Ö–µ–º–∞ –∑—É–±–æ–≤ */}
      <div 
        ref={containerRef}
        className="dental-chart"
        style={{
          position: 'relative',
          width: '100%',
          height: '300px',
          overflow: 'hidden',
          border: '1px solid #d1d5db',
          borderRadius: '8px',
          backgroundColor: '#fff',
          transform: `scale(${zoom}) translate(${pan.x}px, ${pan.y}px)`,
          transformOrigin: 'top left'
        }}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={handleMouseUp}
      >
        {/* –í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å */}
        <div style={{ textAlign: 'center', marginBottom: '10px' }}>
          <h3 style={{ margin: 0, fontSize: '16px', color: '#374151' }}>–í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å</h3>
        </div>
        {renderJaw(true)}
        
        {/* –ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å */}
        <div style={{ textAlign: 'center', marginBottom: '10px' }}>
          <h3 style={{ margin: 0, fontSize: '16px', color: '#374151' }}>–ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å</h3>
        </div>
        {renderJaw(false)}
      </div>

      {/* –õ–µ–≥–µ–Ω–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑—É–±–æ–≤ */}
      <div className="tooth-legend" style={{
        marginTop: '20px',
        padding: '15px',
        backgroundColor: '#f9fafb',
        borderRadius: '8px',
        border: '1px solid #e5e7eb'
      }}>
        <h4 style={{ margin: '0 0 10px 0', fontSize: '14px', fontWeight: '600' }}>
          –°–æ—Å—Ç–æ—è–Ω–∏—è –∑—É–±–æ–≤:
        </h4>
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '8px' }}>
          {Object.entries(toothStatuses).map(([key, status]) => (
            <div key={key} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <div style={{
                width: '20px',
                height: '20px',
                borderRadius: '50%',
                backgroundColor: status.color,
                border: '1px solid #d1d5db'
              }} />
              <span style={{ fontSize: '12px' }}>{status.label}</span>
            </div>
          ))}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑—É–±–∞ */}
      {showToothModal && selectedTooth && (
        <ToothModal
          tooth={teeth[selectedTooth]}
          toothId={selectedTooth}
          onUpdate={(updates) => updateTooth(selectedTooth, updates)}
          onClose={() => setShowToothModal(false)}
          onAddToTreatment={addToTreatmentPlan}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è */}
      {showTreatmentModal && (
        <TreatmentPlanModal
          treatmentPlan={treatmentPlan}
          onUpdate={setTreatmentPlan}
          onClose={() => setShowTreatmentModal(false)}
          teeth={teeth}
        />
      )}
    </div>
  );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑—É–±–∞
const ToothModal = ({ tooth, toothId, onUpdate, onClose, onAddToTreatment }) => {
  const [formData, setFormData] = useState({
    status: tooth.status || 'healthy',
    condition: tooth.condition || '',
    treatment: tooth.treatment || '',
    notes: tooth.notes || ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onUpdate(formData);
    onClose();
  };

  return (
    <div className="modal-overlay" style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000
    }}>
      <div className="modal-content" style={{
        backgroundColor: '#fff',
        borderRadius: '8px',
        padding: '20px',
        width: '400px',
        maxHeight: '80vh',
        overflow: 'auto'
      }}>
        <h3 style={{ margin: '0 0 20px 0' }}>–ó—É–± {toothId}</h3>
        
        <form onSubmit={handleSubmit}>
          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>
              –°–æ—Å—Ç–æ—è–Ω–∏–µ:
            </label>
            <select
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value })}
              style={{
                width: '100%',
                padding: '8px',
                border: '1px solid #d1d5db',
                borderRadius: '4px'
              }}
            >
              <option value="healthy">–ó–¥–æ—Ä–æ–≤—ã–π</option>
              <option value="caries">–ö–∞—Ä–∏–µ—Å</option>
              <option value="filling">–ü–ª–æ–º–±–∞</option>
              <option value="crown">–ö–æ—Ä–æ–Ω–∫–∞</option>
              <option value="bridge">–ú–æ—Å—Ç</option>
              <option value="implant">–ò–º–ø–ª–∞–Ω—Ç</option>
              <option value="missing">–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</option>
              <option value="root_canal">–õ–µ—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤</option>
              <option value="extraction">–ö —É–¥–∞–ª–µ–Ω–∏—é</option>
              <option value="planned">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
            </select>
          </div>

          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>
              –î–∏–∞–≥–Ω–æ–∑:
            </label>
            <input
              type="text"
              value={formData.condition}
              onChange={(e) => setFormData({ ...formData, condition: e.target.value })}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑"
              style={{
                width: '100%',
                padding: '8px',
                border: '1px solid #d1d5db',
                borderRadius: '4px'
              }}
            />
          </div>

          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>
              –õ–µ—á–µ–Ω–∏–µ:
            </label>
            <input
              type="text"
              value={formData.treatment}
              onChange={(e) => setFormData({ ...formData, treatment: e.target.value })}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è"
              style={{
                width: '100%',
                padding: '8px',
                border: '1px solid #d1d5db',
                borderRadius: '4px'
              }}
            />
          </div>

          <div style={{ marginBottom: '20px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: '500' }}>
              –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
            </label>
            <textarea
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏"
              rows={3}
              style={{
                width: '100%',
                padding: '8px',
                border: '1px solid #d1d5db',
                borderRadius: '4px',
                resize: 'vertical'
              }}
            />
          </div>

          <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
            <button
              type="button"
              onClick={onClose}
              style={{
                padding: '8px 16px',
                border: '1px solid #d1d5db',
                borderRadius: '4px',
                backgroundColor: '#fff',
                cursor: 'pointer'
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              style={{
                padding: '8px 16px',
                border: 'none',
                borderRadius: '4px',
                backgroundColor: '#3b82f6',
                color: '#fff',
                cursor: 'pointer'
              }}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è
const TreatmentPlanModal = ({ treatmentPlan, onUpdate, onClose, teeth }) => {
  const [newItem, setNewItem] = useState({
    toothId: '',
    treatment: '',
    priority: 'medium',
    estimatedCost: 0,
    estimatedTime: 0,
    notes: ''
  });

  const addItem = () => {
    if (newItem.toothId && newItem.treatment) {
      const item = {
        id: Date.now(),
        ...newItem,
        status: 'planned'
      };
      onUpdate([...treatmentPlan, item]);
      setNewItem({
        toothId: '',
        treatment: '',
        priority: 'medium',
        estimatedCost: 0,
        estimatedTime: 0,
        notes: ''
      });
    }
  };

  const removeItem = (id) => {
    onUpdate(treatmentPlan.filter(item => item.id !== id));
  };

  return (
    <div className="modal-overlay" style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000
    }}>
      <div className="modal-content" style={{
        backgroundColor: '#fff',
        borderRadius: '8px',
        padding: '20px',
        width: '600px',
        maxHeight: '80vh',
        overflow: 'auto'
      }}>
        <h3 style={{ margin: '0 0 20px 0' }}>–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è</h3>
        
        {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
        <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#f9fafb', borderRadius: '8px' }}>
          <h4 style={{ margin: '0 0 15px 0' }}>–î–æ–±–∞–≤–∏—Ç—å –ª–µ—á–µ–Ω–∏–µ</h4>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px', marginBottom: '10px' }}>
            <select
              value={newItem.toothId}
              onChange={(e) => setNewItem({ ...newItem, toothId: e.target.value })}
              style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '4px' }}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∑—É–±</option>
              {Object.keys(teeth).map(toothId => (
                <option key={toothId} value={toothId}>–ó—É–± {toothId}</option>
              ))}
            </select>
            <input
              type="text"
              value={newItem.treatment}
              onChange={(e) => setNewItem({ ...newItem, treatment: e.target.value })}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è"
              style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '4px' }}
            />
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '10px', marginBottom: '10px' }}>
            <select
              value={newItem.priority}
              onChange={(e) => setNewItem({ ...newItem, priority: e.target.value })}
              style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '4px' }}
            >
              <option value="low">–ù–∏–∑–∫–∏–π</option>
              <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
              <option value="high">–í—ã—Å–æ–∫–∏–π</option>
            </select>
            <input
              type="number"
              value={newItem.estimatedCost}
              onChange={(e) => setNewItem({ ...newItem, estimatedCost: e.target.value })}
              placeholder="–°—Ç–æ–∏–º–æ—Å—Ç—å"
              style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '4px' }}
            />
            <input
              type="number"
              value={newItem.estimatedTime}
              onChange={(e) => setNewItem({ ...newItem, estimatedTime: e.target.value })}
              placeholder="–í—Ä–µ–º—è (–º–∏–Ω)"
              style={{ padding: '8px', border: '1px solid #d1d5db', borderRadius: '4px' }}
            />
          </div>
          <button
            onClick={addItem}
            style={{
              padding: '8px 16px',
              border: 'none',
              borderRadius: '4px',
              backgroundColor: '#10b981',
              color: '#fff',
              cursor: 'pointer'
            }}
          >
            –î–æ–±–∞–≤–∏—Ç—å
          </button>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è */}
        <div style={{ marginBottom: '20px' }}>
          <h4 style={{ margin: '0 0 15px 0' }}>–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω</h4>
          {treatmentPlan.length === 0 ? (
            <p style={{ color: '#6b7280', fontStyle: 'italic' }}>–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –ø—É—Å—Ç</p>
          ) : (
            <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
              {treatmentPlan.map(item => (
                <div key={item.id} style={{
                  padding: '15px',
                  border: '1px solid #e5e7eb',
                  borderRadius: '8px',
                  backgroundColor: '#fff'
                }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <div style={{ flex: 1 }}>
                      <div style={{ fontWeight: '600', marginBottom: '5px' }}>
                        –ó—É–± {item.toothId}: {item.treatment}
                      </div>
                      <div style={{ fontSize: '14px', color: '#6b7280', marginBottom: '5px' }}>
                        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {item.priority} | –°—Ç–æ–∏–º–æ—Å—Ç—å: {item.estimatedCost} | –í—Ä–µ–º—è: {item.estimatedTime} –º–∏–Ω
                      </div>
                      {item.notes && (
                        <div style={{ fontSize: '14px', color: '#374151' }}>
                          {item.notes}
                        </div>
                      )}
                    </div>
                    <button
                      onClick={() => removeItem(item.id)}
                      style={{
                        padding: '4px 8px',
                        border: 'none',
                        borderRadius: '4px',
                        backgroundColor: '#ef4444',
                        color: '#fff',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                    >
                      <Trash2 size={14} />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        <div style={{ display: 'flex', gap: '10px', justifyContent: 'flex-end' }}>
          <button
            onClick={onClose}
            style={{
              padding: '8px 16px',
              border: '1px solid #d1d5db',
              borderRadius: '4px',
              backgroundColor: '#fff',
              cursor: 'pointer'
            }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>
    </div>
  );
};

export default DentalChart;
