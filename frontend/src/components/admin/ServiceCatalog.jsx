import React, { useState, useEffect } from 'react';
import { 
  Package, 
  Plus, 
  Search, 
  Filter, 
  Edit, 
  Trash2, 
  Save, 
  X,
  RefreshCw,
  Download,
  Upload,
  AlertCircle,
  CheckCircle,
  Heart,
  Scissors,
  Stethoscope,
  TestTube
} from 'lucide-react';
import { Card, Button, Badge } from '../ui/native';

const ServiceCatalog = () => {
  const [loading, setLoading] = useState(true);
  const [services, setServices] = useState([]);
  const [categories, setCategories] = useState([]);
  const [doctors, setDoctors] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedSpecialty, setSelectedSpecialty] = useState('all');
  const [editingService, setEditingService] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [message, setMessage] = useState({ type: '', text: '' });

  // –ò–∫–æ–Ω–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
  const specialtyIcons = {
    cardiology: Heart,
    dermatology: Stethoscope, 
    stomatology: Scissors,
    laboratory: TestTube
  };

  const specialtyColors = {
    cardiology: 'text-red-600',
    dermatology: 'text-orange-600',
    stomatology: 'text-blue-600', 
    laboratory: 'text-green-600'
  };

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—Ä–∞—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [servicesRes, categoriesRes, doctorsRes] = await Promise.all([
        fetch('http://localhost:8000/api/v1/services', {
          // headers: { 'Authorization': `Bearer ${localStorage.getItem('auth_token')}` }
        }),
        fetch('http://localhost:8000/api/v1/services/categories', {
          // headers: { 'Authorization': `Bearer ${localStorage.getItem('auth_token')}` }
        }),
        fetch('http://localhost:8000/api/v1/services/admin/doctors', {
          // headers: { 'Authorization': `Bearer ${localStorage.getItem('auth_token')}` }
        })
      ]);

      if (servicesRes.ok) {
        const servicesData = await servicesRes.json();
        setServices(servicesData);
      }

      if (categoriesRes.ok) {
        const categoriesData = await categoriesRes.json();
        setCategories(categoriesData);
      }

      if (doctorsRes.ok) {
        const doctorsData = await doctorsRes.json();
        setDoctors(doctorsData);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
    } finally {
      setLoading(false);
    }
  };

  const filteredServices = services.filter(service => {
    const matchesSearch = service.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || service.category_id === parseInt(selectedCategory);
    const matchesSpecialty = selectedSpecialty === 'all' || 
      categories.find(cat => cat.id === service.category_id)?.specialty === selectedSpecialty;
    
    return matchesSearch && matchesCategory && matchesSpecialty;
  });

  const handleSaveService = async (serviceData) => {
    try {
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:', serviceData);
      
      const method = editingService ? 'PUT' : 'POST';
      const url = editingService 
        ? `http://localhost:8000/api/v1/services/${editingService.id}`
        : 'http://localhost:8000/api/v1/services';

      const response = await fetch(url, {
        method,
        headers: {
          // 'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(serviceData)
      });

      if (response.ok) {
        setMessage({ 
          type: 'success', 
          text: editingService ? '–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞' 
        });
        setEditingService(null);
        setShowAddForm(false);
        await loadData();
      } else {
        const errorData = await response.json().catch(() => ({}));
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorData);
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ${response.status}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏' });
    }
  };

  const handleDeleteService = async (serviceId) => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É?')) return;

    try {
      const response = await fetch(`http://localhost:8000/api/v1/services/${serviceId}`, {
        method: 'DELETE',
        headers: {
          // 'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });

      if (response.ok) {
        setMessage({ type: 'success', text: '–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞' });
        await loadData();
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏' });
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(cat => cat.id === categoryId);
    return category?.name_ru || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
  };

  const getCategorySpecialty = (categoryId) => {
    const category = categories.find(cat => cat.id === categoryId);
    return category?.specialty;
  };

  const getSpecialtyIcon = (specialty) => {
    const IconComponent = specialtyIcons[specialty] || Package;
    return IconComponent;
  };

  if (loading) {
    return (
      <Card className="p-8">
        <div className="flex items-center justify-center">
          <RefreshCw className="animate-spin mr-2" size={20} />
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É—Å–ª—É–≥...</span>
        </div>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">
            –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É—Å–ª—É–≥
          </h2>
          <p className="text-gray-600 dark:text-gray-400">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
          </p>
        </div>
        
        <div className="flex gap-3">
          <Button variant="outline" onClick={loadData} disabled={loading}>
            <RefreshCw size={16} className="mr-2" />
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
          <Button onClick={() => setShowAddForm(true)}>
            <Plus size={16} className="mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
          </Button>
        </div>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message.text && (
        <div className={`flex items-center p-4 rounded-lg ${
          message.type === 'success' 
            ? 'bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-400'
            : 'bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-400'
        }`}>
          {message.type === 'success' ? (
            <CheckCircle size={20} className="mr-2" />
          ) : (
            <AlertCircle size={20} className="mr-2" />
          )}
          {message.text}
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card className="p-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <Search size={16} className="inline mr-1" />
              –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            </label>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏..."
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              <Filter size={16} className="inline mr-1" />
              –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
            </label>
            <select
              value={selectedSpecialty}
              onChange={(e) => setSelectedSpecialty(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            >
              <option value="all">–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</option>
              <option value="cardiology">–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è</option>
              <option value="dermatology">–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
              <option value="stomatology">–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
              <option value="laboratory">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            >
              <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              {categories.map(category => (
                <option key={category.id} value={category.id}>
                  {category.name_ru}
                </option>
              ))}
            </select>
          </div>
        </div>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-blue-600">{services.length}</div>
          <div className="text-sm text-gray-600">–í—Å–µ–≥–æ —É—Å–ª—É–≥</div>
        </Card>
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-green-600">{services.filter(s => s.active).length}</div>
          <div className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
        </Card>
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-orange-600">{categories.length}</div>
          <div className="text-sm text-gray-600">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
        </Card>
        <Card className="p-4 text-center">
          <div className="text-2xl font-bold text-purple-600">{filteredServices.length}</div>
          <div className="text-sm text-gray-600">–ù–∞–π–¥–µ–Ω–æ</div>
        </Card>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ */}
      <Card className="overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50 dark:bg-gray-800">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –£—Å–ª—É–≥–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –¶–µ–Ω–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –í—Ä–∞—á
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –°—Ç–∞—Ç—É—Å
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–µ–π—Å—Ç–≤–∏—è
                </th>
              </tr>
            </thead>
            <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
              {filteredServices.map(service => {
                const specialty = getCategorySpecialty(service.category_id);
                const SpecialtyIcon = getSpecialtyIcon(specialty);
                const doctor = doctors.find(d => d.id === service.doctor_id);
                
                return (
                  <tr key={service.id} className="hover:bg-gray-50 dark:hover:bg-gray-800">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <SpecialtyIcon size={20} className={`mr-3 ${specialtyColors[specialty] || 'text-gray-400'}`} />
                        <div>
                          <div className="text-sm font-medium text-gray-900 dark:text-white">
                            {service.name}
                          </div>
                          {service.code && (
                            <div className="text-sm text-gray-500">
                              –ö–æ–¥: {service.code}
                            </div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Badge variant="outline">
                        {getCategoryName(service.category_id)}
                      </Badge>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 dark:text-white">
                        {service.price ? `${service.price.toLocaleString()} ${service.currency || 'UZS'}` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900 dark:text-white">
                        {service.duration_minutes ? `${service.duration_minutes} –º–∏–Ω` : '‚Äî'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900 dark:text-white">
                        {doctor ? doctor.user?.full_name || `–í—Ä–∞—á #${doctor.id}` : '‚Äî'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Badge variant={service.active ? 'success' : 'error'}>
                        {service.active ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                      </Badge>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setEditingService(service)}
                        >
                          <Edit size={14} />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDeleteService(service.id)}
                        >
                          <Trash2 size={14} />
                        </Button>
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {filteredServices.length === 0 && (
          <div className="text-center py-12">
            <Package size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
              –£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-500">
              {searchTerm || selectedCategory !== 'all' || selectedSpecialty !== 'all'
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
                : '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫'
              }
            </p>
          </div>
        )}
      </Card>

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {(showAddForm || editingService) && (
        <ServiceForm
          service={editingService}
          categories={categories}
          doctors={doctors}
          onSave={handleSaveService}
          onCancel={() => {
            setShowAddForm(false);
            setEditingService(null);
          }}
        />
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã —É—Å–ª—É–≥–∏
const ServiceForm = ({ service, categories, doctors, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    name: service?.name || '',
    code: service?.code || '',
    category_id: service?.category_id || '',
    price: service?.price || '',
    currency: service?.currency || 'UZS',
    duration_minutes: service?.duration_minutes || 30,
    doctor_id: service?.doctor_id || '',
    active: service?.active !== undefined ? service.active : true,
    // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ú–ê–°–¢–ï–†–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
    category_code: service?.category_code || '',
    service_code: service?.service_code || '',
    requires_doctor: service?.requires_doctor || false,
    queue_tag: service?.queue_tag || '',
    is_consultation: service?.is_consultation || false,
    allow_doctor_price_override: service?.allow_doctor_price_override || false
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏');
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    const apiData = {
      ...formData,
      price: formData.price ? parseFloat(formData.price) : null,
      category_id: formData.category_id ? parseInt(formData.category_id) : null,
      doctor_id: formData.doctor_id ? parseInt(formData.doctor_id) : null,
      duration_minutes: parseInt(formData.duration_minutes) || 30
    };
    
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    Object.keys(apiData).forEach(key => {
      if (apiData[key] === '' || apiData[key] === 'null') {
        apiData[key] = null;
      }
    });
    
    console.log('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API:', apiData);
    onSave(apiData);
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  return (
    <Card className="p-6">
      <h3 className="text-lg font-medium mb-4">
        {service ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏' : '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏'}
      </h3>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ö–æ–¥ —É—Å–ª—É–≥–∏
            </label>
            <input
              type="text"
              value={formData.code}
              onChange={(e) => handleChange('code', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
            </label>
            <select
              value={formData.category_id}
              onChange={(e) => handleChange('category_id', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              required
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
              {categories.map(category => (
                <option key={category.id} value={category.id}>
                  {category.name_ru} ({category.specialty})
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –¶–µ–Ω–∞
            </label>
            <div className="flex">
              <input
                type="number"
                value={formData.price}
                onChange={(e) => handleChange('price', parseFloat(e.target.value) || '')}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                min="0"
                step="0.01"
              />
              <select
                value={formData.currency}
                onChange={(e) => handleChange('currency', e.target.value)}
                className="px-3 py-2 border-l-0 border border-gray-300 rounded-r-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              >
                <option value="UZS">UZS</option>
                <option value="USD">USD</option>
                <option value="RUB">RUB</option>
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)
            </label>
            <input
              type="number"
              value={formData.duration_minutes}
              onChange={(e) => handleChange('duration_minutes', parseInt(e.target.value) || 30)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              min="5"
              step="5"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              –í—Ä–∞—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </label>
            <select
              value={formData.doctor_id}
              onChange={(e) => handleChange('doctor_id', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            >
              <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
              {doctors.map(doctor => (
                <option key={doctor.id} value={doctor.id}>
                  {doctor.user?.full_name || `–í—Ä–∞—á #${doctor.id}`} ({doctor.specialty})
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø –ú–ê–°–¢–ï–†–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò */}
        <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
          <h4 className="text-md font-medium text-gray-900 dark:text-white mb-4">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          </h4>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (K/D/C/L/S/O)
              </label>
              <select
                value={formData.category_code}
                onChange={(e) => handleChange('category_code', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                <option value="K">K - –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è</option>
                <option value="D">D - –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
                <option value="C">C - –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è</option>
                <option value="L">L - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã</option>
                <option value="S">S - –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
                <option value="O">O - –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –ö–æ–¥ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: K01, L002)
              </label>
              <input
                type="text"
                value={formData.service_code}
                onChange={(e) => handleChange('service_code', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                placeholder="K01"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                –¢–µ–≥ –æ—á–µ—Ä–µ–¥–∏
              </label>
              <select
                value={formData.queue_tag}
                onChange={(e) => handleChange('queue_tag', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              >
                <option value="">–ë–µ–∑ –æ—á–µ—Ä–µ–¥–∏</option>
                <option value="ecg">ECG (–æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å)</option>
                <option value="cardiology_common">–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è (–æ–±—â–∞—è)</option>
                <option value="stomatology">–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
                <option value="dermatology">–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
                <option value="cosmetology">–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è</option>
                <option value="lab">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è</option>
              </select>
            </div>

            <div className="space-y-3">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="requires_doctor"
                  checked={formData.requires_doctor}
                  onChange={(e) => handleChange('requires_doctor', e.target.checked)}
                  className="mr-2"
                />
                <label htmlFor="requires_doctor" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  –¢—Ä–µ–±—É–µ—Ç –≤—Ä–∞—á–∞
                </label>
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="is_consultation"
                  checked={formData.is_consultation}
                  onChange={(e) => handleChange('is_consultation', e.target.checked)}
                  className="mr-2"
                />
                <label htmlFor="is_consultation" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  –≠—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
                </label>
              </div>

              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="allow_doctor_price_override"
                  checked={formData.allow_doctor_price_override}
                  onChange={(e) => handleChange('allow_doctor_price_override', e.target.checked)}
                  className="mr-2"
                />
                <label htmlFor="allow_doctor_price_override" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  –í—Ä–∞—á –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É
                </label>
              </div>
            </div>
          </div>

          <div className="bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg mt-4">
            <p className="text-sm text-blue-800 dark:text-blue-200">
              <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –¢–æ–ª—å–∫–æ –≠—Ö–æ–ö–ì (–∫–∞—Ä–¥–∏–æ–ª–æ–≥) –∏ –†–µ–Ω—Ç–≥–µ–Ω–æ–≥—Ä–∞—Ñ–∏—è –∑—É–± (—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥) —Ç—Ä–µ–±—É—é—Ç –≤—Ä–∞—á–∞. 
              –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —Ä–∞—Å—á—ë—Ç–µ –ª—å–≥–æ—Ç –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤.
            </p>
          </div>
        </div>

        <div className="flex items-center">
          <input
            type="checkbox"
            id="active"
            checked={formData.active}
            onChange={(e) => handleChange('active', e.target.checked)}
            className="mr-2"
          />
          <label htmlFor="active" className="text-sm font-medium text-gray-700 dark:text-gray-300">
            –£—Å–ª—É–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞
          </label>
        </div>

        <div className="flex justify-end gap-3">
          <Button type="button" variant="outline" onClick={onCancel}>
            <X size={16} className="mr-2" />
            –û—Ç–º–µ–Ω–∏—Ç—å
          </Button>
          <Button type="submit">
            <Save size={16} className="mr-2" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </div>
      </form>
    </Card>
  );
};

export default ServiceCatalog;

