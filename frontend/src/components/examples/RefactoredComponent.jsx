/**
 * –ü—Ä–∏–º–µ—Ä —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö API —Ö—É–∫–æ–≤
 * 
 * –ë–´–õ–û (—Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥):
 * - –ü—Ä—è–º—ã–µ fetch –∑–∞–ø—Ä–æ—Å—ã
 * - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
 * 
 * –°–¢–ê–õ–û (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥):
 * - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏ useApi
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */

import React, { useState } from 'react';
import { usePatients, useApiCall, useFormSubmit } from '../hooks/useApi';
import { validators, validateForm } from '../utils/errorHandler';

// ‚ùå –°–¢–ê–†–´–ô –ü–û–î–•–û–î - –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï
function OldPatientComponent() {
  const [patients, setPatients] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authHeader = () => ({
    Authorization: `Bearer ${localStorage.getItem('auth_token') || ''}`,
  });

  // –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  const loadPatients = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/v1/patients?department=Cardio&limit=100', {
        headers: authHeader(),
      });
      
      if (response.ok) {
        const data = await response.json();
        setPatients(Array.isArray(data) ? data : []);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤');
      }
    } catch (error) {
      setError(error.message);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
  const createPatient = async (patientData) => {
    try {
      setLoading(true);
      const response = await fetch('/api/v1/patients', {
        method: 'POST',
        headers: {
          ...authHeader(),
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(patientData)
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞');
      }

      await loadPatients(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π */}
    </div>
  );
}

// ‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î - –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï
function NewPatientComponent() {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const { 
    data: patients, 
    loading: patientsLoading, 
    error: patientsError, 
    refresh: refreshPatients 
  } = usePatients('Cardio');

  // –•—É–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const { submitForm, loading: submitting } = useFormSubmit();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    full_name: '',
    phone: '',
    email: '',
    birth_date: ''
  });

  // –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const validationRules = {
    full_name: [validators.required],
    phone: [validators.required, validators.phone],
    email: [validators.email],
    birth_date: [validators.required]
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const { isValid, errors } = validateForm(formData, validationRules);
    if (!isValid) {
      Object.values(errors).forEach(error => toast.error(error));
      return;
    }

    try {
      await submitForm('/patients', formData, {
        validate: (data) => {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
          if (!data.full_name.trim()) {
            return '–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
          }
          return null;
        },
        transform: (data) => {
          // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
          return {
            ...data,
            full_name: data.full_name.trim(),
            phone: data.phone.replace(/\D/g, '') // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
          };
        }
      });

      // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ - –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      setFormData({ full_name: '', phone: '', email: '', birth_date: '' });
      refreshPatients();
    } catch (error) {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ submitForm
    }
  };

  return (
    <div className="patient-component">
      <h2>–ü–∞—Ü–∏–µ–Ω—Ç—ã –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏</h2>
      
      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
      <form onSubmit={handleSubmit} className="patient-form">
        <input
          type="text"
          placeholder="–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞"
          value={formData.full_name}
          onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}
          disabled={submitting}
        />
        
        <input
          type="tel"
          placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
          value={formData.phone}
          onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
          disabled={submitting}
        />
        
        <input
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
          disabled={submitting}
        />
        
        <input
          type="date"
          value={formData.birth_date}
          onChange={(e) => setFormData(prev => ({ ...prev, birth_date: e.target.value }))}
          disabled={submitting}
        />
        
        <button type="submit" disabled={submitting}>
          {submitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞'}
        </button>
      </form>

      {/* –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ */}
      <div className="patients-list">
        {patientsLoading && <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...</div>}
        
        {patientsError && (
          <div className="error">
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {patientsError}
            <button onClick={refreshPatients}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
          </div>
        )}
        
        {patients && patients.length > 0 ? (
          <ul>
            {patients.map(patient => (
              <li key={patient.id}>
                <strong>{patient.full_name}</strong>
                <span>{patient.phone}</span>
                <span>{patient.email}</span>
              </li>
            ))}
          </ul>
        ) : (
          !patientsLoading && <div>–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        )}
      </div>
    </div>
  );
}

// ‚úÖ –ü–†–ò–ú–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê –° WEBSOCKET
function RealtimeQueueComponent() {
  const { connected, lastMessage, sendMessage } = useWebSocket(
    'ws://localhost:8000/api/v1/display/ws/queue/cardiology',
    {
      onMessage: (message) => {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:', message);
      },
      onConnect: () => {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –æ—á–µ—Ä–µ–¥–∏ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏');
      }
    }
  );

  return (
    <div className="realtime-queue">
      <div className="connection-status">
        –°—Ç–∞—Ç—É—Å: {connected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
      </div>
      
      {lastMessage && (
        <div className="last-message">
          <h3>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</h3>
          <pre>{JSON.stringify(lastMessage, null, 2)}</pre>
        </div>
      )}
      
      <button 
        onClick={() => sendMessage({ type: 'request_update' })}
        disabled={!connected}
      >
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      </button>
    </div>
  );
}

export { NewPatientComponent, RealtimeQueueComponent };
