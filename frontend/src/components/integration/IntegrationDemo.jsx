import React, { useState, useEffect } from 'react';
import { Card, Button, Badge } from '../../design-system/components';
import { useQueueManager } from '../../hooks/useQueueManager';
import { useEMRAI } from '../../hooks/useEMRAI';
import { useAppData } from '../../contexts/AppDataContext';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ö—É–∫–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
 */
const IntegrationDemo = () => {
  const [activeDemo, setActiveDemo] = useState('queue');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ö—É–∫–∏
  const queueManager = useQueueManager();
  const emrAI = useEMRAI();
  const { users, appointments, actions } = useAppData();

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ–º–æ
  const [testSymptoms, setTestSymptoms] = useState('–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, —Ç–æ—à–Ω–æ—Ç–∞');
  const [testDiagnosis, setTestDiagnosis] = useState('–º–∏–≥—Ä–µ–Ω—å');

  useEffect(() => {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    actions.setLoading('users', true);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    setTimeout(() => {
      actions.setUsers([
        { id: 1, name: '–î–æ–∫—Ç–æ—Ä –ò–≤–∞–Ω–æ–≤', role: 'Doctor' },
        { id: 2, name: '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞ –ü–µ—Ç—Ä–æ–≤–∞', role: 'Nurse' }
      ]);
    }, 1000);
  }, [actions]);

  const handleQueueTest = async () => {
    const today = new Date().toISOString().split('T')[0];
    await queueManager.generateQRCode(today, '1');
  };

  const handleAITest = async () => {
    await emrAI.getICD10Suggestions(testSymptoms, testDiagnosis);
  };

  const renderQueueDemo = () => (
    <div className="clinic-space-y-md">
      <h3 className="clinic-heading-3">üîÑ –¢–µ—Å—Ç Queue Manager Hook</h3>
      
      <div className="clinic-grid clinic-grid-cols-2 clinic-gap-md">
        <Card className="clinic-p-md">
          <h4>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</h4>
          {queueManager.loading ? (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          ) : (
            <div className="clinic-space-y-sm">
              {queueManager.specialists.map(specialist => (
                <div key={specialist.id} className="clinic-flex clinic-justify-between">
                  <span>{specialist.name}</span>
                  <Badge variant="info">{specialist.role}</Badge>
                </div>
              ))}
            </div>
          )}
        </Card>
        
        <Card className="clinic-p-md">
          <h4>–î–µ–π—Å—Ç–≤–∏—è</h4>
          <div className="clinic-space-y-sm">
            <Button 
              variant="primary" 
              onClick={handleQueueTest}
              disabled={queueManager.loading}
            >
              –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR
            </Button>
            
            {queueManager.qrData && (
              <div className="clinic-p-sm clinic-bg-success-light clinic-rounded">
                ‚úÖ QR –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {queueManager.qrData.queue_url}
              </div>
            )}
          </div>
        </Card>
      </div>
      
      {queueManager.error && (
        <div className="clinic-p-md clinic-bg-danger-light clinic-text-danger clinic-rounded">
          ‚ùå –û—à–∏–±–∫–∞: {queueManager.error}
        </div>
      )}
      
      {queueManager.success && (
        <div className="clinic-p-md clinic-bg-success-light clinic-text-success clinic-rounded">
          ‚úÖ {queueManager.success}
        </div>
      )}
    </div>
  );

  const renderAIDemo = () => (
    <div className="clinic-space-y-md">
      <h3 className="clinic-heading-3">ü§ñ –¢–µ—Å—Ç EMR AI Hook</h3>
      
      <div className="clinic-grid clinic-grid-cols-2 clinic-gap-md">
        <Card className="clinic-p-md">
          <h4>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
          <div className="clinic-space-y-sm">
            <div>
              <label className="clinic-label">–°–∏–º–ø—Ç–æ–º—ã:</label>
              <input
                type="text"
                value={testSymptoms}
                onChange={(e) => setTestSymptoms(e.target.value)}
                className="clinic-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã"
              />
            </div>
            
            <div>
              <label className="clinic-label">–î–∏–∞–≥–Ω–æ–∑:</label>
              <input
                type="text"
                value={testDiagnosis}
                onChange={(e) => setTestDiagnosis(e.target.value)}
                className="clinic-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ–∑"
              />
            </div>
            
            <Button 
              variant="primary" 
              onClick={handleAITest}
              disabled={emrAI.loading || (!testSymptoms && !testDiagnosis)}
            >
              {emrAI.loading ? '–ê–Ω–∞–ª–∏–∑...' : '–ü–æ–ª—É—á–∏—Ç—å –ú–ö–ë-10'}
            </Button>
          </div>
        </Card>
        
        <Card className="clinic-p-md">
          <h4>AI –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h4>
          {emrAI.loading ? (
            <p>üîÑ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...</p>
          ) : emrAI.icd10Suggestions.length > 0 ? (
            <div className="clinic-space-y-sm">
              {emrAI.icd10Suggestions.map((suggestion, index) => (
                <div key={index} className="clinic-p-sm clinic-border clinic-rounded">
                  <div className="clinic-font-semibold">{suggestion.code}</div>
                  <div className="clinic-text-sm clinic-text-secondary">
                    {suggestion.description}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="clinic-text-secondary">–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
          )}
        </Card>
      </div>
      
      {emrAI.error && (
        <div className="clinic-p-md clinic-bg-danger-light clinic-text-danger clinic-rounded">
          ‚ùå –û—à–∏–±–∫–∞ AI: {emrAI.error}
        </div>
      )}
    </div>
  );

  const renderContextDemo = () => (
    <div className="clinic-space-y-md">
      <h3 className="clinic-heading-3">üìä –¢–µ—Å—Ç App Data Context</h3>
      
      <div className="clinic-grid clinic-grid-cols-2 clinic-gap-md">
        <Card className="clinic-p-md">
          <h4>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</h4>
          {users.length > 0 ? (
            <div className="clinic-space-y-sm">
              {users.map(user => (
                <div key={user.id} className="clinic-flex clinic-justify-between">
                  <span>{user.name}</span>
                  <Badge variant="success">{user.role}</Badge>
                </div>
              ))}
            </div>
          ) : (
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
          )}
        </Card>
        
        <Card className="clinic-p-md">
          <h4>–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º</h4>
          <div className="clinic-space-y-sm">
            <Button 
              variant="secondary"
              onClick={() => actions.addUser({
                id: Date.now(),
                name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${users.length + 1}`,
                role: 'Test'
              })}
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </Button>
            
            <Button 
              variant="warning"
              onClick={() => actions.setUsers([])}
              disabled={users.length === 0}
            >
              –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            </Button>
          </div>
        </Card>
      </div>
      
      <div className="clinic-p-md clinic-bg-info-light clinic-rounded">
        <strong>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong>
        <ul className="clinic-mt-sm">
          <li>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {users.length}</li>
          <li>–ó–∞–ø–∏—Å–µ–π: {appointments.length}</li>
          <li>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {Object.values(actions).filter(Boolean).length}</li>
        </ul>
      </div>
    </div>
  );

  return (
    <div className="clinic-page clinic-p-lg">
      <div className="clinic-header">
        <h1>üîß –î–µ–º–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π</h1>
        <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö—É–∫–æ–≤, API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ data flow</p>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–µ–º–æ */}
      <div className="clinic-flex clinic-gap-sm clinic-mb-lg">
        <Button
          variant={activeDemo === 'queue' ? 'primary' : 'secondary'}
          onClick={() => setActiveDemo('queue')}
        >
          Queue Manager
        </Button>
        <Button
          variant={activeDemo === 'ai' ? 'primary' : 'secondary'}
          onClick={() => setActiveDemo('ai')}
        >
          EMR AI
        </Button>
        <Button
          variant={activeDemo === 'context' ? 'primary' : 'secondary'}
          onClick={() => setActiveDemo('context')}
        >
          App Context
        </Button>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –¥–µ–º–æ */}
      {activeDemo === 'queue' && renderQueueDemo()}
      {activeDemo === 'ai' && renderAIDemo()}
      {activeDemo === 'context' && renderContextDemo()}

      {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Card className="clinic-mt-lg clinic-p-md clinic-bg-secondary">
        <h3>üìã –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h3>
        <div className="clinic-grid clinic-grid-cols-3 clinic-gap-md clinic-mt-md">
          <div className="clinic-text-center">
            <div className="clinic-text-2xl">‚úÖ</div>
            <div className="clinic-font-semibold">–•—É–∫–∏ —Å–æ–∑–¥–∞–Ω—ã</div>
            <div className="clinic-text-sm clinic-text-secondary">
              useQueueManager, useEMRAI
            </div>
          </div>
          
          <div className="clinic-text-center">
            <div className="clinic-text-2xl">üîÑ</div>
            <div className="clinic-font-semibold">API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</div>
            <div className="clinic-text-sm clinic-text-secondary">
              –ó–∞–º–µ–Ω–µ–Ω—ã –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã
            </div>
          </div>
          
          <div className="clinic-text-center">
            <div className="clinic-text-2xl">üìä</div>
            <div className="clinic-font-semibold">Data Flow</div>
            <div className="clinic-text-sm clinic-text-secondary">
              –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default IntegrationDemo;
