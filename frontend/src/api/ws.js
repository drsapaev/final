// Helper –¥–ª—è WS —Å –ø—Ä–æ–∫—Å–∏. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî VITE_ENABLE_WS=0/1
function wsEnabled() {
  const v = (import.meta?.env?.VITE_ENABLE_WS ?? '0').toString().trim();
  return v === '1' || v.toLowerCase() === 'true';
}

function buildWsBase() {
  const raw = (import.meta?.env?.VITE_WS_BASE ?? '/ws').toString().trim();
  if (/^wss?:\/\//i.test(raw)) return raw.replace(/\/+$/, '');
  const proto = location.protocol === 'https:' ? 'wss:' : 'ws:';
  const host = location.host;
  const suffix = raw.startsWith('/') ? raw : `/${raw}`;
  return `${proto}//${host}${suffix}`.replace(/\/+$/, '');
}

/**
 * –û—Ç–∫—Ä—ã—Ç—å WS –æ—á–µ—Ä–µ–¥–∏. onMessage –ø–æ–ª—É—á–∞–µ—Ç —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é close().
 */
export function openQueueWS(department, dateStr, onMessage) {
  if (!wsEnabled()) return () => {};
  let ws = null;

  try {
    const base = buildWsBase();
    const url = `${base}/queue?department=${encodeURIComponent(department)}&date_str=${encodeURIComponent(dateStr)}`;
    ws = new WebSocket(url);
    ws.onmessage = (ev) => {
      try {
        const obj = JSON.parse(ev.data);
        onMessage && onMessage(obj);
      } catch {
        // ignore
      }
    };
    ws.onerror = () => {};
    ws.onclose = () => {};
  } catch {
    // ignore
  }

  return function close() {
    try {
      ws && ws.close(1000, 'bye');
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket
    }
    ws = null;
  };
}

/**
 * –û—Ç–∫—Ä—ã—Ç—å WebSocket –¥–ª—è —Ç–∞–±–ª–æ –æ—á–µ—Ä–µ–¥–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ /api/v1/display/ws/board/{board_id}
 */
export function openDisplayBoardWS(boardId, onMessage, onConnect, onDisconnect) {
  if (!wsEnabled()) return () => {};
  let ws = null;
  let reconnectTimeout = null;
  let reconnectAttempts = 0;
  const maxReconnectAttempts = 5;
  const reconnectDelay = 3000;

  function connect() {
    try {
      const base = buildWsBase();
      const token = localStorage.getItem('access_token');
      const tokenParam = token ? `?token=${encodeURIComponent(token)}` : '';
      const url = `${base}/api/v1/display/ws/board/${encodeURIComponent(boardId)}${tokenParam}`;
      
      console.log(`üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket: ${url}`);
      
      ws = new WebSocket(url);
      
      ws.onopen = () => {
        console.log(`‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–∞–±–ª–æ ${boardId}`);
        reconnectAttempts = 0;
        onConnect && onConnect();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const pingInterval = setInterval(() => {
          if (ws && ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ type: 'ping' }));
          } else {
            clearInterval(pingInterval);
          }
        }, 30000);
      };
      
      ws.onmessage = (ev) => {
        try {
          const obj = JSON.parse(ev.data);
          console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:`, obj);
          onMessage && onMessage(obj);
        } catch (e) {
          console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        }
      };
      
      ws.onerror = (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ WebSocket –¥–ª—è —Ç–∞–±–ª–æ ${boardId}:`, error);
      };
      
      ws.onclose = (event) => {
        console.log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ç–∞–±–ª–æ ${boardId}. –ö–æ–¥: ${event.code}`);
        onDisconnect && onDisconnect();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if (reconnectAttempts < maxReconnectAttempts && event.code !== 1000) {
          reconnectAttempts++;
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${maxReconnectAttempts} —á–µ—Ä–µ–∑ ${reconnectDelay}ms`);
          
          reconnectTimeout = setTimeout(() => {
            connect();
          }, reconnectDelay);
        }
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
    }
  }

  // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connect();

  return function close() {
    try {
      if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
        reconnectTimeout = null;
      }
      
      if (ws) {
        ws.close(1000, '–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É');
        ws = null;
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket:', error);
    }
  };
}

