/**
 * API Interceptors
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
 */
import { api } from './client';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ interceptors –¥–ª—è API –∫–ª–∏–µ–Ω—Ç–∞
 */
export function setupInterceptors() {
  // Request interceptor - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  api.interceptors.request.use(
    (config) => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
      const token = localStorage.getItem('auth_token');
      if (token && !config.headers.Authorization) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ development
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`, {
          params: config.params,
          data: config.data
        });
      }

      return config;
    },
    (error) => {
      console.error('‚ùå Request Error:', error);
      return Promise.reject(error);
    }
  );

  // Response interceptor - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫
  api.interceptors.response.use(
    (response) => {
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ development
      if (process.env.NODE_ENV === 'development') {
        console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, {
          status: response.status,
          data: response.data
        });
      }

      return response;
    },
    async (error) => {
      const originalRequest = error.config;
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      const { handleError } = await import('../utils/errorHandler');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ
      const errorInfo = handleError(error, {
        context: `API ${originalRequest.method?.toUpperCase()} ${originalRequest.url}`,
        showToast: !originalRequest.silent, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ silent —Ä–µ–∂–∏–º–∞
        logError: true
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      console.error(`‚ùå API Error: ${originalRequest?.method?.toUpperCase()} ${originalRequest?.url}`, {
        status: error.response?.status,
        data: error.response?.data
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–æ–∫ (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      if (error.response?.status === 401 && !originalRequest._retry) {
        originalRequest._retry = true;

        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
          const refreshToken = localStorage.getItem('refresh_token');
          
          if (refreshToken) {
            const response = await api.post('/authentication/refresh', {
              refresh_token: refreshToken
            });

            if (response.data.access_token) {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
              localStorage.setItem('auth_token', response.data.access_token);
              api.defaults.headers.common['Authorization'] = `Bearer ${response.data.access_token}`;
              
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
              originalRequest.headers.Authorization = `Bearer ${response.data.access_token}`;
              return api(originalRequest);
            }
          }
        } catch (refreshError) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshError);
        }

        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º
        localStorage.removeItem('auth_token');
        localStorage.removeItem('refresh_token');
        localStorage.removeItem('user');
        delete api.defaults.headers.common['Authorization'];
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        if (window.location.pathname !== '/login') {
          window.location.href = '/login';
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 403 –æ—à–∏–±–æ–∫ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤)
      if (error.response?.status === 403) {
        console.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (window.showToast) {
          window.showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', 'error');
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫ (—Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏)
      if (error.response?.status >= 500) {
        console.error('–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞');
        
        if (window.showToast) {
          window.showToast('–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      if (!error.response) {
        console.error('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
        
        if (window.showToast) {
          window.showToast('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error');
        }
      }

      return Promise.reject(error);
    }
  );
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export function initializeAuth() {
  const token = localStorage.getItem('auth_token');
  if (token) {
    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function clearAuth() {
  localStorage.removeItem('auth_token');
  localStorage.removeItem('refresh_token');
  localStorage.removeItem('user');
  delete api.defaults.headers.common['Authorization'];
}
