// High-level API wrappers for frontend usage.
// Uses low-level apiRequest from ./client.js
import { apiRequest } from "./client";

/**
 * Try to reschedule a visit.
 * First tries POST /visits/{id}/reschedule, then falls back to PATCH /visits/{id}
 * Returns parsed response on success.
 */
export async function rescheduleVisit(visitId, scheduled_at) {
  const payload = { scheduled_at };
  try {
    return await apiRequest("POST", `/visits/${visitId}/reschedule`, { json: payload });
  } catch (err) {
    const status = err && (err.status || (err.response && err.response.status));
    if (status === 404 || status === 405) {
      // fallback to patch
      return await apiRequest("PATCH", `/visits/${visitId}`, { json: payload });
    }
    throw err;
  }
}

export async function patchVisit(visitId, patch) {
  return apiRequest("PATCH", `/visits/${visitId}`, { json: patch });
}

export async function getVisit(visitId) {
  return apiRequest("GET", `/visits/${visitId}`);
}

/**
 * Additional helpers you can add:
 * export async function createVisit(data) { return apiRequest("POST", "/visits", { json: data }) }
 * export async function listVisits(params) { return apiRequest("GET", "/visits", { params }) }
 */

export default {
  rescheduleVisit,
  patchVisit,
  getVisit,
};
