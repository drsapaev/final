import React, { useEffect, useMemo, useState } from "react";
import Nav from "../components/Nav.jsx";
import RoleGate from "../components/RoleGate.jsx";
import { api, getApiBase } from "../api/client.js";

/**
 * РљР°СЃСЃР°: СЃРїРёСЃРѕРє РЅР°С‡РёСЃР»РµРЅРёР№/РїР»Р°С‚РµР¶РµР№ (РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ вЂ” РЅРµРѕРїР»Р°С‡РµРЅРЅС‹Рµ).
 * РЎРѕРІРјРµСЃС‚РёРјРѕ СЃ GET /payments?status=unpaid&limit=...
 * РџРµС‡Р°С‚СЊ СЃС‡РµС‚Р° С‡РµСЂРµР· /print/invoice.pdf?visit_id=...
 */
export default function Cashier() {
  const [page, setPage] = useState("Cashier");
  const [status, setStatus] = useState("unpaid");
  const [rows, setRows] = useState([]);
  const [q, setQ] = useState("");
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState("");

  async function load() {
    setBusy(true);
    setErr("");
    try {
      const res = await api.get("/payments", { params: { status, limit: 100 } });
      const items = Array.isArray(res?.items) ? res.items : Array.isArray(res) ? res : [];
      setRows(items);
    } catch (e) {
      setErr(e?.data?.detail || e?.message || "РћС€РёР±РєР° Р·Р°РіСЂСѓР·РєРё РїР»Р°С‚РµР¶РµР№");
    } finally {
      setBusy(false);
    }
  }

  useEffect(() => { load(); }, [status]);

  const filtered = useMemo(() => {
    if (!q) return rows;
    const qq = q.toLowerCase();
    return rows.filter(p =>
      String(p.patient_name || p.patient?.full_name || "").toLowerCase().includes(qq) ||
      String(p.id || "").toLowerCase().includes(qq) ||
      String(p.status || "").toLowerCase().includes(qq)
    );
  }, [q, rows]);

  async function printInvoice(p) {
    try {
      const base = new URL(getApiBase());
      const url = `${base.origin}${base.pathname.replace(/\/+$/, "")}/print/invoice.pdf?visit_id=${encodeURIComponent(p.visit_id || p.id)}`;
      const r = await fetch(url, { headers: { Accept: "application/pdf" } });
      const buf = await r.arrayBuffer();
      const blob = new Blob([buf], { type: "application/pdf" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = `invoice_${p.visit_id || p.id}.pdf`;
      document.body.appendChild(link);
      link.click();
      link.remove();
      URL.revokeObjectURL(link.href);
    } catch (e) {
      alert("РќРµ СѓРґР°Р»РѕСЃСЊ РЅР°РїРµС‡Р°С‚Р°С‚СЊ СЃС‡РµС‚");
    }
  }

  return (
    <div>
      <Nav active={page} onNavigate={setPage} />
      <RoleGate roles={["Admin", "Cashier"]}>
        <div style={{ padding: 16, display: "grid", gap: 12 }}>
          <h2 style={{ margin: 0 }}>РљР°СЃСЃР°</h2>

          <div style={panel}>
            <label>
              РЎС‚Р°С‚СѓСЃ:&nbsp;
              <select value={status} onChange={(e)=>setStatus(e.target.value)} style={inp}>
                <option value="">РІСЃРµ</option>
                <option value="unpaid">РЅРµРѕРїР»Р°С‡РµРЅРѕ</option>
                <option value="paid">РѕРїР»Р°С‡РµРЅРѕ</option>
                <option value="void">РІРѕР·РІСЂР°С‚/Р°РЅРЅСѓР»РёСЂ.</option>
              </select>
            </label>
            <input placeholder="РџРѕРёСЃРє РїРѕ РїР°С†РёРµРЅС‚Сѓ/СЃС‚Р°С‚СѓСЃСѓ/ID" value={q} onChange={(e)=>setQ(e.target.value)} style={{...inp, minWidth: 240}}/>
            <button onClick={load} disabled={busy} style={btn}>
              {busy ? "Р—Р°РіСЂСѓР·РєР°" : "РћР±РЅРѕРІРёС‚СЊ"}
            </button>
          </div>

          {err && <div style={errBox}>{String(err)}</div>}

          <div style={{ overflow: "auto", border: "1px solid #eee", borderRadius: 12, background: "#fff" }}>
            <table style={{ width: "100%", borderCollapse: "collapse" }}>
              <thead>
                <tr>
                  <th style={th}>ID</th>
                  <th style={th}>РџР°С†РёРµРЅС‚</th>
                  <th style={th}>РЎСѓРјРјР°</th>
                  <th style={th}>РЎС‚Р°С‚СѓСЃ</th>
                  <th style={th}>Р”РµР№СЃС‚РІРёСЏ</th>
                </tr>
              </thead>
              <tbody>
                {filtered.map(p => (
                  <tr key={p.id}>
                    <td style={td}>{p.id}</td>
                    <td style={td}>{p.patient_name || p.patient?.full_name || "вЂ”"}</td>
                    <td style={td}>{p.amount != null ? Number(p.amount).toFixed(0) : "вЂ”"}</td>
                    <td style={td}>{p.status || "вЂ”"}</td>
                    <td style={td}>
                      <button onClick={() => printInvoice(p)} style={btnSmall}>РџРµС‡Р°С‚СЊ СЃС‡С‘С‚Р°</button>
                    </td>
                  </tr>
                ))}
                {filtered.length === 0 && (
                  <tr><td style={td} colSpan={5}>РќРµС‚ Р·Р°РїРёСЃРµР№</td></tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </RoleGate>
    </div>
  );
}

const panel = { display: "flex", gap: 12, alignItems: "center", flexWrap: "wrap", border: "1px solid #eee", borderRadius: 12, padding: 12, background: "#fff" };
const inp = { padding: "6px 10px", border: "1px solid #ddd", borderRadius: 8, background: "#fff" };
const btn = { padding: "6px 10px", borderRadius: 8, border: "1px solid #ddd", background: "#fff", cursor: "pointer" };
const btnSmall = { padding: "4px 8px", borderRadius: 8, border: "1px solid #ddd", background: "#fff", cursor: "pointer" };
const th = { textAlign: "left", padding: 10, borderBottom: "1px solid #eee", fontWeight: 700, whiteSpace: "nowrap" };
const td = { padding: 10, borderBottom: "1px solid #f3f4f6", verticalAlign: "top" };
const errBox = { color: "#7f1d1d", background: "#fee2e2", border: "1px solid #fecaca", borderRadius: 8, padding: 8 };
