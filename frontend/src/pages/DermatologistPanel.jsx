import React, { useState, useEffect } from 'react';

const DermatologistPanel = () => {
  const [activeTab, setActiveTab] = useState('patients');
  const [patients, setPatients] = useState([]);
  const [skinExaminations, setSkinExaminations] = useState([]);
  const [cosmeticProcedures, setCosmeticProcedures] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [showExaminationForm, setShowExaminationForm] = useState(false);
  const [showProcedureForm, setShowProcedureForm] = useState(false);

  const [examinationForm, setExaminationForm] = useState({
    patient_id: '',
    examination_date: '',
    skin_type: '',
    skin_condition: '',
    lesions: '',
    distribution: '',
    symptoms: '',
    diagnosis: '',
    treatment_plan: '',
    follow_up: ''
  });

  const [procedureForm, setProcedureForm] = useState({
    patient_id: '',
    procedure_date: '',
    procedure_type: '',
    area_treated: '',
    technique: '',
    products_used: '',
    duration: '',
    results: '',
    recommendations: ''
  });

  useEffect(() => {
    loadPatients();
    loadSkinExaminations();
    loadCosmeticProcedures();
  }, []);

  const authHeader = () => ({
    Authorization: `Bearer ${localStorage.getItem('auth_token') || ''}`,
  });

  const loadPatients = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/v1/patients?department=Derma&limit=100', {
        headers: authHeader(),
      });
      if (response.ok) {
        const data = await response.json();
        setPatients(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadSkinExaminations = async () => {
    try {
      const response = await fetch('/api/v1/derma/examinations?limit=100', {
        headers: authHeader(),
      });
      if (response.ok) {
        const data = await response.json();
        setSkinExaminations(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      // —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    }
  };

  const loadCosmeticProcedures = async () => {
    try {
      const response = await fetch('/api/v1/derma/procedures?limit=100', {
        headers: authHeader(),
      });
      if (response.ok) {
        const data = await response.json();
        setCosmeticProcedures(Array.isArray(data) ? data : []);
      }
    } catch (error) {
      // —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    }
  };

  const handleExaminationSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/v1/derma/examinations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...authHeader(),
        },
        body: JSON.stringify(examinationForm),
      });
      if (response.ok) {
        setShowExaminationForm(false);
        setExaminationForm({
          patient_id: '',
          examination_date: '',
          skin_type: '',
          skin_condition: '',
          lesions: '',
          distribution: '',
          symptoms: '',
          diagnosis: '',
          treatment_plan: '',
          follow_up: '',
        });
        loadSkinExaminations();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–º–æ—Ç—Ä–∞:', error);
    }
  };

  const handleProcedureSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('/api/v1/derma/procedures', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...authHeader(),
        },
        body: JSON.stringify(procedureForm),
      });
      if (response.ok) {
        setShowProcedureForm(false);
        setProcedureForm({
          patient_id: '',
          procedure_date: '',
          procedure_type: '',
          area_treated: '',
          technique: '',
          products_used: '',
          duration: '',
          results: '',
          recommendations: '',
        });
        loadCosmeticProcedures();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:', error);
    }
  };

  const pageStyle = { padding: '20px', maxWidth: '1400px', margin: '0 auto', fontFamily: 'system-ui, -apple-system, sans-serif' };
  const cardStyle = { background: '#fff', border: '1px solid #e5e5e5', borderRadius: '8px', marginBottom: '20px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)' };
  const cardHeaderStyle = { padding: '20px', borderBottom: '1px solid #e5e5e5', display: 'flex', justifyContent: 'space-between', alignItems: 'center', backgroundColor: '#fd7e14', color: 'white', borderRadius: '8px 8px 0 0' };
  const cardContentStyle = { padding: '20px' };
  const buttonStyle = { padding: '8px 16px', backgroundColor: '#fd7e14', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer', marginRight: '8px', fontSize: '14px' };
  const buttonSecondaryStyle = { ...buttonStyle, backgroundColor: '#6c757d' };
  const buttonSuccessStyle = { ...buttonStyle, backgroundColor: '#28a745' };
  const tabsStyle = { display: 'flex', borderBottom: '1px solid #e5e5e5', marginBottom: '20px' };
  const tabStyle = { padding: '12px 20px', border: 'none', background: 'none', cursor: 'pointer', fontSize: '14px', borderBottom: '2px solid transparent' };
  const activeTabStyle = { padding: '12px 20px', border: 'none', background: 'none', cursor: 'pointer', fontSize: '14px', borderBottom: '2px solid #fd7e14', color: '#fd7e14' };
  const patientItemStyle = { display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', border: '1px solid #e5e5e5', borderRadius: '4px', marginBottom: '12px' };
  const formStyle = { display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' };
  const inputStyle = { width: '100%', padding: '8px 12px', border: '1px solid #ddd', borderRadius: '4px', fontSize: '14px', marginBottom: '12px' };
  const labelStyle = { display: 'block', marginBottom: '4px', fontWeight: '500', fontSize: '14px' };

  return (
    <div style={pageStyle}>
      <div style={{ marginBottom: '30px' }}>
        <h1 style={{ fontSize: '28px', fontWeight: 'bold', marginBottom: '8px', color: '#fd7e14' }}>üß¥ –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</h1>
        <p style={{ color: '#666', fontSize: '14px' }}>–û—Å–º–æ—Ç—Ä—ã –∫–æ–∂–∏, –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –≤–µ–¥–µ–Ω–∏–µ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</p>
      </div>

      <div style={tabsStyle}>
        <button style={activeTab === 'patients' ? activeTabStyle : tabStyle} onClick={() => setActiveTab('patients')}>üë• –ü–∞—Ü–∏–µ–Ω—Ç—ã</button>
        <button style={activeTab === 'examinations' ? activeTabStyle : tabStyle} onClick={() => setActiveTab('examinations')}>üîç –û—Å–º–æ—Ç—Ä—ã –∫–æ–∂–∏</button>
        <button style={activeTab === 'procedures' ? activeTabStyle : tabStyle} onClick={() => setActiveTab('procedures')}>‚ú® –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</button>
      </div>

      {activeTab === 'patients' && (
        <div>
          <div style={cardStyle}>
            <div style={cardHeaderStyle}>
              <h2 style={{ margin: 0, fontSize: '18px' }}>–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã</h2>
              <span style={{ fontSize: '14px' }}>–í—Å–µ–≥–æ: {patients.length} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</span>
            </div>
            <div style={cardContentStyle}>
              {loading ? (
                <div style={{ textAlign: 'center', padding: '40px' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...</div>
              ) : (
                <div>
                  {patients.map((patient) => (
                    <div key={patient.id} style={patientItemStyle}>
                      <div style={{ flex: 1 }}>
                        <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                          <h3 style={{ margin: 0, fontSize: '16px' }}>{patient.last_name} {patient.first_name} {patient.middle_name}</h3>
                          <span style={{ padding: '4px 8px', fontSize: '12px', borderRadius: '12px', backgroundColor: '#fff3cd', color: '#856404', marginLeft: '8px' }}>–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è</span>
                        </div>
                        <div style={{ fontSize: '12px', color: '#666' }}>üì± {patient.phone} | üìÖ {patient.birth_date} | üÜî ID: {patient.id}</div>
                      </div>
                      <div>
                        <button style={buttonStyle} onClick={() => { setSelectedPatient(patient); setExaminationForm({ ...examinationForm, patient_id: patient.id }); setShowExaminationForm(true); }}>üîç –û—Å–º–æ—Ç—Ä</button>
                        <button style={buttonStyle} onClick={() => { setSelectedPatient(patient); setProcedureForm({ ...procedureForm, patient_id: patient.id }); setShowProcedureForm(true); }}>‚ú® –ü—Ä–æ—Ü–µ–¥—É—Ä–∞</button>
                        <button style={buttonSuccessStyle} onClick={() => setSelectedPatient(patient)}>üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä</button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'examinations' && (
        <div>
          <div style={cardStyle}>
            <div style={cardHeaderStyle}>
              <h2 style={{ margin: 0, fontSize: '18px' }}>–û—Å–º–æ—Ç—Ä—ã –∫–æ–∂–∏</h2>
              <button style={{ ...buttonStyle, backgroundColor: 'white', color: '#fd7e14' }} onClick={() => setShowExaminationForm(true)}>‚ûï –ù–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä</button>
            </div>
            <div style={cardContentStyle}>
              <div>
                {skinExaminations.map((exam) => (
                  <div key={exam.id} style={patientItemStyle}>
                    <div style={{ flex: 1 }}>
                      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                        <h3 style={{ margin: 0, fontSize: '16px' }}>–û—Å–º–æ—Ç—Ä #{exam.id} ‚Äî –ü–∞—Ü–∏–µ–Ω—Ç ID: {exam.patient_id}</h3>
                        <span style={{ padding: '4px 8px', fontSize: '12px', borderRadius: '12px', backgroundColor: '#e3f2fd', color: '#1976d2', marginLeft: '8px' }}>{exam.examination_date}</span>
                      </div>
                      <div style={{ fontSize: '12px', color: '#666' }}>üß¥ –¢–∏–ø –∫–æ–∂–∏: {exam.skin_type} | üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ: {exam.skin_condition} | üéØ –ü–æ—Ä–∞–∂–µ–Ω–∏—è: {exam.lesions}</div>
                      <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>üìç –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ: {exam.distribution} | üí¨ –°–∏–º–ø—Ç–æ–º—ã: {exam.symptoms}</div>
                      <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>üß™ –î–∏–∞–≥–Ω–æ–∑: {exam.diagnosis}</div>
                    </div>
                    <div>
                      <button style={buttonStyle}>üìã –û—Ç—á–µ—Ç</button>
                      <button style={buttonSuccessStyle}>üì∏ –§–æ—Ç–æ</button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'procedures' && (
        <div>
          <div style={cardStyle}>
            <div style={cardHeaderStyle}>
              <h2 style={{ margin: 0, fontSize: '18px' }}>–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</h2>
              <button style={{ ...buttonStyle, backgroundColor: 'white', color: '#fd7e14' }} onClick={() => setShowProcedureForm(true)}>‚ûï –ù–æ–≤–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞</button>
            </div>
            <div style={cardContentStyle}>
              <div>
                {cosmeticProcedures.map((procedure) => (
                  <div key={procedure.id} style={patientItemStyle}>
                    <div style={{ flex: 1 }}>
                      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '8px' }}>
                        <h3 style={{ margin: 0, fontSize: '16px' }}>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ #{procedure.id} ‚Äî –ü–∞—Ü–∏–µ–Ω—Ç ID: {procedure.patient_id}</h3>
                        <span style={{ padding: '4px 8px', fontSize: '12px', borderRadius: '12px', backgroundColor: '#e8f5e8', color: '#2e7d32', marginLeft: '8px' }}>{procedure.procedure_date}</span>
                      </div>
                      <div style={{ fontSize: '12px', color: '#666' }}>‚ú® –¢–∏–ø: {procedure.procedure_type} | üéØ –û–±–ª–∞—Å—Ç—å: {procedure.area_treated} | ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {procedure.duration}</div>
                      <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>üß™ –¢–µ—Ö–Ω–∏–∫–∞: {procedure.technique} | üß¥ –ü—Ä–æ–¥—É–∫—Ç—ã: {procedure.products_used}</div>
                      <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {procedure.results}</div>
                    </div>
                    <div>
                      <button style={buttonStyle}>üìã –û—Ç—á–µ—Ç</button>
                      <button style={buttonSuccessStyle}>üì∏ –î–æ/–ü–æ—Å–ª–µ</button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {showExaminationForm && (
        <div style={cardStyle}>
          <div style={cardHeaderStyle}>
            <h2 style={{ margin: 0, fontSize: '18px' }}>–ù–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä –∫–æ–∂–∏ {selectedPatient ? `‚Äî ${selectedPatient.last_name} ${selectedPatient.first_name}` : ''}</h2>
          </div>
          <div style={cardContentStyle}>
            <form onSubmit={handleExaminationSubmit}>
              <div style={formStyle}>
                <div>
                  <label style={labelStyle}>–î–∞—Ç–∞ –æ—Å–º–æ—Ç—Ä–∞ *</label>
                  <input style={inputStyle} type="date" value={examinationForm.examination_date} onChange={(e) => setExaminationForm({ ...examinationForm, examination_date: e.target.value })} required />
                </div>
                <div>
                  <label style={labelStyle}>–¢–∏–ø –∫–æ–∂–∏ *</label>
                  <select style={inputStyle} value={examinationForm.skin_type} onChange={(e) => setExaminationForm({ ...examinationForm, skin_type: e.target.value })} required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–∂–∏</option>
                    <option value="normal">–ù–æ—Ä–º–∞–ª—å–Ω–∞—è</option>
                    <option value="dry">–°—É—Ö–∞—è</option>
                    <option value="oily">–ñ–∏—Ä–Ω–∞—è</option>
                    <option value="combination">–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</option>
                    <option value="sensitive">–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è</option>
                    <option value="mature">–ó—Ä–µ–ª–∞—è</option>
                  </select>
                </div>
              </div>

              <div style={formStyle}>
                <div>
                  <label style={labelStyle}>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏</label>
                  <select style={inputStyle} value={examinationForm.skin_condition} onChange={(e) => setExaminationForm({ ...examinationForm, skin_condition: e.target.value })}>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</option>
                    <option value="healthy">–ó–¥–æ—Ä–æ–≤–∞—è</option>
                    <option value="acne">–ê–∫–Ω–µ</option>
                    <option value="rosacea">–†–æ–∑–∞—Ü–µ–∞</option>
                    <option value="eczema">–≠–∫–∑–µ–º–∞</option>
                    <option value="psoriasis">–ü—Å–æ—Ä–∏–∞–∑</option>
                    <option value="hyperpigmentation">–ì–∏–ø–µ—Ä–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è</option>
                    <option value="aging">–ü—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∞—Ä–µ–Ω–∏—è</option>
                  </select>
                </div>
                <div>
                  <label style={labelStyle}>–ü–æ—Ä–∞–∂–µ–Ω–∏—è</label>
                  <input style={inputStyle} value={examinationForm.lesions} onChange={(e) => setExaminationForm({ ...examinationForm, lesions: e.target.value })} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–π" />
                </div>
              </div>

              <div style={formStyle}>
                <div>
                  <label style={labelStyle}>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ</label>
                  <input style={inputStyle} value={examinationForm.distribution} onChange={(e) => setExaminationForm({ ...examinationForm, distribution: e.target.value })} placeholder="–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π" />
                </div>
                <div>
                  <label style={labelStyle}>–°–∏–º–ø—Ç–æ–º—ã</label>
                  <input style={inputStyle} value={examinationForm.symptoms} onChange={(e) => setExaminationForm({ ...examinationForm, symptoms: e.target.value })} placeholder="–ó—É–¥, –±–æ–ª—å, –∂–∂–µ–Ω–∏–µ –∏ —Ç.–¥." />
                </div>
              </div>

              <div>
                <label style={labelStyle}>–î–∏–∞–≥–Ω–æ–∑</label>
                <textarea style={{ ...inputStyle, minHeight: '80px', resize: 'vertical' }} value={examinationForm.diagnosis} onChange={(e) => setExaminationForm({ ...examinationForm, diagnosis: e.target.value })} placeholder="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π/–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑" />
              </div>

              <div>
                <label style={labelStyle}>–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è</label>
                <textarea style={{ ...inputStyle, minHeight: '80px', resize: 'vertical' }} value={examinationForm.treatment_plan} onChange={(e) => setExaminationForm({ ...examinationForm, treatment_plan: e.target.value })} placeholder="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è" />
              </div>

              <div>
                <label style={labelStyle}>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä</label>
                <input style={inputStyle} type="date" value={examinationForm.follow_up} onChange={(e) => setExaminationForm({ ...examinationForm, follow_up: e.target.value })} />
              </div>

              <div>
                <button type="submit" style={buttonStyle}>üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–º–æ—Ç—Ä</button>
                <button type="button" style={buttonSecondaryStyle} onClick={() => setShowExaminationForm(false)}>–û—Ç–º–µ–Ω–∞</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showProcedureForm && (
        <div style={cardStyle}>
          <div style={cardHeaderStyle}>
            <h2 style={{ margin: 0, fontSize: '18px' }}>–ù–æ–≤–∞—è –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ {selectedPatient ? `‚Äî ${selectedPatient.last_name} ${selectedPatient.first_name}` : ''}</h2>
          </div>
          <div style={cardContentStyle}>
            <form onSubmit={handleProcedureSubmit}>
              <div style={formStyle}>
                <div>
                  <label style={labelStyle}>–î–∞—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã *</label>
                  <input style={inputStyle} type="date" value={procedureForm.procedure_date} onChange={(e) => setProcedureForm({ ...procedureForm, procedure_date: e.target.value })} required />
                </div>
                <div>
                  <label style={labelStyle}>–¢–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä—ã *</label>
                  <select style={inputStyle} value={procedureForm.procedure_type} onChange={(e) => setProcedureForm({ ...procedureForm, procedure_type: e.target.value })} required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É</option>
                    <option value="cleaning">–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞</option>
                    <option value="peeling">–ü–∏–ª–∏–Ω–≥</option>
                    <option value="mesotherapy">–ú–µ–∑–æ—Ç–µ—Ä–∞–ø–∏—è</option>
                    <option value="botox">–ë–æ—Ç–æ–∫—Å</option>
                    <option value="fillers">–§–∏–ª–ª–µ—Ä—ã</option>
                    <option value="laser">–õ–∞–∑–µ—Ä–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è</option>
                    <option value="ultrasound">–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–∞—è —Ç–µ—Ä–∞–ø–∏—è</option>
                    <option value="microdermabrasion">–ú–∏–∫—Ä–æ–¥–µ—Ä–º–∞–±—Ä–∞–∑–∏—è</option>
                  </select>
                </div>
              </div>

              <div style={formStyle}>
                <div>
                  <label style={labelStyle}>–û–±–ª–∞—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏</label>
                  <input style={inputStyle} value={procedureForm.area_treated} onChange={(e) => setProcedureForm({ ...procedureForm, area_treated: e.target.value })} placeholder="–õ–∏—Ü–æ, —à–µ—è, –¥–µ–∫–æ–ª—å—Ç–µ –∏ —Ç.–¥." />
                </div>
                <div>
                  <label style={labelStyle}>–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
                  <input style={inputStyle} value={procedureForm.technique} onChange={(e) => setProcedureForm({ ...procedureForm, technique: e.target.value })} placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏" />
                </div>
              </div>

              <div style={formStyle}>
                <div>
                  <label style={labelStyle}>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã</label>
                  <input style={inputStyle} value={procedureForm.products_used} onChange={(e) => setProcedureForm({ ...procedureForm, products_used: e.target.value })} placeholder="–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏" />
                </div>
                <div>
                  <label style={labelStyle}>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–º–∏–Ω)</label>
                  <input style={inputStyle} value={procedureForm.duration} onChange={(e) => setProcedureForm({ ...procedureForm, duration: e.target.value })} placeholder="–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö" />
                </div>
              </div>

              <div>
                <label style={labelStyle}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</label>
                <textarea style={{ ...inputStyle, minHeight: '80px', resize: 'vertical' }} value={procedureForm.results} onChange={(e) => setProcedureForm({ ...procedureForm, results: e.target.value })} placeholder="–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏–∑–º–µ–Ω–µ–Ω–∏—è" />
              </div>

              <div>
                <label style={labelStyle}>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</label>
                <textarea style={{ ...inputStyle, minHeight: '80px', resize: 'vertical' }} value={procedureForm.recommendations} onChange={(e) => setProcedureForm({ ...procedureForm, recommendations: e.target.value })} placeholder="–£—Ö–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" />
              </div>

              <div>
                <button type="submit" style={buttonStyle}>‚ú® –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É</button>
                <button type="button" style={buttonSecondaryStyle} onClick={() => setShowProcedureForm(false)}>–û—Ç–º–µ–Ω–∞</button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default DermatologistPanel;


