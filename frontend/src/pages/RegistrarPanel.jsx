import React, { useState, useEffect, useCallback, useRef, useMemo, memo, startTransition } from 'react';
import { useSearchParams } from 'react-router-dom';
import PhoneInput from '../components/ui/PhoneInput';
import { ToastContainer, toast } from 'react-toastify';
// import ServiceChecklist from '../components/ServiceChecklist';
import IntegratedServiceSelector from '../components/registrar/IntegratedServiceSelector';
import IntegratedDoctorSelector from '../components/registrar/IntegratedDoctorSelector';
// OnlineQueueManager —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ModernQueueManager
import AppointmentFlow from '../components/AppointmentFlow';
import EnhancedAppointmentsTable from '../components/tables/EnhancedAppointmentsTable';
import AppointmentContextMenu from '../components/tables/AppointmentContextMenu';
import ModernTabs from '../components/navigation/ModernTabs';
import ResponsiveNavigation from '../components/layout/ResponsiveNavigation';
import { Button, Card, Badge, Skeleton, AnimatedTransition, AnimatedToast, AnimatedLoader } from '../components/ui';
import { useBreakpoint, useTouchDevice } from '../hooks/useMediaQuery';
import { useTheme } from '../contexts/ThemeContext';
import PrintButton from '../components/print/PrintButton';
import { 
  Hospital, 
  Calendar, 
  Search, 
  MessageCircle, 
  HelpCircle, 
  Plus, 
  Download, 
  Sun, 
  Moon, 
  LogOut,
  Home,
  FileText,
  Heart,
  Activity,
  User,
  TestTube,
  Syringe,
  Settings,
  Globe,
  Printer,
  X,
  CreditCard
} from 'lucide-react';
import '../components/ui/animations.css';
import '../styles/responsive.css';
import '../styles/animations.css';
import '../styles/dark-theme-visibility-fix.css';

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
import PaymentDialog from '../components/dialogs/PaymentDialog';
import CancelDialog from '../components/dialogs/CancelDialog';
import PrintDialog from '../components/dialogs/PrintDialog';

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä (V2)
import AppointmentWizardV2 from '../components/wizard/AppointmentWizardV2';
import PaymentManager from '../components/payment/PaymentManager';

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
import ModernFilters from '../components/filters/ModernFilters';

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
import ModernQueueManager from '../components/queue/ModernQueueManager';

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
import ModernStatistics from '../components/statistics/ModernStatistics';
 

const RegistrarPanel = () => {
  console.log('üîÑ RegistrarPanel component rendered at:', new Date().toISOString());
  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ö—É–∫–∏
  const { isMobile, isTablet, isDesktop } = useBreakpoint();
  const isTouch = useTouchDevice();

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeTab, setActiveTab] = useState(null);
  const [searchParams] = useSearchParams();
  const todayStr = new Date().toISOString().split('T')[0];
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const searchDate = searchParams.get('date');
  const searchQuery = (searchParams.get('q') || '').toLowerCase();
  const statusFilter = searchParams.get('status');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏
  const [printDialog, setPrintDialog] = useState({ open: false, type: '', data: null });
  const [printInProgress, setPrintInProgress] = useState(false);
  const [cancelDialog, setCancelDialog] = useState({ open: false, row: null, reason: '' });
  const [paymentDialog, setPaymentDialog] = useState({ open: false, row: null, paid: false, source: null });
  
  const [contextMenu, setContextMenu] = useState({ open: false, row: null, position: { x: 0, y: 0 } });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [paginationInfo, setPaginationInfo] = useState({ total: 0, hasMore: false, loadingMore: false });
  // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
  const DEMO_APPOINTMENTS = [
    {
      id: 1,
      patient_fio: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
      patient_birth_year: 1985,
      patient_phone: '+998 (90) 123-45-67',
      address: '—É–ª. –ù–∞–≤–æ–∏, –¥. 15, –∫–≤. 23',
      services: ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', '–≠–ö–ì'],
      visit_type: 'paid',
      payment_type: 'card',
      payment_status: 'paid',
      cost: 50000,
      status: 'confirmed',
      isEmpty: false,
      department: 'cardiology',
      doctor_specialty: 'cardiology',
      date: todayStr,
      appointment_date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      queue_numbers: [
        {
          queue_tag: 'cardiology_common',
          queue_name: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
          number: 1,
          status: 'waiting',
          source: 'online',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: 'telegram_123456'
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)
    {
      id: 2,
      patient_fio: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', // –¢–æ—Ç –∂–µ –ø–∞—Ü–∏–µ–Ω—Ç
      patient_birth_year: 1985,
      patient_phone: '+998 (90) 123-45-67',
      address: '—É–ª. –ù–∞–≤–æ–∏, –¥. 15, –∫–≤. 23',
      services: ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞', '–î–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏—è'], // –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏
      visit_type: 'paid',
      payment_type: 'card',
      payment_status: 'paid',
      cost: 45000,
      status: 'confirmed',
      isEmpty: false,
      department: 'dermatology', // –î—Ä—É–≥–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
      doctor_specialty: 'dermatology',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      queue_numbers: [
        {
          queue_tag: 'dermatology',
          queue_name: '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥',
          number: 1,
          status: 'waiting',
          source: 'online',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: 'telegram_123456'
    },
    {
      id: 3,
      patient_fio: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', // –¢–æ—Ç –∂–µ –ø–∞—Ü–∏–µ–Ω—Ç
      patient_birth_year: 1985,
      patient_phone: '+998 (90) 123-45-67',
      address: '—É–ª. –ù–∞–≤–æ–∏, –¥. 15, –∫–≤. 23',
      services: ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞'], // –¢—Ä–µ—Ç—å—è —É—Å–ª—É–≥–∞
      visit_type: 'paid',
      payment_type: 'cash',
      payment_status: 'paid',
      cost: 30000,
      status: 'confirmed',
      isEmpty: false,
      department: 'stomatology', // –¢—Ä–µ—Ç—å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ
      doctor_specialty: 'stomatology',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      queue_numbers: [
        {
          queue_tag: 'stomatology',
          queue_name: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥',
          number: 1,
          status: 'waiting',
          source: 'online',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: 'telegram_123456'
    },
    {
      id: 2,
      patient_fio: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
      patient_birth_year: 1990,
      patient_phone: '+998 (91) 234-56-78',
      address: '–ø—Ä. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, –¥. 42',
      services: ['–≠–ö–ì', '–•–æ–ª—Ç–µ—Ä'],
      visit_type: 'repeat',
      payment_type: 'cash',
      payment_status: 'pending',
      cost: 30000,
      status: 'queued',
      isEmpty: false,
      department: 'cardiology',
      doctor_specialty: 'cardiology',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–µ–π
      queue_numbers: [
        {
          queue_tag: 'cardiology_common',
          queue_name: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
          number: 2,
          status: 'waiting',
          source: 'confirmation',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: 'registrar_1'
    },
    {
      id: 3,
      patient_fio: '–°–∏–¥–æ—Ä–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
      patient_birth_year: 1975,
      patient_phone: '+998 (93) 345-67-89',
      address: '—É–ª. –®–æ—Ç–∞ –†—É—Å—Ç–∞–≤–µ–ª–∏, –¥. 8, –∫–≤. 45',
      services: ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞'],
      visit_type: 'paid',
      payment_type: 'card',
      payment_status: 'paid',
      cost: 45000,
      status: 'confirmed',
      isEmpty: false,
      department: 'dermatology',
      doctor_specialty: 'dermatology',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      queue_numbers: [
        {
          queue_tag: 'dermatology',
          queue_name: '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥',
          number: 1,
          status: 'waiting',
          source: 'online',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: 'telegram_789012'
    },
    {
      id: 4,
      patient_fio: '–ö–æ–∑–ª–æ–≤–∞ –ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
      patient_birth_year: 1988,
      patient_phone: '+998 (94) 456-78-90',
      address: '—É–ª. –ë–∞–±—É—Ä–∞, –¥. 25',
      services: ['–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞'],
      visit_type: 'paid',
      payment_type: 'cash',
      payment_status: 'pending',
      cost: 60000,
      status: 'queued',
      isEmpty: false,
      department: 'stomatology',
      doctor_specialty: 'stomatology',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      queue_numbers: [
        {
          queue_tag: 'stomatology',
          queue_name: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥',
          number: 1,
          status: 'waiting',
          source: 'desk',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'none',
      confirmed_at: null,
      confirmed_by: null
    },
    {
      id: 5,
      patient_fio: '–ú–æ—Ä–æ–∑–æ–≤ –ê–ª–µ–∫—Å–µ–π –ò–≥–æ—Ä–µ–≤–∏—á',
      patient_birth_year: 1992,
      patient_phone: '+998 (95) 567-89-01',
      address: '—É–ª. –ú–∏—Ä–∑–æ –£–ª—É–≥–±–µ–∫–∞, –¥. 67, –∫–≤. 12',
      services: ['–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', '–ë–∏–æ—Ö–∏–º–∏—è'],
      visit_type: 'paid',
      payment_type: 'card',
      payment_status: 'paid',
      cost: 25000,
      status: 'confirmed',
      isEmpty: false,
      department: 'laboratory',
      doctor_specialty: 'laboratory',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      queue_numbers: [
        {
          queue_tag: 'lab',
          queue_name: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
          number: 1,
          status: 'waiting',
          source: 'online',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: 'telegram_345678'
    },
    {
      id: 6,
      patient_fio: '–í–æ–ª–∫–æ–≤–∞ –ï–ª–µ–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
      patient_birth_year: 1983,
      patient_phone: '+998 (97) 678-90-12',
      address: '—É–ª. –ê–ª–∏—à–µ—Ä–∞ –ù–∞–≤–æ–∏, –¥. 134',
      services: ['–ö–∞–ø–µ–ª—å–Ω–∏—Ü–∞', '–ò–Ω—ä–µ–∫—Ü–∏—è'],
      visit_type: 'free',
      payment_type: 'cash',
      payment_status: 'paid',
      cost: 35000,
      status: 'queued',
      isEmpty: false,
      department: 'procedures',
      doctor_specialty: 'procedures',
      date: todayStr,
      record_type: 'appointment', // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      appointment_date: todayStr,
      queue_numbers: [
        {
          queue_tag: 'procedures',
          queue_name: '–ü—Ä–æ—Ü–µ–¥—É—Ä—ã',
          number: 1,
          status: 'waiting',
          source: 'desk',
          created_at: new Date().toISOString()
        }
      ],
      confirmation_status: 'none',
      confirmed_at: null,
      confirmed_by: null
    }
  ];

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
  const [appointments, setAppointments] = useState([]);
  const [dataSource, setDataSource] = useState('loading'); // 'loading' | 'api' | 'demo' | 'error'
  const [appointmentsLoading, setAppointmentsLoading] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [appointmentsSelected, setAppointmentsSelected] = useState(new Set());
  const [showAddressColumn, setShowAddressColumn] = useState(true);
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä (V2)
  const [showWizard, setShowWizard] = useState(false);
  const [showPaymentManager, setShowPaymentManager] = useState(false); // –î–ª—è –º–æ–¥—É–ª—è –æ–ø–ª–∞—Ç—ã
  const [isProcessing, setIsProcessing] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const [patientSuggestions, setPatientSuggestions] = useState([]);
  const [showPatientSuggestions, setShowPatientSuggestions] = useState(false);
  const [patientErrors, setPatientErrors] = useState({});
  
  // Refs –¥–ª—è —Ñ–æ–∫—É—Å–∞ –≤ –º–∞—Å—Ç–µ—Ä–µ
  const fioRef = useRef(null);
  const dobRef = useRef(null);
  const phoneRef = useRef(null);
  
  // –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AppointmentWizard

  // –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    console.log('‚è≥ appointmentsLoading changed:', appointmentsLoading);
  }, [appointmentsLoading]);

  // –û—Ç–ª–∞–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π appointments
  useEffect(() => {
    console.log('üìã appointments changed, count:', appointments.length);
    if (appointments.length > 0) {
      console.log('üìã –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏:', appointments[0]);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (appointments.length > 0) {
      setTimeout(() => {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:');
        console.log('–ò—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏:', appointments.length);

        // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const patientGroups = {};
        appointments.forEach(appointment => {
          const patientKey = appointment.patient_fio;
          if (!patientGroups[patientKey]) {
            patientGroups[patientKey] = {
              patient_fio: appointment.patient_fio,
              services: [],
              departments: new Set(),
              cost: 0 // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            };
          }

          // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
          if (appointment.cost) {
            patientGroups[patientKey].cost += appointment.cost;
          }

          if (appointment.services && Array.isArray(appointment.services)) {
            appointment.services.forEach(service => {
              if (!patientGroups[patientKey].services.includes(service)) {
                patientGroups[patientKey].services.push(service);
              }
            });
          }
          if (appointment.department) {
            patientGroups[patientKey].departments.add(appointment.department);
          }
        });

        const aggregated = Object.values(patientGroups);
        console.log('–ü–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:', aggregated.length);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const firstPatient = aggregated[0];
        if (firstPatient) {
          console.log('–ü–µ—Ä–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:', firstPatient.patient_fio);
          console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥:', firstPatient.services.length);
          console.log('–£—Å–ª—É–≥–∏:', firstPatient.services);
          console.log('–û—Ç–¥–µ–ª–µ–Ω–∏—è:', Array.from(firstPatient.departments));
          console.log('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:', firstPatient.cost);
        }
      }, 100);
    }
  }, [appointments]);

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - filteredAppointments —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–∏–∂–µ –≤ –∫–æ–¥–µ
  const [showSlotsModal, setShowSlotsModal] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [showAppointmentFlow, setShowAppointmentFlow] = useState(false);
  const [showQRModal, setShowQRModal] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(true);

  // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ–¥–µ—Ä —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –Ω–æ–≤–æ–º –º–∞—Å—Ç–µ—Ä–µ
  const [selectedPatientId, setSelectedPatientId] = useState(null);
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é
  const [doctors, setDoctors] = useState([]);
  const [services, setServices] = useState({});
  const [queueSettings, setQueueSettings] = useState({});
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [selectedServices, setSelectedServices] = useState([]);
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  
  // –Ø–∑—ã–∫ (—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
  const [language, setLanguage] = useState(() => localStorage.getItem('ui_lang') || 'ru');
  
  useEffect(() => { localStorage.setItem('ui_lang', language); }, [language]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selectedDoctor –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–∞—á–æ–º
  useEffect(() => {
    if (!selectedDoctor && doctors.length > 0) {
      setSelectedDoctor(doctors[0]);
    }
  }, [doctors, selectedDoctor]);

  // –ü–µ—Ä–µ–≤–æ–¥—ã
  const translations = {
    ru: {
      // –û—Å–Ω–æ–≤–Ω—ã–µ
      welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
      start_work: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
      quick_start: '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç',
      loading: '–ó–∞–≥—Ä—É–∑–∫–∞',
      error: '–û—à–∏–±–∫–∞',
      success: '–£—Å–ø–µ—à–Ω–æ',
      warning: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      
      // –í–∫–ª–∞–¥–∫–∏
      tabs_welcome: '–ì–ª–∞–≤–Ω–∞—è',
      tabs_appointments: '–í—Å–µ –∑–∞–ø–∏—Å–∏',
      tabs_cardio: '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
      tabs_echokg: '–≠–ö–ì',
      tabs_derma: '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥',
      tabs_dental: '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥',
      tabs_lab: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
      tabs_procedures: '–ü—Ä–æ—Ü–µ–¥—É—Ä—ã',
      tabs_queue: '–û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å',
      
      // –î–µ–π—Å—Ç–≤–∏—è
      new_appointment: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
      export_csv: '–≠–∫—Å–ø–æ—Ä—Ç CSV',
      today: '–°–µ–≥–æ–¥–Ω—è',
      reset: '–°–±—Ä–æ—Å–∏—Ç—å',
      confirm: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
      cancel: '–û—Ç–º–µ–Ω–∏—Ç—å',
      no_show: '–ù–µ—è–≤–∫–∞',
      reason: '–ü—Ä–∏—á–∏–Ω–∞',
      bulk_actions: '–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
      search: '–ü–æ–∏—Å–∫',
      filter: '–§–∏–ª—å—Ç—Ä',
      clear_filter: '–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä',
      
      // –ú–∞—Å—Ç–µ—Ä
      patient: '–ü–∞—Ü–∏–µ–Ω—Ç',
      details: '–î–µ—Ç–∞–ª–∏',
      payment: '–û–ø–ª–∞—Ç–∞',
      next: '–î–∞–ª–µ–µ',
      back: '–ù–∞–∑–∞–¥',
      save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
      close: '–ó–∞–∫—Ä—ã—Ç—å',
      add_to_queue: '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å',
      priority: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      available_slots: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã',
      tomorrow: '–ó–∞–≤—Ç—Ä–∞',
      select_date: '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É',
      online_payment: '–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞',
      
      // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
      full_name: '–§–ò–û',
      birth_date: '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
      phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
      address: '–ê–¥—Ä–µ—Å',
      services: '–£—Å–ª—É–≥–∏',
      doctor: '–í—Ä–∞—á',
      appointment_type: '–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è',
      payment_method: '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
      amount: '–°—É–º–º–∞',
      
      // –°—Ç–∞—Ç—É—Å—ã
      status_scheduled: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
      status_confirmed: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      status_queued: '–í –æ—á–µ—Ä–µ–¥–∏',
      status_in_cabinet: '–í –∫–∞–±–∏–Ω–µ—Ç–µ',
      status_done: '–ó–∞–≤–µ—Ä—à–µ–Ω',
      status_cancelled: '–û—Ç–º–µ–Ω–µ–Ω',
      status_no_show: '–ù–µ—è–≤–∫–∞',
      status_paid_pending: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
      status_paid: '–û–ø–ª–∞—á–µ–Ω',
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      total_patients: '–í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
      today_appointments: '–ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è',
      pending_payments: '–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã',
      active_queues: '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏',
      empty_table: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      
      // –°–æ–æ–±—â–µ–Ω–∏—è
      appointment_created: '–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      appointment_cancelled: '–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞',
      payment_successful: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
      print_ticket: '–ü–µ—á–∞—Ç—å —Ç–∞–ª–æ–Ω–∞',
      auto_refresh: '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      data_source_demo: '–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ',
      data_source_api: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞'
    },
    uz: {
      // –û—Å–Ω–æ–≤–Ω—ã–µ
      welcome: 'Xush kelibsiz',
      start_work: 'Ishni boshlash',
      quick_start: 'Tezkor start',
      loading: 'Yuklanmoqda',
      error: 'Xatolik',
      success: 'Muvaffaqiyatli',
      warning: 'Ogohlantirish',
      
      // –í–∫–ª–∞–¥–∫–∏
      tabs_welcome: 'Asosiy',
      tabs_appointments: 'yozilganlar',
      tabs_cardio: 'Kardiolog',
      tabs_echokg: 'EKG',
      tabs_derma: 'Dermatolog',
      tabs_dental: 'Stomatolog',
      tabs_lab: 'Laboratoriya',
      tabs_procedures: 'muolaja',
      tabs_queue: 'navbat',
      
      // –î–µ–π—Å—Ç–≤–∏—è
      new_appointment: 'Yangi yozuv',
      export_csv: 'CSV eksport',
      today: 'Bugun',
      reset: 'Tozalash',
      confirm: 'Tasdiqlash',
      cancel: 'Bekor qilish',
      no_show: 'Kelmaslik',
      reason: 'Sabab',
      bulk_actions: 'Ommaviy amallar',
      search: 'Qidirish',
      filter: 'Filter',
      clear_filter: 'Filterni tozalash',
      
      // –ú–∞—Å—Ç–µ—Ä
      patient: 'Bemor',
      details: 'Tafsilotlar',
      payment: 'To\'lov',
      next: 'Keyingi',
      back: 'Orqaga',
      save: 'Saqlash',
      close: 'Yopish',
      add_to_queue: 'Navbatga qo\'shish',
      priority: 'Ustuvorlik',
      available_slots: 'Mavjud vaqtlar',
      tomorrow: 'Ertaga',
      select_date: 'Sanani tanlash',
      online_payment: 'Onlayn to\'lov',
      
      // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
      full_name: 'F.I.Sh',
      birth_date: 'Tug\'ilgan sana',
      phone: 'Telefon',
      address: 'Manzil',
      services: 'Xizmatlar',
      doctor: 'Shifokor',
      appointment_type: 'Murojaat turi',
      payment_method: 'To\'lov usuli',
      amount: 'Summa',
      
      // –°—Ç–∞—Ç—É—Å—ã
      status_scheduled: 'Rejalashtirilgan',
      status_confirmed: 'Tasdiqlangan',
      status_queued: 'Navbatda',
      status_in_cabinet: 'Kabinetda',
      status_done: 'Tugallangan',
      status_cancelled: 'Bekor qilingan',
      status_no_show: 'Kelmagan',
      status_paid_pending: 'To\'lovni kutmoqda',
      status_paid: 'To\'langan',
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      total_patients: 'Jami bemorlar',
      today_appointments: 'Bugungi yozuvlar',
      pending_payments: 'To\'lovni kutmoqda',
      active_queues: 'Faol navbatlar',
      empty_table: 'Ma\'lumot yo\'q',
      
      // –°–æ–æ–±—â–µ–Ω–∏—è
      appointment_created: 'Yozuv muvaffaqiyatli yaratildi',
      appointment_cancelled: 'Yozuv bekor qilindi',
      payment_successful: 'To\'lov muvaffaqiyatli o\'tdi',
      print_ticket: 'Talon chop etish',
      auto_refresh: 'Avtomatik yangilash',
      data_source_demo: 'Demo ma\'lumotlar ko\'rsatilgan',
      data_source_api: 'Ma\'lumotlar serverdan yuklandi'
    }
  };
  const t = (key) => (translations[language] && translations[language][key]) || translations.ru[key] || key;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–µ–º—É
  const { 
    theme,
    isDark, 
    isLight
  } = useTheme();

  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ–º–∏–∑–∞—Ü–∏–∏
  const cardBg = isDark ? 'var(--color-background-primary)' : 'var(--color-background-secondary)';
  const textColor = isDark ? 'var(--color-text-primary)' : 'var(--color-text-primary)';
  const borderColor = isDark ? 'var(--color-border-medium)' : 'var(--color-border-light)';
  const accentColor = 'var(--color-primary-500)';
  const successColor = 'var(--color-success)';
  const warningColor = 'var(--color-warning)';
  const dangerColor = 'var(--color-danger)';

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É –∏ –æ—Ç—Å—Ç—É–ø—ã
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ getSpacing –∏ getColor

  const pageStyle = {
    padding: '0',
    maxWidth: 'none',
    margin: '0',
    fontFamily: 'system-ui, -apple-system, sans-serif',
    fontSize: isMobile ? '14px' : isTablet ? '16px' : '18px',
    fontWeight: 400,
    lineHeight: 1.5,
    background: theme === 'light' 
      ? 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)'
      : 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)',
    minHeight: '100vh',
    position: 'relative'
  };

  const cardStyle = {
    background: theme === 'light' 
      ? 'rgba(255, 255, 255, 0.95)' 
      : 'rgba(15, 23, 42, 0.8)',
    backdropFilter: 'blur(20px)',
    color: textColor,
    border: `1px solid ${theme === 'light' ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.1)'}`,
    borderRadius: '20px',
    margin: '0 20px 20px 20px',
    boxShadow: theme === 'light' 
      ? '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
      : '0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1)',
    overflow: 'hidden',
    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
  };

  const cardHeaderStyle = {
    padding: '32px',
    borderBottom: `1px solid ${theme === 'light' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(255, 255, 255, 0.1)'}`,
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    background: 'linear-gradient(135deg, var(--color-primary-500) 0%, var(--color-primary-600) 50%, var(--color-primary-700) 100%)',
    color: 'white',
    textShadow: '0 1px 2px rgba(0, 0, 0, 0.5)',
    position: 'relative',
    overflow: 'hidden'
  };

  const cardContentStyle = {
    padding: '20px',
    color: textColor
  };

  // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã, –≤–∏–∑—É–∞–ª—å–Ω–æ "—Å–ª–∏–≤–∞–µ—Ç—Å—è" —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
  const tableContainerStyle = {
    background: theme === 'light'
      ? 'rgba(255, 255, 255, 0.98)'
      : 'rgba(15, 23, 42, 0.8)',
    backdropFilter: 'blur(20px)',
    color: textColor,
    borderLeft: `1px solid ${theme === 'light' ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.1)'}`,
    borderRight: `1px solid ${theme === 'light' ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.1)'}`,
    borderBottom: `1px solid ${theme === 'light' ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.1)'}`,
    borderTop: `1px solid ${theme === 'light' ? 'rgba(0, 0, 0, 0.08)' : 'rgba(255, 255, 255, 0.05)'}`,
    borderRadius: '0 0 20px 20px',
    margin: '0 20px 20px 20px',
    boxShadow: theme === 'light' 
      ? '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
      : '0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1)',
    overflow: 'hidden'
  };

  // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—Å—Ç—É–ø–∞
  const tableContentStyle = {
    padding: '0',
    color: textColor
  };

  const buttonStyle = {
    padding: '0.5rem 1.5rem',
    background: 'linear-gradient(135deg, var(--color-primary-500) 0%, var(--color-primary-600) 100%)',
    color: 'white',
    border: 'none',
    borderRadius: '12px',
    cursor: 'pointer',
    marginRight: '0.5rem',
    fontSize: '14px',
    fontWeight: '600',
    lineHeight: '1.25',
    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
    boxShadow: '0 4px 14px 0 rgba(59, 130, 246, 0.3)',
    position: 'relative',
    overflow: 'hidden',
    textShadow: '0 1px 2px rgba(0, 0, 0, 0.5)'
  };

  const buttonSecondaryStyle = {
    padding: `${'0.5rem'} ${'1.5rem'}`,
    background: theme === 'light' ? 'white' : 'var(--color-background-secondary)',
    color: textColor,
    border: `1px solid ${borderColor}`,
    borderRadius: '12px',
    cursor: 'pointer',
    marginRight: '0.5rem',
    fontSize: '14px',
    fontWeight: '600',
    lineHeight: '1.25',
    transition: 'all 0.2s ease',
    boxShadow: 'none',
  };
  

  const buttonSuccessStyle = {
    ...buttonStyle,
    background: `linear-gradient(135deg, ${'var(--color-success)'} 0%, ${'var(--color-success)'} 100%)`,
    boxShadow: '0 4px 14px 0 rgba(34, 197, 94, 0.3)'
  };

  const buttonDangerStyle = {
    ...buttonStyle,
    background: `linear-gradient(135deg, ${'var(--color-danger)'} 0%, ${'var(--color-danger)'} 100%)`,
    boxShadow: '0 4px 14px 0 rgba(239, 68, 68, 0.3)'
  };

  const buttonWarningStyle = {
    ...buttonStyle,
    background: `linear-gradient(135deg, ${'var(--color-warning)'} 0%, ${'var(--color-warning)'} 100%)`,
    color: '#212529',
    boxShadow: '0 4px 14px 0 rgba(245, 158, 11, 0.3)'
  };

  const inputStyle = {
    width: '100%',
    padding: '12px 16px',
    border: '1px solid #ddd',
    borderRadius: '8px',
    fontSize: '14px',
    marginBottom: '16px',
    transition: 'border-color 0.2s'
  };

  const labelStyle = {
    display: 'block',
    marginBottom: '8px',
    fontWeight: '500',
    fontSize: '14px'
  };

  const tabStyle = {
    padding: isMobile ? `${'0.25rem'} ${'0.5rem'}` : `${'0.5rem'} ${'2rem'}`,
    border: 'none',
    background: 'transparent',
    cursor: 'pointer',
    fontSize: isMobile ? '12px' : '14px',
    fontWeight: '500',
    lineHeight: '1.25',
    color: textColor,
    borderRadius: isMobile ? '8px' : '12px',
    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
    position: 'relative',
    overflow: 'hidden',
    minWidth: isMobile ? 'auto' : '120px',
    justifyContent: isMobile ? 'center' : 'flex-start',
    whiteSpace: 'nowrap',
    display: 'flex',
    alignItems: 'center',
    gap: isMobile ? '4px' : '0.25rem',
    borderBottom: '3px solid transparent'
  };

  const activeTabStyle = {
    ...tabStyle,
    background: `linear-gradient(135deg, ${'var(--color-primary-500)'} 0%, ${'var(--color-primary-600)'} 100%)`,
    color: 'white',
    boxShadow: '0 4px 14px 0 rgba(59, 130, 246, 0.3)',
    transform: 'translateY(-2px)',
    borderBottom: `3px solid ${'var(--color-primary-700)'}`
  };

  // –ë–∞–∑–æ–≤—ã–π URL API
    const API_BASE = (import.meta?.env?.VITE_API_BASE_URL) || 'http://localhost:8000';

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
  const loadIntegratedData = useCallback(async () => {
    console.log('üîß loadIntegratedData called at:', new Date().toISOString());
    try {
      // –£–ë–ò–†–ê–ï–ú setAppointmentsLoading(true) - —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–ø–∏—Å–µ–π
      // setAppointmentsLoading(true);
      
      // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–∞—á–µ–π –∏ —É—Å–ª—É–≥
      // console.debug('Setting fallback doctors and services data');
      setDoctors([
        { id: 1, specialty: 'cardiology', user: { full_name: '–î–æ–∫—Ç–æ—Ä –ö–∞—Ä–¥–∏–æ–ª–æ–≥' }, cabinet: '101', price_default: 50000 },
        { id: 2, specialty: 'dermatology', user: { full_name: '–î–æ–∫—Ç–æ—Ä –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥' }, cabinet: '102', price_default: 45000 },
        { id: 3, specialty: 'stomatology', user: { full_name: '–î–æ–∫—Ç–æ—Ä –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥' }, cabinet: '103', price_default: 60000 }
      ]);
      
      setServices({
        laboratory: [
          { id: 1, name: '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', price: 15000, specialty: 'laboratory', group: 'laboratory' },
          { id: 2, name: '–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', price: 25000, specialty: 'laboratory', group: 'laboratory' },
          { id: 3, name: '–ê–Ω–∞–ª–∏–∑ –º–æ—á–∏', price: 10000, specialty: 'laboratory', group: 'laboratory' },
          { id: 4, name: '–ê–Ω–∞–ª–∏–∑ –∫–∞–ª–∞', price: 12000, specialty: 'laboratory', group: 'laboratory' }
        ],
        cardiology: [
          { id: 13, name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', price: 50000, specialty: 'cardiology', group: 'cardiology' },
          { id: 14, name: '–≠–ö–ì', price: 20000, specialty: 'cardiology', group: 'cardiology' },
          { id: 15, name: '–≠—Ö–æ–ö–ì', price: 35000, specialty: 'cardiology', group: 'cardiology' },
          { id: 16, name: '–≠–ö–ì —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', price: 70000, specialty: 'cardiology', group: 'cardiology' },
          { id: 17, name: '–≠—Ö–æ–ö–ì —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞', price: 85000, specialty: 'cardiology', group: 'cardiology' }
        ],
        dermatology: [
          { id: 5, name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞-–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞', price: 40000, specialty: 'dermatology', group: 'dermatology' },
          { id: 6, name: '–î–µ—Ä–º–∞—Ç–æ—Å–∫–æ–ø–∏—è', price: 30000, specialty: 'dermatology', group: 'dermatology' },
          { id: 7, name: '–£–ó–ò –∫–æ–∂–∏', price: 20000, specialty: 'dermatology', group: 'dermatology' },
          { id: 8, name: '–õ–µ—á–µ–Ω–∏–µ –∞–∫–Ω–µ', price: 60000, specialty: 'dermatology', group: 'dermatology' }
        ],
        stomatology: [
          { id: 18, name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞', price: 30000, specialty: 'stomatology', group: 'stomatology' },
          { id: 19, name: '–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞', price: 80000, specialty: 'stomatology', group: 'stomatology' },
          { id: 20, name: '–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞', price: 50000, specialty: 'stomatology', group: 'stomatology' },
          { id: 21, name: '–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤', price: 40000, specialty: 'stomatology', group: 'stomatology' }
        ],
        cosmetology: [
          { id: 9, name: '–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞', price: 35000, specialty: 'cosmetology', group: 'cosmetology' },
          { id: 10, name: '–ü–∏–ª–∏–Ω–≥ –ª–∏—Ü–∞', price: 40000, specialty: 'cosmetology', group: 'cosmetology' },
          { id: 11, name: '–ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞', price: 25000, specialty: 'cosmetology', group: 'cosmetology' },
          { id: 12, name: '–ú–µ–∑–æ—Ç–µ—Ä–∞–ø–∏—è', price: 120000, specialty: 'cosmetology', group: 'cosmetology' }
        ],
        procedures: [
          { id: 22, name: '–§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è', price: 25000, specialty: 'procedures', group: 'procedures' },
          { id: 23, name: '–ú–∞—Å—Å–∞–∂', price: 30000, specialty: 'procedures', group: 'procedures' },
          { id: 24, name: '–ò–Ω–≥–∞–ª—è—Ü–∏—è', price: 15000, specialty: 'procedures', group: 'procedures' }
        ]
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–∞—á–µ–π, —É—Å–ª—É–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
      try {
      const token = localStorage.getItem('auth_token');
      console.log('üîç RegistrarPanel: token from localStorage:', token ? `${token.substring(0, 30)}...` : 'null');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å Promise.all
      let doctorsRes, servicesRes, queueRes;

      try {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–∞—á–µ–π —Å —Ç–æ–∫–µ–Ω–æ–º:', token ? `${token.substring(0, 30)}...` : 'null');
        doctorsRes = await fetch(`${API_BASE}/api/v1/registrar/doctors`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        console.log('üìä –û—Ç–≤–µ—Ç –≤—Ä–∞—á–µ–π:', doctorsRes.status, doctorsRes.statusText);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π:', error.message);
        doctorsRes = { ok: false };
      }

      try {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏...');
        servicesRes = await fetch(`${API_BASE}/api/v1/registrar/services`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        console.log('üìä –û—Ç–≤–µ—Ç —É—Å–ª—É–≥:', servicesRes.status, servicesRes.statusText);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error.message);
        servicesRes = { ok: false };
      }

      try {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏...');
        queueRes = await fetch(`${API_BASE}/api/v1/registrar/queue-settings`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        console.log('üìä –û—Ç–≤–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏:', queueRes.status, queueRes.statusText);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏:', error.message);
        queueRes = { ok: false };
      }

      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã API...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω—ã
      const allSuccess = doctorsRes.ok && servicesRes.ok && queueRes.ok;
      console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤:', {
        doctors: doctorsRes.ok ? 'OK' : 'ERROR',
        services: servicesRes.ok ? 'OK' : 'ERROR',
        queueSettings: queueRes.ok ? 'OK' : 'ERROR',
        allSuccess
      });

      if (!allSuccess) {
        console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É');
      }

      if (doctorsRes.ok) {
        try {
          const doctorsData = await doctorsRes.json();
          const apiDoctors = doctorsData.doctors || [];
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–µ–π –ø–æ–ª—É—á–µ–Ω—ã:', apiDoctors.length, '–≤—Ä–∞—á–µ–π');
          // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
          if (apiDoctors.length > 0) {
            setDoctors(apiDoctors);
            console.log('‚úÖ –í—Ä–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ API');
          }
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π:', error.message);
        }
      } else {
        console.warn('‚ùå API –≤—Ä–∞—á–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
      }

      if (servicesRes.ok) {
        try {
          const servicesData = await servicesRes.json();
          const apiServices = servicesData.services_by_group || {};
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥ –ø–æ–ª—É—á–µ–Ω—ã:', Object.keys(apiServices));
          // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
          if (Object.keys(apiServices).length > 0) {
            setServices(apiServices);
            console.log('‚úÖ –£—Å–ª—É–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ API');
          }
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥:', error.message);
        }
      } else {
        console.warn('‚ùå API —É—Å–ª—É–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
      }

      if (queueRes.ok) {
        try {
          const queueData = await queueRes.json();
          setQueueSettings(queueData);
          console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ API');
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏:', error.message);
        }
      } else {
        console.warn('‚ùå API –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
      }

      console.log('üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (fetchError) {
      // Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ)
      console.warn('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º:', fetchError.message);
    }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
    } finally {
      // –£–ë–ò–†–ê–ï–ú setAppointmentsLoading(false) - —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–ø–∏—Å–µ–π
      // setAppointmentsLoading(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø–æ ID
  const fetchPatientData = useCallback(async (patientId) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–º–æ-–ø–∞—Ü–∏–µ–Ω—Ç–æ–º (ID >= 1000)
    if (patientId >= 1000) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –¥–µ–º–æ-–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∏—Ö –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∑–∞–ø–∏—Å–∏
      return null;
    }
    
    const token = localStorage.getItem('auth_token');
    if (!token) return null;
    
    try {
      const response = await fetch(`${API_BASE}/api/v1/patients/${patientId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        return await response.json();
      }
    } catch (error) {
      // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
      if (error.message !== 'Failed to fetch') {
        console.error(`Error fetching patient ${patientId}:`, error);
      }
    }
    return null;
  }, [API_BASE]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
  const enrichAppointmentsWithPatientData = useCallback(async (appointments) => {
    const enrichedAppointments = await Promise.all(appointments.map(async (apt) => {
      let enrichedApt = { ...apt };
      
      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      if (apt.patient_id) {
        const patient = await fetchPatientData(apt.patient_id);
        if (patient) {
          enrichedApt = {
            ...enrichedApt,
            patient_fio: `${patient.last_name || ''} ${patient.first_name || ''} ${patient.middle_name || ''}`.trim(),
            patient_phone: patient.phone,
            patient_birth_year: patient.birth_date ? new Date(patient.birth_date).getFullYear() : null,
            address: patient.address || '–ù–µ —É–∫–∞–∑–∞–Ω', // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
          };
        }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–≤–µ—Ä—Ä–∞–π–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã), —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—Ç–∫–∞—Ç–∞
      try {
        const overridesRaw = localStorage.getItem('appointments_local_overrides');
        if (overridesRaw) {
          const overrides = JSON.parse(overridesRaw);
          const ov = overrides[String(enrichedApt.id)];
          if (ov && (!ov.expiresAt || ov.expiresAt > Date.now())) {
            enrichedApt = { ...enrichedApt, ...ov };
          }
        }
      } catch(_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      enrichedApt = {
        ...enrichedApt,
        // –ï—Å–ª–∏ –ø–æ–ª—è —É–∂–µ –µ—Å—Ç—å –≤ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        visit_type: enrichedApt.visit_type || 'paid', // –ü–ª–∞—Ç–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        payment_type: enrichedApt.payment_type || (enrichedApt.payment_provider === 'online' ? 'online' : 'cash'), // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
        // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª payment_status –æ—Ç API ‚Äî —É–≤–∞–∂–∞–µ–º –µ–≥–æ; –∏–Ω–∞—á–µ ‚Äî –≤—ã–≤–æ–¥–∏–º –∏–∑ payment_processed_at
        payment_status: enrichedApt.payment_status || (enrichedApt.payment_processed_at ? 'paid' : (enrichedApt.payment_amount > 0 ? 'pending' : 'pending')),
        services: enrichedApt.services || [], // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ—Ç —É—Å–ª—É–≥
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ cost –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º payment_amount –µ—Å–ª–∏ cost –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        cost: enrichedApt.cost || enrichedApt.payment_amount || 0,
      };
      
      return enrichedApt;
    }));
    return enrichedAppointments;
  }, [fetchPatientData]);

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const loadAppointments = useCallback(async (options = { silent: false }) => {
    console.log('üì• loadAppointments called at:', new Date().toISOString(), options);
    const { silent } = options || {};
    try {
      if (!silent) {
      setAppointmentsLoading(true);
      setDataSource('loading');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
      const token = localStorage.getItem('auth_token');
      console.log('üîç loadAppointments: token from localStorage:', token ? `${token.substring(0, 30)}...` : 'null');
      if (!token) {
        console.warn('–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–≤–µ—Ä—Ä–∞–π–¥—ã –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
        let demo = DEMO_APPOINTMENTS;
        try {
          const overridesRaw = localStorage.getItem('appointments_local_overrides');
          const overrides = overridesRaw ? JSON.parse(overridesRaw) : {};
          demo = DEMO_APPOINTMENTS.map(apt => {
            const ov = overrides[String(apt.id)];
            if (ov && (!ov.expiresAt || ov.expiresAt > Date.now())) {
              return { ...apt, ...ov };
            }
            return apt;
          });
        } catch(_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }
        startTransition(() => {
          if (!silent) setDataSource('demo');
          setAppointments(demo);
        });
        return;
      }
      
      console.log('üîç loadAppointments: making request with token:', token ? `${token.substring(0, 30)}...` : 'null');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const response = await fetch(`${API_BASE}/api/v1/registrar/queues/today${activeTab ? `?department=${activeTab}` : ''}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –¥–∞–Ω–Ω—ã–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        let appointmentsData = [];

        if (data && typeof data === 'object') {
          console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ registrar_integration.py
          if (data.queues && Array.isArray(data.queues)) {
            console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—á–µ—Ä–µ–¥–µ–π:', data.queues.length, '–æ—á–µ—Ä–µ–¥–µ–π');

            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏
            if (activeTab) {
              console.log('üìä –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:', activeTab);

              // –ù–∞—Ö–æ–¥–∏–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              const targetQueue = data.queues.find(queue => {
                const match = queue.specialty === activeTab ||
                  (activeTab === 'cardio' && queue.specialty === 'cardiology') ||
                  (activeTab === 'derma' && queue.specialty === 'dermatology') ||
                  (activeTab === 'dental' && queue.specialty === 'stomatology') ||
                  (activeTab === 'lab' && queue.specialty === 'laboratory') ||
                  (activeTab === 'procedures' && queue.specialty === 'procedures');

                console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ${queue.specialty}: ${match ? '–ø–æ–¥—Ö–æ–¥–∏—Ç' : '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'}`);
                return match;
              });

              console.log('üìä –ù–∞–π–¥–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å:', targetQueue);

              if (targetQueue && targetQueue.entries) {
                console.log(`üìä –û—á–µ—Ä–µ–¥—å ${targetQueue.specialty} –∏–º–µ–µ—Ç ${targetQueue.entries.length} –∑–∞–ø–∏—Å–µ–π`);

                appointmentsData = targetQueue.entries.map((entry, index) => {
                  console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏ ${entry.id} –∏–∑ API:`, {
                    id: entry.id,
                    record_type: entry.record_type,
                    status: entry.status,
                    payment_status: entry.payment_status
                  });
                  console.log(`üìã –í—Å–µ –∫–ª—é—á–∏ entry –∏–∑ API:`, Object.keys(entry));
                  console.log(`üìã –ü–æ–ª–Ω—ã–π entry –æ–±—ä–µ–∫—Ç:`, JSON.stringify(entry, null, 2));

                  const appointment = {
                    id: entry.id,
                    patient_id: entry.patient_id,
                    patient_fio: entry.patient_name,
                    patient_birth_year: entry.patient_birth_year,
                    patient_phone: entry.phone,
                    address: entry.address,
                    doctor_id: targetQueue.specialist_id,
                    department: targetQueue.specialty,
                    appointment_date: data.date,
                    appointment_time: entry.visit_time,
                    status: entry.status,
                    services: entry.services || [],
                    service_codes: entry.service_codes || [],
                    cost: entry.cost || 0,
                    payment_status: entry.payment_status || 'pending',
                    discount_mode: entry.discount_mode,
                    source: entry.source,
                    record_type: entry.record_type,  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
                    created_at: entry.created_at,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º created_at –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
                    queue_numbers: [{
                      queue_tag: targetQueue.specialty,
                      queue_name: targetQueue.specialist_name,
                      number: entry.number,
                      status: entry.status,
                      source: entry.source,
                      created_at: entry.created_at
                    }],
                    confirmation_status: 'none',
                    confirmed_at: null,
                    confirmed_by: null
                  };

                  console.log(`üìä –ó–∞–ø–∏—Å—å ${index + 1}:`, appointment);
                  return appointment;
                });
              } else {
                appointmentsData = [];
                console.log('üìä –û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
              }
            } else {
              console.log('üìä –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏');

              // –ë–µ—Ä–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–∏—Å–∏
              appointmentsData = [];
              for (const queue of data.queues) {
                console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å ${queue.specialty} —Å ${queue.entries?.length || 0} –∑–∞–ø–∏—Å—è–º–∏`);

                if (queue.entries && Array.isArray(queue.entries)) {
                  const queueAppointments = queue.entries.map((entry, index) => {
                    console.log(`üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏ ${entry.id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${queue.specialty}:`, {
                      id: entry.id,
                      record_type: entry.record_type,
                      status: entry.status,
                      payment_status: entry.payment_status
                    });
                    console.log(`üìã –í—Å–µ –∫–ª—é—á–∏ entry –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${queue.specialty}:`, Object.keys(entry));
                    console.log(`üìã –ü–æ–ª–Ω—ã–π entry –æ–±—ä–µ–∫—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏:`, JSON.stringify(entry, null, 2));

                    const appointment = {
                      id: entry.id,
                      patient_id: entry.patient_id,
                      patient_fio: entry.patient_name,
                      patient_birth_year: entry.patient_birth_year,
                      patient_phone: entry.phone,
                      address: entry.address,
                      doctor_id: queue.specialist_id,
                      department: queue.specialty,
                      appointment_date: data.date,
                      appointment_time: entry.visit_time,
                      status: entry.status,
                      services: entry.services || [],
                      service_codes: entry.service_codes || [],
                      cost: entry.cost || 0,
                      payment_status: entry.payment_status || 'pending',
                      discount_mode: entry.discount_mode,
                      source: entry.source,
                      record_type: entry.record_type,  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏
                      created_at: entry.created_at,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º created_at –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
                      queue_numbers: [{
                        queue_tag: queue.specialty,
                        queue_name: queue.specialist_name,
                        number: entry.number,
                        status: entry.status,
                        source: entry.source,
                        created_at: entry.created_at
                      }],
                      confirmation_status: 'none',
                      confirmed_at: null,
                      confirmed_by: null
                    };

                    console.log(`üìä –ó–∞–ø–∏—Å—å ${index + 1} –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${queue.specialty}:`, appointment);
                    return appointment;
                  });
                  appointmentsData.push(...queueAppointments);
                }
              }
            }
          } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if (activeTab && data[activeTab]) {
              appointmentsData = Array.isArray(data[activeTab]) ? data[activeTab] : [];
            } else {
              // –ë–µ—Ä–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
              for (const dept in data) {
                const deptData = data[dept];
                if (Array.isArray(deptData)) {
                  appointmentsData.push(...deptData);
                }
              }
            }
          }

          setPaginationInfo({
            total: appointmentsData.length,
            hasMore: false,
            loadingMore: false
          });

          console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${appointmentsData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ${activeTab || '–≤—Å–µ'}`);

          // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
          if (appointmentsData.length > 0) {
            console.log('üìã ID –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', appointmentsData.map(a => a.id));
          }

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º
          if (appointmentsData.length === 0) {
            console.log('üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è');
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            setAppointments([]);
            setDataSource('api'); // ‚úÖ –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API
            setAppointmentsLoading(false);
            return; // ‚úÖ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
          }
        } else {
          console.warn('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        if (appointmentsData.length > 0) {
          // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö
          const enriched = await enrichAppointmentsWithPatientData(appointmentsData);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          startTransition(() => {
            setAppointments(prev => {
              const locallyModified = prev.filter(apt => apt._locallyModified);
              // –¢–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–≤–µ—Ä—Ä–∞–π–¥—ã –∏–∑ localStorage (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
              let overrides = {};
              try {
                const overridesRaw = localStorage.getItem('appointments_local_overrides');
                overrides = overridesRaw ? JSON.parse(overridesRaw) : {};
              } catch(_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }

              const enrichedWithLocal = enriched.map(apt => {
                const localVersion = locallyModified.find(local => local.id === apt.id);
                const override = overrides[String(apt.id)];
                let merged = localVersion ? { ...apt, ...localVersion } : apt;
                if (override && (!override.expiresAt || override.expiresAt > Date.now())) {
                  merged = { ...merged, ...override };
                }
                return merged;
              });
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
              try {
                const prevStr = JSON.stringify(prev);
                const nextStr = JSON.stringify(enrichedWithLocal);
                if (prevStr === nextStr) return prev;
              } catch (_) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON
            }
              return enrichedWithLocal;
            });
            // –ù–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            setDataSource(prev => (prev === 'api' ? prev : 'api'));
          });
          console.debug('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±–æ–≥–∞—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ API:', enriched.length, '–∑–∞–ø–∏—Å–µ–π');
          console.log('üíæ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:', enriched[0]);
        } else {
          // API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –æ–≤–µ—Ä—Ä–∞–π–¥–æ–≤
          let demo = DEMO_APPOINTMENTS;
          try {
            const overridesRaw = localStorage.getItem('appointments_local_overrides');
            const overrides = overridesRaw ? JSON.parse(overridesRaw) : {};
            demo = DEMO_APPOINTMENTS.map(apt => {
              const ov = overrides[String(apt.id)];
              if (ov && (!ov.expiresAt || ov.expiresAt > Date.now())) {
                return { ...apt, ...ov };
              }
              return apt;
            });
          } catch(_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }
          startTransition(() => {
            setAppointments(prev => {
              try {
                const prevStr = JSON.stringify(prev);
                const nextStr = JSON.stringify(demo);
                if (prevStr === nextStr) return prev;
              } catch (_) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON
            }
              return demo;
            });
            setDataSource(prev => (prev === 'demo' ? prev : 'demo'));
          });
        }
      } else if (response.status === 401) {
        // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        console.warn('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (401), –æ—á–∏—â–∞–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
        localStorage.removeItem('auth_token');
        startTransition(() => {
          if (!silent) setDataSource(prev => (prev === 'demo' ? prev : 'demo'));
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≤–µ—Ä—Ä–∞–π–¥—ã –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
          let demo = DEMO_APPOINTMENTS;
          try {
            const overridesRaw = localStorage.getItem('appointments_local_overrides');
            const overrides = overridesRaw ? JSON.parse(overridesRaw) : {};
            demo = DEMO_APPOINTMENTS.map(apt => {
              const ov = overrides[String(apt.id)];
              if (ov && (!ov.expiresAt || ov.expiresAt > Date.now())) {
                return { ...apt, ...ov };
              }
              return apt;
            });
          } catch(_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }
          setAppointments(prev => {
            try {
              const prevStr = JSON.stringify(prev);
              const nextStr = JSON.stringify(demo);
              if (prevStr === nextStr) return prev;
            } catch (_) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON
            }
            return demo;
          });
        });
      } else {
        throw new Error(`API Error: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º:', error.message);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        startTransition(() => {
          if (!silent) setDataSource(prev => (prev === 'demo' ? prev : 'demo'));
          setAppointments(prev => {
            try {
              const prevStr = JSON.stringify(prev);
              const nextStr = JSON.stringify(DEMO_APPOINTMENTS);
              if (prevStr === nextStr) return prev;
            } catch (_) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON
            }
            return DEMO_APPOINTMENTS;
          });
        });
      startTransition(() => {
        if (!silent) setDataSource(prev => (prev === 'demo' ? prev : 'demo'));
        setAppointments(prev => {
          try {
            const prevStr = JSON.stringify(prev);
            const nextStr = JSON.stringify(DEMO_APPOINTMENTS);
            if (prevStr === nextStr) return prev;
          } catch (_) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è JSON
          }
          return DEMO_APPOINTMENTS;
        });
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      if (appointments.length === 0) {
        toast('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.', { icon: '‚ÑπÔ∏è' });
      }
    } finally {
      if (!silent) setAppointmentsLoading(false);
    }
  }, [enrichAppointmentsWithPatientData]);

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ React 18
  const initialLoadRef = useRef(false);
  useEffect(() => {
    if (initialLoadRef.current) return;
    initialLoadRef.current = true;
    console.log('üöÄ Starting initial data load (guarded)...');
    loadAppointments();
    loadIntegratedData();
    setIsInitialLoad(false);
  }, [loadAppointments, loadIntegratedData]);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (initialLoadRef.current) {
      console.log('üîÑ –§–∏–ª—å—Ç—Ä—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
      loadAppointments({ silent: true });
    }
  }, [searchDate, searchQuery, statusFilter, loadAppointments]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
  const loadMoreAppointments = useCallback(async () => {
    if (paginationInfo.loadingMore || !paginationInfo.hasMore) return;
    
    setPaginationInfo(prev => ({ ...prev, loadingMore: true }));
    
    try {
      const token = localStorage.getItem('auth_token');
      if (!token) return;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      const response = await fetch(`${API_BASE}/api/v1/registrar/queues/today${activeTab ? `?department=${activeTab}` : ''}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –¥–∞–Ω–Ω—ã–µ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        let newAppointments = [];

        if (data && typeof data === 'object') {
          console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ):', data);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ registrar_integration.py
          if (data.queues && Array.isArray(data.queues)) {
            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏
            if (activeTab) {
              // –ù–∞—Ö–æ–¥–∏–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
              const targetQueue = data.queues.find(queue =>
                queue.specialty === activeTab ||
                (activeTab === 'cardio' && queue.specialty === 'cardiology') ||
                (activeTab === 'derma' && queue.specialty === 'dermatology') ||
                (activeTab === 'dental' && queue.specialty === 'stomatology') ||
                (activeTab === 'lab' && queue.specialty === 'laboratory') ||
                (activeTab === 'procedures' && queue.specialty === 'procedures')
              );

              if (targetQueue && targetQueue.entries) {
                newAppointments = targetQueue.entries.map(entry => ({
                  id: entry.id,
                  patient_id: null,
                  patient_fio: entry.patient_name,
                  patient_phone: entry.phone,
                  doctor_id: null,
                  department: targetQueue.specialty,
                  appointment_date: data.date,
                  appointment_time: null,
                  status: entry.status,
                  services: [],
                  service_codes: [],
                  source: entry.source,
                  created_at: entry.created_at,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º created_at
                  queue_numbers: [{
                    queue_tag: targetQueue.specialty,
                    queue_name: targetQueue.specialist_name,
                    number: entry.number,
                    status: entry.status,
                    source: entry.source,
                    created_at: entry.created_at
                  }],
                  confirmation_status: 'none',
                  confirmed_at: null,
                  confirmed_by: null
                }));
              } else {
                newAppointments = [];
              }
            } else {
              // –ë–µ—Ä–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø–∏—Å–∏
              for (const queue of data.queues) {
                if (queue.entries && Array.isArray(queue.entries)) {
                  const queueAppointments = queue.entries.map(entry => ({
                    id: entry.id,
                    patient_id: null,
                    patient_fio: entry.patient_name,
                    patient_phone: entry.phone,
                    doctor_id: queue.specialist_id,
                    department: queue.specialty,
                    appointment_date: data.date,
                    appointment_time: null,
                    status: entry.status,
                    services: [],
                    service_codes: [],
                    source: entry.source,
                    created_at: entry.created_at,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º created_at
                    queue_numbers: [{
                      queue_tag: queue.specialty,
                      queue_name: queue.specialist_name,
                      number: entry.number,
                      status: entry.status,
                      source: entry.source,
                      created_at: entry.created_at
                    }],
                    confirmation_status: 'none',
                    confirmed_at: null,
                    confirmed_by: null
                  }));
                  newAppointments.push(...queueAppointments);
                }
              }
            }
          } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if (activeTab && data[activeTab]) {
              newAppointments = Array.isArray(data[activeTab]) ? data[activeTab] : [];
            } else {
              // –ë–µ—Ä–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
              for (const dept in data) {
                const deptData = data[dept];
                if (Array.isArray(deptData)) {
                  newAppointments.push(...deptData);
                }
              }
            }
          }
        }

        if (newAppointments.length > 0) {
          const enriched = await enrichAppointmentsWithPatientData(newAppointments);
          setAppointments(prev => [...prev, ...enriched]);
          setPaginationInfo({
            total: appointments.length + newAppointments.length,
            hasMore: false, // –ü–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            loadingMore: false
          });
        } else {
          console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
          setPaginationInfo(prev => ({ ...prev, loadingMore: false }));
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      setPaginationInfo(prev => ({ ...prev, loadingMore: false }));
    }
  }, [paginationInfo, appointments.length, activeTab, API_BASE]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ö–µ–¥–µ—Ä–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–ø–∏—Å–∏
  useEffect(() => {
    const handleOpenWizard = () => {
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      setSelectedPatientId(null);
      setPatientSuggestions([]);
      setShowPatientSuggestions(false);
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ AppointmentWizard
      setShowWizard(true);
    };

    window.addEventListener('openAppointmentWizard', handleOpenWizard);
    return () => {
      window.removeEventListener('openAppointmentWizard', handleOpenWizard);
    };
  }, []);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–∞—É–∑—ã (–≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ)
  useEffect(() => {
    // –í–æ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä–∞ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º–µ—Ä—Ü–∞–Ω–∏–π
    if (showWizard || paymentDialog.open || printDialog.open || cancelDialog.open) return;
    if (!autoRefresh) return;
    
    const id = setInterval(() => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Ç–∏—Ö–æ, –±–µ–∑ —Å–º–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
      loadAppointments({ silent: true });
    }, 15000);
    
    return () => clearInterval(id);
  }, [autoRefresh, showWizard, paymentDialog.open, printDialog.open, cancelDialog.open]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ –ø–æ—Ç–æ–∫–∞
  const handleStartVisit = async (appointment) => {
    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      const response = await fetch(`${API_BASE}/api/v1/appointments/${appointment.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          status: 'in_progress'
        })
      });

      if (response.ok) {
        const updatedAppointment = await response.json();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        setAppointments(prev => prev.map(apt => 
          apt.id === appointment.id ? { ...apt, status: 'in_progress', _locallyModified: true } : apt
        ));
        toast.success('–ü—Ä–∏–µ–º –Ω–∞—á–∞—Ç —É—Å–ø–µ—à–Ω–æ!');
      } else {
        // –ï—Å–ª–∏ PATCH –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        console.warn('PATCH –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        setAppointments(prev => prev.map(apt => 
          apt.id === appointment.id ? { ...apt, status: 'in_progress', _locallyModified: true } : apt
        ));
        toast.success('–ü—Ä–∏–µ–º –Ω–∞—á–∞—Ç (–ª–æ–∫–∞–ª—å–Ω–æ)');
      }
    } catch (error) {
      console.warn('RegistrarPanel: Start visit API error, updating locally:', error);
      // –§–æ–ª–±—ç–∫ - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      setAppointments(prev => prev.map(apt => 
        apt.id === appointment.id ? { ...apt, status: 'in_progress', _locallyModified: true } : apt
      ));
      toast.success('–ü—Ä–∏–µ–º –Ω–∞—á–∞—Ç (–ª–æ–∫–∞–ª—å–Ω–æ)');
    }
  };

  const handlePayment = async (appointment) => {
    try {
      console.log('üîç handlePayment –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', appointment);
      console.log('üîç appointment.id:', appointment.id, '—Ç–∏–ø:', typeof appointment.id);
      console.log('üîç appointment.record_type:', appointment.record_type);
      console.log('üîç –í—Å–µ –∫–ª—é—á–∏ appointment:', Object.keys(appointment));
      console.log('üîç –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç appointment:', JSON.stringify(appointment, null, 2));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é
      const isAggregated = appointment.departments && appointment.departments instanceof Set;
      console.log('üîç –≠—Ç–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:', isAggregated);

      // –ï—Å–ª–∏ —ç—Ç–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å, –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
      let recordsToUpdate = [appointment]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å
      if (isAggregated) {
        console.log('üîç –ò—â–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', appointment.patient_fio);
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        const allPatientRecords = appointments.filter(apt => apt.patient_fio === appointment.patient_fio);
        console.log('üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞:', allPatientRecords.length);
        recordsToUpdate = allPatientRecords;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
      const paymentStatus = (appointment.payment_status || '').toLowerCase();
      const status = (appointment.status || '').toLowerCase();
      const discountMode = (appointment.discount_mode || '').toLowerCase();
      
      console.log('–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:', paymentStatus, '–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏:', status, 'Discount mode:', discountMode);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ discount_mode
      if (paymentStatus === 'paid' || 
          status === 'paid' || 
          status === 'queued' ||
          discountMode === 'paid') {
        toast.info('–ó–∞–ø–∏—Å—å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞');
        return appointment;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º record_type –∏–∑ API, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ ID
      const recordType = appointment.record_type || (appointment.id >= 20000 ? 'visit' : 'appointment');
      const realId = appointment.id;
      
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏:', recordsToUpdate.map(r => r.id), '–¢–∏–ø –∑–∞–ø–∏—Å–∏:', recordType);

      const API_BASE = (import.meta?.env?.VITE_API_BASE_URL) || 'http://localhost:8000';

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π record_type –∏ ID)
      const paymentRecord = recordsToUpdate[0];
      const paymentRecordType = paymentRecord.record_type || (paymentRecord.id >= 20000 ? 'visit' : 'appointment');
      const paymentRecordId = paymentRecord.id;

      console.log('üîç –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–ø–∏—Å–∏:', paymentRecordId, '—Ç–∏–ø–∞:', paymentRecordType);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏
      let url;
      if (paymentRecordType === 'visit') {
        // –î–ª—è –∑–∞–ø–∏—Å–µ–π –∏–∑ visits –∏—Å–ø–æ–ª—å–∑—É–µ–º API visits
        url = `${API_BASE}/api/v1/registrar/visits/${paymentRecordId}/mark-paid`;
      } else {
        // –î–ª—è –∑–∞–ø–∏—Å–µ–π –∏–∑ appointments –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π API
        url = `${API_BASE}/api/v1/appointments/${paymentRecordId}/mark-paid`;
      }
      
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:', url);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });
      
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (response.ok) {
        const updatedAppointment = await response.json();
        console.log('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', updatedAppointment);

        console.log('‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞');
        console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏:', recordsToUpdate.map(r => r.id));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞
        recordsToUpdate.forEach(record => {
          const recordWithQueuedStatus = {
            ...record,
            status: 'queued', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–í –æ—á–µ—Ä–µ–¥–∏" –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            payment_status: 'paid',
            _locallyModified: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          };

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–≤–µ—Ä—Ä–∞–π–¥ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
          try {
            const overridesRaw = localStorage.getItem('appointments_local_overrides');
            const overrides = overridesRaw ? JSON.parse(overridesRaw) : {};
            overrides[String(record.id)] = {
              status: recordWithQueuedStatus.status,
              payment_status: recordWithQueuedStatus.payment_status,
              // TTL 10 –º–∏–Ω—É—Ç
              expiresAt: Date.now() + 10 * 60 * 1000
            };
            localStorage.setItem('appointments_local_overrides', JSON.stringify(overrides));
          } catch(_) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
          setAppointments(prev => prev.map(apt => (
            apt.id === record.id ? recordWithQueuedStatus : apt
          )));
        });

        toast.success(`–û–ø–ª–∞—á–µ–Ω–æ ${recordsToUpdate.length} –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å!`);
        // –ú—è–≥–∫–æ –ø–æ–¥—Ç—è–Ω–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å –±—ç–∫–µ–Ω–¥–∞
        setTimeout(() => loadAppointments({ silent: true }), 800);
        return updatedAppointment;
      } else {
        const errorText = await response.text();
        console.error('–û—à–∏–±–∫–∞ API:', response.status, errorText);
        
        let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ';
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.detail) {
            errorMessage = errorData.detail;
            // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö
            if (errorMessage.includes('—É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞') || errorMessage.includes('PAID -> PAID')) {
              toast('–ó–∞–ø–∏—Å—å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞', { icon: '‚ÑπÔ∏è' });
              const updatedAppointment = {
                ...appointment,
                status: 'queued',
                payment_status: 'paid'
              };
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–≤–µ—Ä—Ä–∞–π–¥
              try {
                const overridesRaw = localStorage.getItem('appointments_local_overrides');
                const overrides = overridesRaw ? JSON.parse(overridesRaw) : {};
                overrides[String(appointment.id)] = {
                  status: updatedAppointment.status,
                  payment_status: updatedAppointment.payment_status,
                  expiresAt: Date.now() + 10 * 60 * 1000
                };
                localStorage.setItem('appointments_local_overrides', JSON.stringify(overrides));
              } catch(_) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }

              setAppointments(prev => prev.map(apt => (
                apt.id === appointment.id ? updatedAppointment : apt
              )));
              setTimeout(() => loadAppointments({ silent: true }), 800);
              return updatedAppointment;
            }
          }
        } catch (e) {
          errorMessage = errorText || errorMessage;
        }
        
        toast.error(errorMessage);
        return null;
      }
    } catch (error) {
      console.error('RegistrarPanel: Payment error:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const updateAppointmentStatus = useCallback(async (appointmentId, status, reason = '') => {
    try {
      if (!appointmentId || Number(appointmentId) <= 0) {
        toast.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏');
        return;
      }
      const token = localStorage.getItem('auth_token');
      if (!token) {
        toast.error('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
        return;
      }
      let url = '';
      let method = 'POST';
      let body;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
      const isFromVisits = appointmentId >= 20000;
      const realId = isFromVisits ? appointmentId - 20000 : appointmentId;
      
      if (status === 'complete' || status === 'done') {
        if (isFromVisits) {
          url = `${API_BASE}/api/v1/registrar/visits/${realId}/complete`;
        } else {
          url = `${API_BASE}/api/v1/appointments/${realId}/complete`;
        }
        body = JSON.stringify({ reason });
      } else if (status === 'paid' || status === 'mark-paid') {
        if (isFromVisits) {
          url = `${API_BASE}/api/v1/registrar/visits/${realId}/mark-paid`;
        } else {
          url = `${API_BASE}/api/v1/appointments/${realId}/mark-paid`;
        }
      } else if (status === 'cancelled' || status === 'canceled') {
        // –ü–æ–∫–∞ –Ω–µ—Ç API –¥–ª—è –æ—Ç–º–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        console.log('–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ (–ª–æ–∫–∞–ª—å–Ω–æ):', appointmentId);
        setAppointments(prev => prev.map(apt => 
          apt.id === appointmentId ? { 
            ...apt, 
            status: 'cancelled',
            _locallyModified: true,
            _cancelReason: reason
          } : apt
        ));
        toast.success('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)');
        return { id: appointmentId, status: 'cancelled' };
      } else if (status === 'confirmed') {
        // –ü–æ–∫–∞ –Ω–µ—Ç API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–ª–æ–∫–∞–ª—å–Ω–æ):', appointmentId);
        setAppointments(prev => prev.map(apt => 
          apt.id === appointmentId ? { 
            ...apt, 
            status: 'confirmed',
            _locallyModified: true
          } : apt
        ));
        toast.success('–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)');
        return { id: appointmentId, status: 'confirmed' };
      } else if (status === 'no_show') {
        // –ü–æ–∫–∞ –Ω–µ—Ç API –¥–ª—è –Ω–µ—è–≤–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        console.log('–ù–µ—è–≤–∫–∞ –∑–∞–ø–∏—Å–∏ (–ª–æ–∫–∞–ª—å–Ω–æ):', appointmentId, '–ü—Ä–∏—á–∏–Ω–∞:', reason);
        setAppointments(prev => prev.map(apt => 
          apt.id === appointmentId ? { 
            ...apt, 
            status: 'no_show',
            _locallyModified: true,
            _noShowReason: reason
          } : apt
        ));
        toast.success('–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ—è–≤–∫–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)');
        return { id: appointmentId, status: 'no_show' };
      } else if (status === 'in_cabinet') {
        if (isFromVisits) {
          url = `${API_BASE}/api/v1/registrar/visits/${realId}/start-visit`;
        } else {
          url = `${API_BASE}/api/v1/appointments/${realId}/start-visit`;
        }
      } else {
        console.log('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å:', status);
        toast.error('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        return;
      }
      
      console.log('–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏:', appointmentId, '–Ω–∞', status, 'URL:', url);
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body
      });
      
      console.log('–û—Ç–≤–µ—Ç API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', response.status, response.statusText);
      
      if (!response.ok) {
        const errText = await response.text().catch(() => '');
        console.error('–û—à–∏–±–∫–∞ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', response.status, errText);
        throw new Error(errText || `API ${response.status}`);
      }
      
      const updatedAppointment = await response.json();
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:', updatedAppointment);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAppointments(prev => prev.map(apt => 
        apt.id === appointmentId ? { ...apt, status: updatedAppointment.status || status } : apt
      ));
      
      await loadAppointments();
      toast.success('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
      return updatedAppointment;
    } catch (error) {
      console.error('RegistrarPanel: Update status error:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: ' + error.message);
      return null;
    }
  }, [API_BASE, loadAppointments]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ Badge –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const getStatusVariant = (status) => {
    const variantMap = {
      'plan': 'primary',
      'confirmed': 'success',
      'queued': 'warning',
      'in_cabinet': 'purple',
      'done': 'success',
      'cancelled': 'danger',
      'no_show': 'orange',
      'paid_pending': 'warning',
      'paid': 'success'
    };
    return variantMap[status] || 'default';
  };

  const handleBulkAction = useCallback(async (action, reason = '') => {
    if (appointmentsSelected.size === 0) return;
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if (['cancelled', 'no_show'].includes(action)) {
      const ok = window.confirm(`–ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ¬´${action}¬ª –¥–ª—è ${appointmentsSelected.size} –∑–∞–ø–∏—Å–µ–π?`);
      if (!ok) return;
    }

    const results = await Promise.allSettled(
      Array.from(appointmentsSelected).map(id => updateAppointmentStatus(id, action, reason))
    );

    const successCount = results.filter(r => r.status === 'fulfilled').length;
    const failCount = results.length - successCount;

    if (successCount > 0) toast.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
    if (failCount > 0) toast.error(`–û—à–∏–±–æ–∫: ${failCount}`);
    setAppointmentsSelected(new Set());
  }, [appointmentsSelected, updateAppointmentStatus]);

  // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
  useEffect(() => {
    const handleKeyDown = (e) => {
      // –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
      console.log('Key pressed:', e.key, 'Ctrl:', e.ctrlKey, 'Alt:', e.altKey, 'Target:', e.target.tagName);
      
      if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
        console.log('Ignoring key press in input/textarea');
        return;
      }
      
      if (e.key === 'Enter') {
        // Enter –≤ –º–∞—Å—Ç–µ—Ä–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
        // –ó–¥–µ—Å—å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      } else if (e.ctrlKey) {
        if (e.key === 'p') {
          e.preventDefault();
        } else if (e.key === 'k') {
          e.preventDefault();
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
          setSelectedPatientId(null);
          setPatientSuggestions([]);
          setShowPatientSuggestions(false);
          setShowWizard(true);
        } else if (e.key === '1') setActiveTab('welcome');
        else if (e.key === '2') setActiveTab('appointments');
        else if (e.key === '3') setActiveTab('cardio');
        else if (e.key === '4') setActiveTab('derma');
        else if (e.key === '5') setActiveTab('queue');
        else if (e.key === 'a') {
          e.preventDefault();
          console.log('Ctrl+A: –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏');
          const allIds = filteredAppointments.map(a => a.id);
          setAppointmentsSelected(new Set(allIds));
          console.log('–í—ã–±—Ä–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π:', allIds.length);
        } else if (e.key === 'd') {
          e.preventDefault();
          console.log('Ctrl+D: –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ');
          setAppointmentsSelected(new Set());
        }
      } else if (e.altKey) {
        console.log('Alt key pressed with:', e.key, 'Selected rows:', appointmentsSelected.size);
        if (e.key === '1') { 
          e.preventDefault(); 
          console.log('Alt+1: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å');
          if (appointmentsSelected.size > 0) {
            handleBulkAction('confirmed'); 
          } else {
            console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
          }
        } else if (e.key === '2') { 
          e.preventDefault(); 
          console.log('Alt+2: –û—Ç–º–µ–Ω–∏—Ç—å');
          if (appointmentsSelected.size > 0) {
            const reason = window.prompt('–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã');
            if (reason) handleBulkAction('cancelled', reason);
          } else {
            console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
          }
        } else if (e.key === '3') { 
          e.preventDefault(); 
          console.log('Alt+3: –ù–µ—è–≤–∫–∞');
          if (appointmentsSelected.size > 0) {
            handleBulkAction('no_show'); 
          } else {
            console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–µ—è–≤–∫–∏');
          }
        }
      } else if (e.key === 'Escape') {
        if (showWizard) setShowWizard(false);
        if (showSlotsModal) setShowSlotsModal(false);
        if (showQRModal) setShowQRModal(false);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [showWizard, showSlotsModal, showQRModal, appointments, handleBulkAction, appointmentsSelected]);

  // ‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –û–¢–î–ï–õ–ê–ú
  const isInDepartment = useCallback((appointment, departmentKey) => {
    const dept = (appointment.department?.toLowerCase() || '');
    const specialty = (appointment.doctor_specialty?.toLowerCase() || '');
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã —É—Å–ª—É–≥ –∏–∑ service_codes
    const appointmentServiceCodes = appointment.service_codes || [];
    
    // –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)
    const appointmentServices = appointment.services || [];
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Å–ª—É–≥–∏ –≤ –∫–æ–¥—ã —É—Å–ª—É–≥
    const serviceCodesFromServices = appointmentServices.map(service => {
      if (services && typeof services === 'object') {
        // –ò—â–µ–º —É—Å–ª—É–≥—É –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö
        for (const groupName in services) {
          const groupServices = services[groupName];
          if (Array.isArray(groupServices)) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID (–µ—Å–ª–∏ service - —á–∏—Å–ª–æ)
            if (typeof service === 'number' || (typeof service === 'string' && !isNaN(service))) {
              const serviceId = parseInt(service);
              const serviceByID = groupServices.find(s => s.id === serviceId);
              if (serviceByID && serviceByID.service_code) {
                return serviceByID.service_code;
              }
            }
            
            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            const serviceByName = groupServices.find(s => s.name === service);
            if (serviceByName && serviceByName.service_code) {
              return serviceByName.service_code;
            }
          }
        }
      }
      return null;
    }).filter(code => code !== null);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–¥—ã –∏–∑ service_codes –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ services
    const allServiceCodes = [...appointmentServiceCodes, ...serviceCodesFromServices];
    
    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –º–∞–ø–ø–∏–Ω–≥ –ø–æ –∫–æ–¥–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
    const departmentCategoryMapping = {
      'cardio': ['K', 'ECHO'],   // –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ –∏ –≠—Ö–æ–ö–ì
      'echokg': ['ECG'],         // –≠–ö–ì - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Ç–æ–ª—å–∫–æ –≠–ö–ì)
      'derma': ['D', 'DERM', 'DERM_PROC'],            // –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –¥–µ—Ä–º. –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
      'dental': ['S', 'DENT', 'STOM'],           // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —Ä–µ–Ω—Ç–≥–µ–Ω
      'lab': ['L'],              // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: –≤—Å–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
      'procedures': ['P', 'C', 'D_PROC', 'PHYS', 'COSM']  // –ü—Ä–æ—Ü–µ–¥—É—Ä—ã: —Ñ–∏–∑–∏–æ, –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è, –¥–µ—Ä–º.–ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
    const targetCategoryCodes = departmentCategoryMapping[departmentKey] || [];
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ —É—Å–ª—É–≥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)
    const getServiceCategoryByCode = (serviceCode) => {
      if (!serviceCode) return null;

      // –≠–ö–ì - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Ç–æ–ª—å–∫–æ –≠–ö–ì)
      if (serviceCode === 'ECG01' || serviceCode === 'CARD_ECG' || serviceCode.includes('ECG') || serviceCode.includes('–≠–ö–ì')) return 'ECG';

      // –≠—Ö–æ–ö–ì - –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ –∏ –≠—Ö–æ–ö–ì)
      if (serviceCode === 'K11' || serviceCode === 'CARD_ECHO' || serviceCode.includes('ECHO') || serviceCode.includes('–≠—Ö–æ–ö–ì')) return 'ECHO';

      // –§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è (–¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è) - –∫–æ–¥—ã P01-P05
      if (serviceCode.match(/^P\d+$/)) return 'P';

      // –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã - –∫–æ–¥—ã D_PROC01-D_PROC04
      if (serviceCode.match(/^D_PROC\d+$/)) return 'D_PROC';

      // –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã - –∫–æ–¥—ã C01-C12
      if (serviceCode.match(/^C\d+$/)) return 'C';

      // –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è - –∫–æ–¥—ã K01, K11
      if (serviceCode.match(/^K\d+$/)) return 'K';

      // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è - –∫–æ–¥—ã S01, S10
      if (serviceCode.match(/^S\d+$/)) return 'S';

      // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è - –∫–æ–¥—ã L01-L65
      if (serviceCode.match(/^L\d+$/)) return 'L';

      // –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è - —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (D01)
      if (serviceCode === 'D01') return 'D';

      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–æ–≤ (–ø—Ä–µ—Ñ–∏–∫—Å—ã) - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
      if (serviceCode.startsWith('CONS_CARD')) return 'K';  // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞
      if (serviceCode.startsWith('CONS_DERM') || serviceCode.startsWith('DERMA_')) return 'DERM';  // –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è-–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è
      if (serviceCode.startsWith('CONS_DENT') || serviceCode.startsWith('DENT_') || serviceCode.startsWith('STOM_')) return 'DENT';  // –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
      if (serviceCode.startsWith('LAB_')) return 'L';  // –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
      if (serviceCode.startsWith('COSM_')) return 'C';  // –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è
      if (serviceCode.startsWith('PHYSIO_') || serviceCode.startsWith('PHYS_')) return 'P';  // –§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è
      if (serviceCode.startsWith('DERM_PROC_') || serviceCode.startsWith('DERM_')) return 'D_PROC';  // –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏
      if (serviceCode.startsWith('CARD_') && !serviceCode.includes('ECG')) return 'K';

      return null;
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    const matchesByDepartment = dept.includes(departmentKey) || 
                               (departmentKey === 'derma' && (dept.includes('dermat') || dept.includes('dermatology'))) ||
                               (departmentKey === 'dental' && (dept.includes('dental') || dept.includes('stoma') || dept.includes('dentistry'))) ||
                               (departmentKey === 'cardio' && dept.includes('cardiology')) ||
                               (departmentKey === 'echokg' && (dept.includes('ecg') || dept.includes('—ç–∫–≥'))) ||
                               (departmentKey === 'lab' && (dept.includes('lab') || dept.includes('laboratory'))) ||
                               (departmentKey === 'procedures' && (dept.includes('procedures') || dept.includes('cosmetology')));
    
    const matchesBySpecialty = specialty.includes(departmentKey) ||
                              (departmentKey === 'derma' && specialty.includes('dermat')) ||
                              (departmentKey === 'dental' && (specialty.includes('dental') || specialty.includes('stoma'))) ||
                              (departmentKey === 'cardio' && specialty.includes('cardio')) ||
                              (departmentKey === 'echokg' && (specialty.includes('ecg') || specialty.includes('—ç–∫–≥'))) ||
                              (departmentKey === 'lab' && (specialty.includes('lab') || specialty.includes('laboratory')));
    
    // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–æ–¥–∞–º —É—Å–ª—É–≥
    const matchesByServices = allServiceCodes.some(serviceCode => {
      const serviceCategory = getServiceCategoryByCode(serviceCode);
      return targetCategoryCodes.includes(serviceCategory);
    });
    
    const result = matchesByDepartment || matchesBySpecialty || matchesByServices;
    
    // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    return result;
  }, [services]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
  const departmentStats = useMemo(() => {
    const stats = {};
    const departments = ['cardio', 'echokg', 'derma', 'dental', 'lab', 'procedures'];
    
    departments.forEach(dept => {
      const deptAppointments = appointments.filter(a => isInDepartment(a, dept));
      const todayAppointments = deptAppointments.filter(a => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –ø–æ–ª–µ date
        const appointmentDate = a.date || a.appointment_date;
        return appointmentDate === todayStr;
      });
      
      stats[dept] = {
        todayCount: todayAppointments.length,
        hasActiveQueue: deptAppointments.some(a => a.status === 'queued'),
        hasPendingPayments: deptAppointments.some(a => a.status === 'paid_pending' || a.payment_status === 'pending')
      };
    });
    
    return stats;
  }, [appointments, todayStr]);

  // –°—á–µ—Ç—á–∏–∫ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª –ø–æ –æ—Ç–¥–µ–ª–∞–º
  const getDepartmentCount = useCallback((departmentKey) => {
    return departmentStats[departmentKey]?.todayCount || 0;
  }, [departmentStats]);

  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É
  const hasActiveQueue = useCallback((departmentKey) => {
    return departmentStats[departmentKey]?.hasActiveQueue || false;
  }, [departmentStats]);

  const hasPendingPayments = useCallback((departmentKey) => {
    return departmentStats[departmentKey]?.hasPendingPayments || false;
  }, [departmentStats]);

  // –§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"
  const aggregatePatientsForAllDepartments = useCallback((appointments) => {
    const patientGroups = {};

    appointments.forEach(appointment => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º patient_fio –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
      const patientKey = appointment.patient_fio;

      if (!patientGroups[patientKey]) {
        patientGroups[patientKey] = {
          id: appointment.id,
          patient_id: appointment.patient_id,
          patient_fio: appointment.patient_fio,
          patient_birth_year: appointment.patient_birth_year,
          patient_phone: appointment.patient_phone,
          address: appointment.address,
          visit_type: appointment.visit_type,
          payment_type: appointment.payment_type,
          payment_status: appointment.payment_status,
          cost: 0, // –ë—É–¥–µ—Ç —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
          status: appointment.status,
          date: appointment.date,
          appointment_date: appointment.appointment_date,
          created_at: appointment.created_at,
          // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π
          services: [],
          departments: new Set(),
          doctors: new Set(),
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø–∞–≤—à—É—é—Å—è –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
          department: appointment.department,
          doctor_specialty: appointment.doctor_specialty,
          queue_numbers: appointment.queue_numbers || [],
          confirmation_status: appointment.confirmation_status,
          confirmed_at: appointment.confirmed_at,
          confirmed_by: appointment.confirmed_by,
          record_type: appointment.record_type // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        };
      }

      // –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –í–°–ï–• –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–≤—É—é)
      if (appointment.cost) {
        patientGroups[patientKey].cost += appointment.cost;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
      if (appointment.services && Array.isArray(appointment.services)) {
        appointment.services.forEach(service => {
          if (!patientGroups[patientKey].services.includes(service)) {
            patientGroups[patientKey].services.push(service);
          }
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ–Ω–∏–∏
      if (appointment.department) {
        patientGroups[patientKey].departments.add(appointment.department);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ
      if (appointment.doctor_specialty) {
        patientGroups[patientKey].doctors.add(appointment.doctor_specialty);
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
    return Object.values(patientGroups);
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–ª–∏–∫ —Å–Ω–∏–º–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä ‚Üí activeTab === null)
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–µ + –ø–æ –¥–∞—Ç–µ (?date=YYYY-MM-DD) + –ø–æ –ø–æ–∏—Å–∫—É (?q=...)

  const filteredAppointments = useMemo(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ (–Ω–µ "–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    if (activeTab) {
      const filtered = appointments.filter(appointment => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –≤–∫–ª–∞–¥–∫–µ (–æ—Ç–¥–µ–ª)
        if (!isInDepartment(appointment, activeTab)) {
          return false;
        }
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        if (statusFilter && appointment.status !== statusFilter) return false;
        // –ü–æ–∏—Å–∫ –ø–æ –§–ò–û/—Ç–µ–ª–µ—Ñ–æ–Ω—É/—É—Å–ª—É–≥–∞–º/ID –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        if (searchQuery) {
          const inFio = (appointment.patient_fio || '').toLowerCase().includes(searchQuery);

          // –ü–æ–∏—Å–∫ –ø–æ ID –∑–∞–ø–∏—Å–∏
          const inId = String(appointment.id).includes(searchQuery);

          // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É - –∏—â–µ–º –∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º, –∏ –≤ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
          const originalPhone = (appointment.patient_phone || '').toLowerCase();
          const phoneDigits = originalPhone.replace(/\D/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
          const searchDigits = searchQuery.replace(/\D/g, ''); // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –ø–æ–∏—Å–∫–∞

          const inPhone = originalPhone.includes(searchQuery) ||
                         phoneDigits.includes(searchDigits) ||
                         (searchDigits.length >= 3 && phoneDigits.includes(searchDigits));

          const inServices = Array.isArray(appointment.services) && appointment.services.some(s => String(s).toLowerCase().includes(searchQuery));
          if (!inFio && !inPhone && !inServices && !inId) return false;
        }
        return true;
      });

      return filtered;
    }

    // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ "–í—Å–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è" (activeTab === null) - –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    if (!activeTab) {
      // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
      let filtered = appointments.filter(appointment => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        if (statusFilter && appointment.status !== statusFilter) return false;
        return true;
      });

      // –ó–∞—Ç–µ–º –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
      const aggregatedPatients = aggregatePatientsForAllDepartments(filtered);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
      if (searchQuery) {
        return aggregatedPatients.filter(patient => {
          const inFio = (patient.patient_fio || '').toLowerCase().includes(searchQuery);

          // –ü–æ–∏—Å–∫ –ø–æ ID –∑–∞–ø–∏—Å–∏
          const inId = String(patient.id).includes(searchQuery);

          // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          const originalPhone = (patient.patient_phone || '').toLowerCase();
          const phoneDigits = originalPhone.replace(/\D/g, '');
          const searchDigits = searchQuery.replace(/\D/g, '');

          const inPhone = originalPhone.includes(searchQuery) ||
                         phoneDigits.includes(searchDigits) ||
                         (searchDigits.length >= 3 && phoneDigits.includes(searchDigits));

          // –ü–æ–∏—Å–∫ –ø–æ —É—Å–ª—É–≥–∞–º (—Ç–µ–ø–µ—Ä—å –∏—â–µ–º –≤ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
          const inServices = Array.isArray(patient.services) && patient.services.some(s => String(s).toLowerCase().includes(searchQuery));

          return inFio || inPhone || inServices || inId;
        });
      }

      return aggregatedPatients;
    }

    return appointments;
  }, [appointments, activeTab, searchDate, statusFilter, searchQuery, isInDepartment, aggregatePatientsForAllDepartments]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫)
  const DataSourceIndicator = memo(({ count }) => {
    if (dataSource === 'demo') {
      return (
        <div style={{
          background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: '6px',
          marginBottom: '12px',
          fontSize: '14px',
          fontWeight: '500',
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          textShadow: '0 1px 2px rgba(0, 0, 0, 0.5)'
        }}>
          <span>‚ö†Ô∏è</span>
          <span>–ü–æ–∫–∞–∑–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.</span>
          <button 
            onClick={loadAppointments}
            style={{
              background: 'rgba(255, 255, 255, 0.2)',
              border: 'none',
              color: 'white',
              padding: '4px 8px',
              borderRadius: '4px',
              fontSize: '12px',
              cursor: 'pointer',
              marginLeft: 'auto'
            }}
          >
            üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      );
    }
    
    if (dataSource === 'api') {
      return (
        <div style={{
          background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: '6px',
          marginBottom: '12px',
          fontSize: '14px',
          fontWeight: '500',
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          textShadow: '0 1px 2px rgba(0, 0, 0, 0.5)'
        }}>
          <span>‚úÖ</span>
          <span>–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞</span>
          <span style={{ marginLeft: 'auto', fontSize: '12px', opacity: 0.9 }}>
            {count} –∏–∑ {paginationInfo.total} –∑–∞–ø–∏—Å–µ–π
          </span>
        </div>
      );
    }
    
    if (dataSource === 'loading') {
      return (
        <div style={{
          background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
          color: 'white',
          padding: '8px 12px',
          borderRadius: '6px',
          marginBottom: '12px',
          fontSize: '14px',
          fontWeight: '500',
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          textShadow: '0 1px 2px rgba(0, 0, 0, 0.5)'
        }}>
          <span>üîÑ</span>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
        </div>
      );
    }
    
    return null;
  });
  
  DataSourceIndicator.displayName = 'DataSourceIndicator';

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV
  const generateCSV = (data) => {
    const headers = ['‚Ññ', '–§–ò–û', '–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—Å–ª—É–≥–∏', '–¢–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è', '–í–∏–¥ –æ–ø–ª–∞—Ç—ã', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–°—Ç–∞—Ç—É—Å'];
    const rows = data.map((row, index) => [
      index + 1,
      row.patient_fio || '',
      row.patient_birth_year || '',
      row.patient_phone || '',
      Array.isArray(row.services) ? row.services.join('; ') : row.services || '',
      row.visit_type || '',
      row.payment_type || '',
      row.cost || '',
      row.status || ''
    ]);
    
    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n');
    
    return csvContent;
  };
  
  // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
  const downloadCSV = (content, filename) => {
    const blob = new Blob(['\ufeff' + content], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const stats = useMemo(() => {
    const todayStr = new Date().toISOString().split('T')[0];
    return {
    totalPatients: appointments.length,
      todayAppointments: appointments.filter(a => a.date === todayStr).length,
    pendingPayments: appointments.filter(a => a.status === 'paid_pending').length,
    activeQueues: appointments.filter(a => a.status === 'queued').length
  };
  }, [appointments]);

  // –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞ (–¥–ª—è 3 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π)
  const simpleDoctorMode = true;
  const getDoctorBySpecialty = useCallback((spec) => {
    const found = doctors.find(d => d.specialty === spec) || null;
    return found;
  }, [doctors]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
  const handleContextMenuAction = useCallback(async (action, row) => {
    switch (action) {
      case 'view':
        setSelectedAppointment(row);
        setShowAppointmentFlow(true);
        break;
      case 'edit':
        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:', row);
        break;
      case 'in_cabinet':
        await updateAppointmentStatus(row.id, 'in_cabinet');
        toast.success('–ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–±–∏–Ω–µ—Ç');
        break;
      case 'call':
        await handleStartVisit(row);
        break;
      case 'complete':
        await updateAppointmentStatus(row.id, 'done');
        toast.success('–ü—Ä–∏—ë–º –∑–∞–≤–µ—Ä—à—ë–Ω');
        break;
      case 'payment':
        setPaymentDialog({ open: true, row, paid: false, source: 'context' });
        break;
      case 'print':
        setPrintDialog({ open: true, type: 'ticket', data: row });
        break;
      case 'reschedule':
        setSelectedAppointment(row);
        setShowSlotsModal(true);
        break;
      case 'cancel':
        setCancelDialog({ open: true, row, reason: '' });
        break;
      case 'call_patient':
        if (row.patient_phone) {
          window.open(`tel:${row.patient_phone}`);
        }
        break;
      default:
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
        break;
    }
  }, [updateAppointmentStatus, handleStartVisit]);

  return (
    <div style={{ ...pageStyle, overflow: 'hidden' }} role="main" aria-label="–ü–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞">
      <ToastContainer position="bottom-right" />
      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —É–±—Ä–∞–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–¥–µ—Ä */}

      {/* Skip to content link for screen readers */}
      <a 
        href="#main-content" 
        style={{
          position: 'absolute',
          left: '-9999px',
          top: '0',
          zIndex: 9999,
          padding: '8px 16px',
          background: 'var(--color-primary-600)',
          color: 'white',
          textDecoration: 'none',
          borderRadius: '0 0 4px 4px'
        }}
        onFocus={(e) => {
          e.target.style.left = '0';
        }}
        onBlur={(e) => {
          e.target.style.left = '-9999px';
        }}
      >
        –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      </a>

      {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
      {(!searchParams.get('view') || (searchParams.get('view') !== 'welcome' && searchParams.get('view') !== 'queue')) && (
        <div style={{
          margin: `0 ${'1rem'}`,
          maxWidth: 'none',
          width: 'calc(100vw - 32px)'
        }}>
          <ModernTabs
            activeTab={activeTab}
            onTabChange={setActiveTab}
            departmentStats={departmentStats}
            theme={theme}
            language={language}
          />
      </div>
      )}

      {/* –°—Ç–∞—Ä—ã–µ –≤–∫–ª–∞–¥–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ModernTabs –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞ —Å–≤–µ—Ä—Ö—É */}
      <div style={{ overflow: 'hidden' }}>
        {/* –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É view=welcome (—Å –∏—Å—Ç–æ—Ä–∏–µ–π: –∫–∞–ª–µ–Ω–¥–∞—Ä—å + –ø–æ–∏—Å–∫) */}
        {searchParams.get('view') === 'welcome' && (
          <AnimatedTransition type="fade" delay={100}>
            <Card variant="default" style={{ 
              margin: `0 ${'1rem'} ${'2rem'} ${'1rem'}`,
              maxWidth: 'none',
              width: 'calc(100vw - 32px)'
            }}>
              <Card.Header>
                <AnimatedTransition type="slide" direction="up" delay={200}>
                  <h1 style={{ 
                    margin: 0, 
                    fontSize: '48px', 
                    fontWeight: '400', 
                    lineHeight: '1.25',
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '12px' 
                  }}>
                    {t('welcome')} –≤ –ø–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!
                    <span style={{ fontSize: '32px' }}>üëã</span>
                  </h1>
                </AnimatedTransition>
                <AnimatedTransition type="fade" delay={400}>
                  <div style={{ fontSize: '18px', opacity: 0.9, lineHeight: '1.5' }}>
                    {new Date().toLocaleDateString(language === 'ru' ? 'ru-RU' : 'uz-UZ', { 
                      weekday: 'long', 
                      year: 'numeric', 
                      month: 'long', 
                      day: 'numeric' 
                    })}
        </div>
                </AnimatedTransition>
              </Card.Header>
            
            <Card.Content>
              {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <ModernStatistics
                appointments={appointments}
                departmentStats={departmentStats}
                language={language}
                onExport={() => {
                  console.log('–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
                }}
                onRefresh={() => {
                  loadAppointments();
                }}
              />

              {/* –û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å */}
              <AnimatedTransition type="fade" delay={800}>
                <div style={{ marginBottom: '32px' }}>
                  <h2 style={{ fontSize: '24px', marginBottom: '20px', color: accentColor }}>
                    üì± –û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å
                  </h2>
                  <ModernQueueManager
                    selectedDate={selectedDate}
                    selectedDoctor={selectedDoctor?.id?.toString() || ''}
                    searchQuery={''}
                    onQueueUpdate={loadIntegratedData}
                    language={language}
                    theme={theme}
                    doctors={doctors}
                  />
                </div>
              </AnimatedTransition>

              {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
              <AnimatedTransition type="fade" delay={1000}>
                <div style={{ marginBottom: '32px' }}>
                  <AnimatedTransition type="slide" direction="up" delay={1100}>
                    <h2 style={{ fontSize: '24px', marginBottom: '20px', color: accentColor }}>
                      üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    </h2>
                  </AnimatedTransition>
                  
                  {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                  <AnimatedTransition type="fade" delay={1200}>
                    <div style={{ 
                      display: 'grid', 
                      gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
                      gap: '16px',
                      alignItems: 'stretch',
                      marginBottom: '24px'
                    }}>
                  <AnimatedTransition type="scale" delay={1300}>
                    <button 
                          type="button"
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å" –Ω–∞–∂–∞—Ç–∞');
                            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
                            setSelectedPatientId(null);
                            setPatientSuggestions([]);
                            setShowPatientSuggestions(false);
                            setShowWizard(true);
                          }}
                          aria-label="Create new appointment"
                      style={{
                            padding: '12px 16px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '600',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                            color: 'white',
                            border: 'none',
                            boxShadow: '0 4px 14px 0 rgba(59, 130, 246, 0.3)',
                            transition: 'all 0.2s ease'
                      }}
                    >
                      ‚ûï {t('new_appointment')}
                    </button>
                  </AnimatedTransition>

                  {/* –ö–Ω–æ–ø–∫–∞ –º–æ–¥—É–ª—è –æ–ø–ª–∞—Ç—ã */}
                  <AnimatedTransition type="scale" delay={1350}>
                    <button 
                      type="button"
                      onClick={() => setShowPaymentManager(true)}
                      aria-label="Open payment module"
                      style={{
                        padding: '12px 16px', 
                        backgroundColor: '#8b5cf6', 
                        color: 'white', 
                        border: 'none', 
                        borderRadius: '8px', 
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: '500',
                        transition: 'all 0.2s ease',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}
                    >
                      üí≥ –ú–æ–¥—É–ª—å –æ–ø–ª–∞—Ç—ã
                    </button>
                  </AnimatedTransition>
                      
                  <AnimatedTransition type="scale" delay={1400}>
                    <button 
                          type="button"
                      style={{
                            padding: '12px 16px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '600',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'white',
                            color: '#374151',
                            border: '1px solid #d1d5db',
                            boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–≠–∫—Å–ø–æ—Ä—Ç CSV" –Ω–∞–∂–∞—Ç–∞');
                            const csvContent = generateCSV(appointments);
                            const filename = `appointments_${new Date().toISOString().split('T')[0]}.csv`;
                            downloadCSV(csvContent, filename);
                            toast.success(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${appointments.length} –∑–∞–ø–∏—Å–µ–π`);
                      }}
                    >
                      üìä {t('export_csv')}
                    </button>
                  </AnimatedTransition>
                    </div>
                  </AnimatedTransition>

                  {/* –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
                  <AnimatedTransition type="fade" delay={1500}>
                    <div style={{
                      background: theme === 'light' ? '#f8f9fa' : '#374151',
                      borderRadius: '12px',
                      padding: '20px',
                      border: `1px solid ${theme === 'light' ? '#e9ecef' : '#4b5563'}`
                    }}>
                      <h3 style={{ 
                        fontSize: '18px', 
                        marginBottom: '16px', 
                        color: textColor,
                        fontWeight: '600'
                      }}>
                        üîç –§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                      </h3>
                      
                      <div style={{ 
                        display: 'grid', 
                        gridTemplateColumns: 'repeat(auto-fit, minmax(180px, 1fr))', 
                        gap: '12px',
                        alignItems: 'stretch'
                      }}>
                    <button 
                          type="button"
                      style={{
                            padding: '10px 14px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '500',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
                            color: 'white',
                            border: 'none',
                            boxShadow: '0 2px 4px 0 rgba(245, 158, 11, 0.3)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" –Ω–∞–∂–∞—Ç–∞');
                            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
                            const today = new Date().toISOString().split('T')[0];
                            window.location.href = `/registrar-panel?date=${today}`;
                          }}
                        >
                          üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                        </button>
                        
                        <button 
                          type="button"
                          style={{ 
                            padding: '10px 14px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '500',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                            color: 'white',
                            border: 'none',
                            boxShadow: '0 2px 4px 0 rgba(16, 185, 129, 0.3)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å" –Ω–∞–∂–∞—Ç–∞');
                            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∞–±–ª–∏—Ü–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É "–í –æ—á–µ—Ä–µ–¥–∏"
                            window.location.href = `/registrar-panel?status=queued`;
                          }}
                        >
                          üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
                    </button>
                        
                    <button 
                          type="button"
                      style={{
                            padding: '10px 14px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '500',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)',
                            color: 'white',
                            border: 'none',
                            boxShadow: '0 2px 4px 0 rgba(59, 130, 246, 0.3)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã" –Ω–∞–∂–∞—Ç–∞');
                            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∞–±–ª–∏—Ü–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
                            window.location.href = `/registrar-panel?status=paid_pending`;
                          }}
                        >
                          üí∞ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã
                        </button>
                        
                        <button 
                          type="button"
                          style={{ 
                            padding: '10px 14px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '500',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'white',
                            color: '#374151',
                            border: '1px solid #d1d5db',
                            boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∑–∞–ø–∏—Å–∏" –Ω–∞–∂–∞—Ç–∞');
                            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                            window.location.href = `/registrar-panel`;
                          }}
                        >
                          üìã –í—Å–µ –∑–∞–ø–∏—Å–∏
                    </button>
                        
                        <button 
                          type="button"
                          style={{ 
                            padding: '10px 14px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '500',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'white',
                            color: '#374151',
                            border: '1px solid #d1d5db',
                            boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å" –Ω–∞–∂–∞—Ç–∞');
                            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –æ–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥–∏
                            window.location.href = `/registrar-panel?view=queue`;
                          }}
                        >
                          üåê –û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å
                        </button>
                        
                        <button 
                          type="button"
                          style={{ 
                            padding: '10px 14px', 
                            borderRadius: 8, 
                            fontSize: 14, 
                            fontWeight: '500',
                            cursor: 'pointer',
                            pointerEvents: 'auto',
                            background: 'white',
                            color: '#374151',
                            border: '1px solid #d1d5db',
                            boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
                            transition: 'all 0.2s ease'
                          }}
                          onClick={(e) => {
                            console.log('–ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –Ω–∞–∂–∞—Ç–∞');
                            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            loadAppointments();
                            toast.success('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                          }}
                        >
                          üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </button>
                      </div>
                    </div>
                  </AnimatedTransition>
                </div>
              </AnimatedTransition>

              {/* –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏ */}
                <div>
                  <h3 style={{ fontSize: '20px', marginBottom: '16px', color: accentColor }}>
                    üìã –ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                  </h3>
                  <div style={{ 
                    background: cardBg,
                    border: `1px solid ${borderColor}`,
                    borderRadius: '8px',
                    padding: '16px'
                  }}>
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö */}
          {appointments.length > 0 && <DataSourceIndicator count={appointments.length} />}

            {/* ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ */}
            {(() => {
              console.log('üéØ Empty state render check:', {
                appointmentsLoading,
                dataSource,
                filteredLength: filteredAppointments.length,
                appointmentsLength: appointments.length,
                shouldShow: !appointmentsLoading && dataSource === 'api' && filteredAppointments.length === 0
              });
              return !appointmentsLoading && dataSource === 'api' && filteredAppointments.length === 0;
            })() && (
              <div style={{
                padding: '60px 20px',
                textAlign: 'center',
                background: colors.cardBg,
                borderRadius: '12px',
                border: `1px solid ${colors.border}`
              }}>
                <div style={{
                  fontSize: '48px',
                  marginBottom: '16px',
                  opacity: 0.3
                }}>
                  üìã
                </div>
                <h3 style={{
                  fontSize: '20px',
                  fontWeight: '600',
                  color: colors.textPrimary,
                  marginBottom: '8px'
                }}>
                  –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
                </h3>
                <p style={{
                  fontSize: '14px',
                  color: colors.textSecondary,
                  marginBottom: '24px'
                }}>
                  {activeTab 
                    ? `–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ ${activeTab === 'cardio' ? '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è' : activeTab === 'derma' ? '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è' : activeTab === 'dental' ? '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è' : activeTab === 'lab' ? '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è' : activeTab}`
                    : '–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'}
                </p>
                <Button
                  variant="primary"
                  onClick={() => setShowWizard(true)}
                  style={{
                    padding: '12px 24px',
                    fontSize: '14px'
                  }}
                >
                  ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                </Button>
              </div>
            )}

            {/* –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ */}
            {(appointmentsLoading || filteredAppointments.length > 0) && (
            <EnhancedAppointmentsTable
              data={filteredAppointments}
              loading={appointmentsLoading}
              theme={theme}
              language={language}
              selectedRows={appointmentsSelected}
              outerBorder={true}
              services={services}
              showCheckboxes={false}  // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
              onRowSelect={(id, checked) => {
                const newSelected = new Set(appointmentsSelected);
                if (checked) {
                  newSelected.add(id);
                } else {
                  newSelected.delete(id);
                }
                setAppointmentsSelected(newSelected);
              }}
              onRowClick={(row) => {
                console.log('–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:', row);
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø–∏—Å–∏
              }}
              onActionClick={(action, row, event) => {
                switch (action) {
                  case 'view':
                    console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏:', row);
                    // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø–∏—Å–∏
                    setSelectedAppointment(row);
                    setShowAppointmentFlow(true);
                    break;
                  case 'edit':
                    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:', row);
                    // –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
                    toast('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', { 
                      icon: '‚ÑπÔ∏è',
                      style: {
                        background: '#3b82f6',
                        color: 'white'
                      }
                    });
                    break;
                  case 'payment':
                    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ (welcome):', row);
                    setPaymentDialog({ open: true, row, paid: false, source: 'welcome' });
                    break;
                  case 'in_cabinet':
                    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç (welcome):', row);
                    updateAppointmentStatus(row.id, 'in_cabinet');
                    break;
                  case 'call':
                    console.log('–í—ã–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (welcome):', row);
                    handleStartVisit(row);
                    break;
                  case 'complete':
                    console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞ (welcome):', row);
                    updateAppointmentStatus(row.id, 'done');
                    break;
                  case 'print':
                    console.log('–ü–µ—á–∞—Ç—å —Ç–∞–ª–æ–Ω–∞ (welcome):', row);
                    setPrintDialog({ open: true, type: 'ticket', data: row });
                    break;
                  case 'more': {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    const rect = event?.target?.getBoundingClientRect();
                    setContextMenu({
                      open: true,
                      row,
                      position: {
                        x: rect?.right || event?.clientX || 0,
                        y: rect?.top || event?.clientY || 0
                      }
                    });
                    break;
                  }
                  default:
                    break;
                }
              }}
            />
            )}
                  </div>
                </div>
            </Card.Content>
          </Card>
          </AnimatedTransition>
        )}

        {/* –û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É view=queue */}
        {searchParams.get('view') === 'queue' && (
          <AnimatedTransition type="fade" delay={100}>
            <Card variant="default" style={{ margin: `0 ${'2rem'} ${'2rem'} ${'2rem'}` }}>
              <Card.Header>
                <AnimatedTransition type="slide" direction="up" delay={200}>
                  <h1 style={{ 
                    margin: 0, 
                    fontSize: '48px', 
                    fontWeight: '400', 
                    lineHeight: '1.25',
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: '12px' 
                  }}>
                    üì± –û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å
                  </h1>
                </AnimatedTransition>
                <AnimatedTransition type="fade" delay={400}>
                  <div style={{ fontSize: '18px', opacity: 0.9, lineHeight: '1.5' }}>
                    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å—é –∏ QR –∫–æ–¥–∞–º–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
                  </div>
                </AnimatedTransition>
              </Card.Header>
            
              <Card.Content>
              <ModernQueueManager 
                selectedDate={searchParams.get('date') || new Date().toISOString().split('T')[0]}
                selectedDoctor={searchParams.get('doctor') || selectedDoctor?.id?.toString() || ''}
                searchQuery={searchParams.get('q') || ''}
                onQueueUpdate={loadAppointments}
                language={language}
                theme={theme}
                doctors={doctors}
              />
              </Card.Content>
            </Card>
          </AnimatedTransition>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∑–∞–ø–∏—Å—è–º–∏ */}
        {(!searchParams.get('view') || (searchParams.get('view') !== 'welcome' && searchParams.get('view') !== 'queue')) && (
          <div 
            id="main-content"
            role="tabpanel"
            aria-labelledby={activeTab ? `${activeTab}-tab` : undefined}
            style={{
            ...tableContainerStyle, 
              // –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π —Å—Ç—ã–∫–æ–≤–∫–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
              margin: `0 ${isMobile ? '1rem' : '1rem'} ${'2rem'} ${isMobile ? '1rem' : '1rem'}`,
            borderRadius: isMobile ? '0 0 12px 12px' : '0 0 20px 20px',
              maxWidth: 'none',
              width: 'calc(100vw - 32px)'
          }}>
            <div style={{
              ...tableContentStyle,
              padding: isMobile ? '0.5rem' : '1rem'
            }}>
              
              {/* –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              {appointmentsSelected.size > 0 && (
              <div style={{
                display: 'flex',
                  gap: isMobile ? '0.25rem' : '12px', 
                alignItems: 'center',
                  padding: isMobile ? '0.5rem' : '16px',
                  background: theme === 'light' ? '#f8f9fa' : '#374151',
                  borderRadius: isMobile ? '6px' : '8px',
                  flexWrap: isMobile ? 'wrap' : 'nowrap'
                }}>
                  <span style={{ fontWeight: 600, marginRight: '12px' }}>
                    üéØ {t('bulk_actions')} ({appointmentsSelected.size}):
                  </span>
                  <button
                    className="clinic-button clinic-button-success interactive-element hover-lift ripple-effect action-button-hover focus-ring"
                    style={{
                      padding: '8px 12px', 
                      borderRadius: 8, 
                      fontSize: 14,
                      cursor: 'pointer',
                      pointerEvents: 'auto'
                    }}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      console.log('–ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ onMouseDown');
                      handleBulkAction('confirmed');
                    }}
                  >
                    ‚úÖ {!isMobile && t('confirm')}
                  </button>
                  <button
                    className="clinic-button clinic-button-outline interactive-element hover-lift ripple-effect magnetic-hover focus-ring"
                    style={{
                      padding: '8px 12px', 
                      borderRadius: 8, 
                      fontSize: 14,
                      cursor: 'pointer',
                      pointerEvents: 'auto'
                    }}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      console.log('–ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ onMouseDown');
                      const reason = prompt(t('reason'));
                      if (reason) handleBulkAction('cancelled', reason);
                    }}
                  >
                    ‚ùå {!isMobile && t('cancel')}
                  </button>
                  <button
                    className="clinic-button clinic-button-outline interactive-element hover-lift ripple-effect magnetic-hover focus-ring"
                    style={{
                      padding: '8px 12px', 
                      borderRadius: 8, 
                      fontSize: 14,
                      cursor: 'pointer',
                      pointerEvents: 'auto'
                    }}
                    onMouseDown={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      console.log('–ö–Ω–æ–ø–∫–∞ "–ù–µ—è–≤–∫–∞" –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ onMouseDown');
                      handleBulkAction('no_show');
                    }}
                  >
                    ‚ö†Ô∏è {!isMobile && t('no_show')}
                  </button>
        </div>
              )}
              
              {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π */}
              {appointmentsLoading ? (
                <AnimatedLoader.TableSkeleton rows={8} columns={10} />
              ) : filteredAppointments.length === 0 && dataSource === 'api' ? (
                <div style={{
                  padding: '60px 20px',
                  textAlign: 'center',
                  background: cardBg,
                  borderRadius: '12px',
                  border: `1px solid ${borderColor}`
                }}>
                  <div style={{
                    fontSize: '48px',
                    marginBottom: '16px',
                    opacity: 0.3
                  }}>
                    üìã
                  </div>
                  <h3 style={{
                    fontSize: '20px',
                    fontWeight: '600',
                    color: textColor,
                    marginBottom: '8px'
                  }}>
                    –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
                  </h3>
                  <p style={{
                    fontSize: '14px',
                    color: textColor,
                    opacity: 0.7,
                    marginBottom: '24px'
                  }}>
                    {activeTab 
                      ? `–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ ${activeTab === 'cardio' ? '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è' : activeTab === 'derma' ? '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è' : activeTab === 'dental' ? '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è' : activeTab === 'lab' ? '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è' : activeTab}`
                      : '–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π'}
                  </p>
                  <Button
                    variant="primary"
                    onClick={() => setShowWizard(true)}
                    style={{
                      padding: '12px 24px',
                      fontSize: '14px'
                    }}
                  >
                    ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
                  </Button>
                </div>
              ) : filteredAppointments.length === 0 ? (
                <div style={{ padding: 24, textAlign: 'center', opacity: 0.7 }}>
                  {t('empty_table')}
                </div>
              ) : (
                <EnhancedAppointmentsTable
                  data={filteredAppointments}
                  loading={appointmentsLoading}
                  theme={theme}
                  language={language}
                  selectedRows={appointmentsSelected}
                  outerBorder={false}
                  services={services}
                  showCheckboxes={false}  // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã
                  onRowSelect={(id, checked) => {
                    const newSelected = new Set(appointmentsSelected);
                    if (checked) {
                      newSelected.add(id);
                    } else {
                      newSelected.delete(id);
                    }
                    setAppointmentsSelected(newSelected);
                  }}
                  onRowClick={(row) => {
                    console.log('–û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:', row);
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø–∏—Å–∏
                  }}
                  onActionClick={(action, row, event) => {
                    switch (action) {
                      case 'view':
                        console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏:', row);
                        // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–ø–∏—Å–∏
                        setSelectedAppointment(row);
                        setShowAppointmentFlow(true);
                        break;
                      case 'edit':
                        console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:', row);
                        // –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
                        toast('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', { 
                          icon: '‚ÑπÔ∏è',
                          style: {
                            background: '#3b82f6',
                            color: 'white'
                          }
                        });
                        break;
                      case 'payment':
                        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:', row);
                        setPaymentDialog({ open: true, row, paid: false, source: 'table' });
                        break;
                      case 'in_cabinet':
                        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç:', row);
                        updateAppointmentStatus(row.id, 'in_cabinet');
                        break;
                      case 'call':
                        console.log('–í—ã–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞:', row);
                        handleStartVisit(row);
                        break;
                      case 'complete':
                        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞:', row);
                        updateAppointmentStatus(row.id, 'done');
                        break;
                      case 'print':
                        console.log('–ü–µ—á–∞—Ç—å —Ç–∞–ª–æ–Ω–∞:', row);
                        setPrintDialog({ open: true, type: 'ticket', data: row });
                        break;
                      case 'more': {
                        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                        const rect = event?.target?.getBoundingClientRect();
                        setContextMenu({
                          open: true,
                          row,
                          position: {
                            x: rect?.right || event?.clientX || 0,
                            y: rect?.top || event?.clientY || 0
                          }
                        });
                        break;
                      }
                      default:
                        break;
                    }
                  }}
                />
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π */}
              {paginationInfo.hasMore && (
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'center', 
                  padding: '16px',
                  borderTop: `1px solid ${theme === 'light' ? '#e5e7eb' : '#374151'}`
                }}>
                  <button
                    onClick={loadMoreAppointments}
                    disabled={paginationInfo.loadingMore}
                    style={{
                      padding: '12px 24px',
                      borderRadius: '8px',
                      border: 'none',
                      background: paginationInfo.loadingMore 
                        ? '#9ca3af' 
                        : 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                      color: 'white',
                      fontSize: '14px',
                      fontWeight: '500',
                      cursor: paginationInfo.loadingMore ? 'not-allowed' : 'pointer',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                      transition: 'all 0.2s ease',
                      boxShadow: '0 2px 4px rgba(59, 130, 246, 0.3)'
                    }}
                  >
                    {paginationInfo.loadingMore ? (
                      <>
                        <div style={{
                          width: '16px',
                          height: '16px',
                          border: '2px solid rgba(255,255,255,0.3)',
                          borderTop: '2px solid white',
                          borderRadius: '50%',
                          animation: 'spin 1s linear infinite'
                        }} />
                        –ó–∞–≥—Ä—É–∑–∫–∞...
                      </>
                    ) : (
                      <>
                        üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ
                      </>
                    )}
                  </button>
                </div>
              )}
              
              {/* –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏ legacy-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EnhancedAppointmentsTable */}
      </div>
          </div>
        )}
      </div> {/* –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}

      {/* –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}
      
      {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ */}
      <CancelDialog
        isOpen={cancelDialog.open}
        onClose={() => setCancelDialog({ open: false, row: null, reason: '' })}
        appointment={cancelDialog.row}
        onCancel={async (appointmentId, reason) => {
          // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
          setAppointments(prev => prev.map(apt => 
            apt.id === appointmentId ? {
              ...apt,
              status: 'canceled',
              _locallyModified: true,
              _cancelReason: reason
            } : apt
          ));
        }}
      />

      <PaymentDialog
        isOpen={paymentDialog.open}
        onClose={() => setPaymentDialog({ open: false, row: null, paid: false, source: null })}
        appointment={paymentDialog.row}
        onPaymentSuccess={async (paymentData) => {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ handlePayment
          const appointment = paymentDialog.row;
          if (appointment) {
            const updated = await handlePayment(appointment);
            if (updated) {
              // –°—Ç–∞—Ç—É—Å —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ handlePayment (status: 'queued')
              console.log('PaymentDialog: –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞, —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', updated);
            }
          }
        }}
        onPrintTicket={(appointment) => {
          setPrintDialog({ 
            open: true, 
            type: 'ticket', 
            data: appointment 
          });
        }}
      />

      <PrintDialog
        isOpen={printDialog.open}
        onClose={() => setPrintDialog({ open: false, type: '', data: null })}
        documentType={printDialog.type}
        documentData={printDialog.data}
        onPrint={async (printerName, docType, docData) => {
          console.log('Printing:', { printerName, docType, docData });
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–µ—á–∞—Ç–∏
        }}
      />

      {/* ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä (V2) */}
      <AppointmentWizardV2
            isOpen={showWizard}
            onClose={() => {
              console.log('AppointmentWizardV2 closing');
              setShowWizard(false);
            }}
            isProcessing={isProcessing}
            setIsProcessing={setIsProcessing}
            onComplete={async (wizardData) => {
              console.log('AppointmentWizardV2 completed successfully:', wizardData);
              
              // –ù–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —É–∂–µ —Å–æ–∑–¥–∞–ª –∫–æ—Ä–∑–∏–Ω—É, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
              try {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await Promise.all([
                  loadAppointments(),
                  loadIntegratedData()
                ]);
                
                setShowWizard(false);
                toast.success('–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
              } catch (error) {
                console.error('Error refreshing data after wizard completion:', error);
                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
                setShowWizard(false);
                toast.success('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
              }
            }}
          />

      {/* –°—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã CancelDialog, PaymentDialog, PrintDialog */}
      {/* –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã —É–¥–∞–ª–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PaymentDialog –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
      {/* –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Ä —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AppointmentWizard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–ª–æ—Ç–æ–≤ */}
      {showSlotsModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }} role="dialog" aria-modal="true">
          <div style={{
            background: cardBg,
            padding: '24px',
            borderRadius: '12px',
            maxWidth: '500px',
            width: '90%'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h3 style={{ margin: 0 }}>üìÖ {t('available_slots')}</h3>
              <button onClick={() => setShowSlotsModal(false)} style={{ background: 'none', border: 'none', fontSize: '24px', cursor: 'pointer' }}>√ó</button>
            </div>
            <div style={{ display: 'grid', gap: '8px' }}>
              <button style={buttonStyle} onClick={() => {
                setShowSlotsModal(false);
              }}>
                üåÖ {t('tomorrow')}
              </button>
              <button style={buttonSecondaryStyle} onClick={() => {
                setShowSlotsModal(false);
              }}>
                üìÖ {t('select_date')}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ QR */}
      {showQRModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }} role="dialog" aria-modal="true">
          <div style={{
            background: cardBg,
            padding: '24px',
            borderRadius: '12px',
            maxWidth: '400px',
            width: '90%',
            textAlign: 'center'
          }}>
            <h3 style={{ margin: '0 0 16px 0' }}>üì± QR-–∫–æ–¥ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞</h3>
            <div style={{ 
              background: 'white', 
              padding: '20px', 
              borderRadius: '8px', 
              margin: '16px 0',
              display: 'inline-block'
            }}>
              {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç QR-–∫–æ–¥ */}
            <div style={{ 
              width: '200px', 
              height: '200px', 
              background: '#f0f0f0', 
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
                fontSize: '14px',
                color: '#666'
            }}>
                QR-–∫–æ–¥
            </div>
            </div>
            <button 
              onClick={() => setShowQRModal(false)}
              style={{
                padding: '8px 16px',
                background: accentColor,
                color: 'white',
                border: 'none',
                borderRadius: '8px',
                cursor: 'pointer'
              }}
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */}
      {contextMenu.open && (
        <AppointmentContextMenu
          row={contextMenu.row}
          position={contextMenu.position}
          theme={theme}
          onClose={() => setContextMenu({ open: false, row: null, position: { x: 0, y: 0 } })}
          onAction={handleContextMenuAction}
        />
      )}

      {/* –ú–æ–¥—É–ª—å –æ–ø–ª–∞—Ç—ã */}
      <PaymentManager
        isOpen={showPaymentManager}
        onClose={(result) => {
          setShowPaymentManager(false);
          if (result?.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            loadAppointments();
            loadIntegratedData();
          }
        }}
      />
    </div>
  );
};

export default RegistrarPanel; 
