/**
 * PaymentTest - –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PaymentWidget
 */

import React, { useState } from 'react';
import {
  Container,
  Card,
  CardContent,
  Typography,
  Button,
  Box,
  Grid,
  Alert,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material';
import {
  Payment as PaymentIcon,
  Science as TestIcon
} from '@mui/icons-material';

import PaymentWidget from '../components/payment/PaymentWidget';
import { setToken, getToken } from '../api/client';

const PaymentTest = () => {
  const [showWidget, setShowWidget] = useState(false);
  const [testData, setTestData] = useState({
    visitId: 1,
    amount: 150000,
    currency: 'UZS',
    description: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—Å–ª—É–≥'
  });
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  React.useEffect(() => {
    const token = getToken();
    setIsAuthenticated(!!token);
  }, []);

  // –¢–µ—Å—Ç–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API
  const handleTestAuth = async () => {
    try {
      setResult({ type: 'info', message: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...' });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend...');
      
      // –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (JSON —Ñ–æ—Ä–º–∞—Ç)
      const loginData = {
        username: 'registrar',
        password: 'registrar123',
        remember_me: false
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
        url: 'http://localhost:8000/api/v1/authentication/login',
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(loginData)
      });

      const response = await fetch('http://localhost:8000/api/v1/authentication/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(loginData)
      });

      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries())
      });

      if (response.ok) {
        const data = await response.json();
        const token = data.access_token;
        
        if (token) {
          setToken(token);
          setIsAuthenticated(true);
          setResult({
            type: 'success',
            message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
          });
        } else {
          throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        }
      } else {
        let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        try {
          const errorData = await response.json();
          if (errorData.detail) {
            errorMessage = typeof errorData.detail === 'string' ? errorData.detail : JSON.stringify(errorData.detail);
          } else if (errorData.message) {
            errorMessage = errorData.message;
          }
        } catch (parseError) {
          errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        }
        throw new Error(errorMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      if (error.message && error.message !== '[object Object]') {
        errorMessage = error.message;
      } else if (error.toString && error.toString() !== '[object Object]') {
        errorMessage = error.toString();
      }
      
      // Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI
      const testToken = 'demo_token_for_ui_testing';
      setToken(testToken);
      setIsAuthenticated(true);
      setResult({
        type: 'warning',
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: ${errorMessage}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–µ–º–æ-—Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`
      });
    }
  };

  const handlePaymentSuccess = (paymentData) => {
    console.log('Payment Success:', paymentData);
    setResult({
      type: 'success',
      data: paymentData,
      message: '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!'
    });
    setShowWidget(false);
  };

  const handlePaymentError = (errorMessage) => {
    console.error('Payment Error:', errorMessage);
    setError(errorMessage);
    setResult({
      type: 'error',
      message: errorMessage
    });
  };

  const handlePaymentCancel = () => {
    console.log('Payment Cancelled');
    setShowWidget(false);
    setResult({
      type: 'info',
      message: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
    });
  };

  const startTest = () => {
    setResult(null);
    setError(null);
    setShowWidget(true);
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box textAlign="center" mb={4}>
        <Typography variant="h3" gutterBottom sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
          <TestIcon sx={{ mr: 2, fontSize: 40 }} />
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentWidget
        </Typography>
        <Typography variant="body1" color="textSecondary">
          –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–µ–π
        </Typography>
      </Box>

      <Grid container spacing={4}>
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
              </Typography>
              
              <Box sx={{ mt: 2 }}>
                <TextField
                  fullWidth
                  label="ID –≤–∏–∑–∏—Ç–∞"
                  type="number"
                  value={testData.visitId}
                  onChange={(e) => setTestData({ ...testData, visitId: parseInt(e.target.value) })}
                  sx={{ mb: 2 }}
                />
                
                <TextField
                  fullWidth
                  label="–°—É–º–º–∞"
                  type="number"
                  value={testData.amount}
                  onChange={(e) => setTestData({ ...testData, amount: parseFloat(e.target.value) })}
                  sx={{ mb: 2 }}
                />
                
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>–í–∞–ª—é—Ç–∞</InputLabel>
                  <Select
                    value={testData.currency}
                    onChange={(e) => setTestData({ ...testData, currency: e.target.value })}
                    label="–í–∞–ª—é—Ç–∞"
                  >
                    <MenuItem value="UZS">UZS (–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º)</MenuItem>
                    <MenuItem value="KZT">KZT (–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ)</MenuItem>
                    <MenuItem value="USD">USD (–î–æ–ª–ª–∞—Ä –°–®–ê)</MenuItem>
                  </Select>
                </FormControl>
                
                <TextField
                  fullWidth
                  label="–û–ø–∏—Å–∞–Ω–∏–µ"
                  multiline
                  rows={2}
                  value={testData.description}
                  onChange={(e) => setTestData({ ...testData, description: e.target.value })}
                  sx={{ mb: 3 }}
                />
                
                {!isAuthenticated ? (
                  <Button
                    variant="outlined"
                    color="warning"
                    size="large"
                    fullWidth
                    onClick={handleTestAuth}
                    sx={{ mb: 2 }}
                  >
                    üîê –¢–µ—Å—Ç–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                  </Button>
                ) : (
                  <Box sx={{ mb: 2 }}>
                    <Alert severity="success" sx={{ mb: 1 }}>
                      ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    </Alert>
                    <Button
                      variant="outlined"
                      color="secondary"
                      size="small"
                      fullWidth
                      onClick={() => {
                        setToken(null);
                        setIsAuthenticated(false);
                        setResult({ type: 'info', message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞' });
                      }}
                    >
                      üö™ –í—ã–π—Ç–∏
                    </Button>
                  </Box>
                )}
                
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  fullWidth
                  onClick={startTest}
                  startIcon={<PaymentIcon />}
                  disabled={showWidget || !isAuthenticated}
                >
                  {showWidget ? '–¢–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω...' : isAuthenticated ? '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}
                </Button>
              </Box>
            </CardContent>
          </Card>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          {result && (
            <Card sx={{ mt: 2 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
                </Typography>
                
                <Alert 
                  severity={result.type === 'success' ? 'success' : result.type === 'error' ? 'error' : 'info'}
                  sx={{ mb: 2 }}
                >
                  {result.message}
                </Alert>
                
                {result.data && (
                  <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                    <Typography variant="body2" component="pre" sx={{ fontSize: '0.75rem' }}>
                      {JSON.stringify(result.data, null, 2)}
                    </Typography>
                  </Box>
                )}
              </CardContent>
            </Card>
          )}
        </Grid>

        {/* –í–∏–¥–∂–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ */}
        <Grid item xs={12} md={8}>
          {showWidget ? (
            <PaymentWidget
              visitId={testData.visitId}
              amount={testData.amount}
              currency={testData.currency}
              description={testData.description}
              onSuccess={handlePaymentSuccess}
              onError={handlePaymentError}
              onCancel={handlePaymentCancel}
            />
          ) : (
            <Card sx={{ height: '400px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <CardContent>
                <Box textAlign="center">
                  <PaymentIcon sx={{ fontSize: 80, color: 'grey.400', mb: 2 }} />
                  <Typography variant="h6" color="textSecondary">
                    –ù–∞–∂–º–∏—Ç–µ &quot;–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç&quot; –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ */}
      <Card sx={{ mt: 4 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º–µ
          </Typography>
          
          <Grid container spacing={2}>
            <Grid item xs={12} sm={6} md={3}>
              <Box textAlign="center" p={2}>
                <Typography variant="h4" color="primary">3</Typography>
                <Typography variant="body2" color="textSecondary">–ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞</Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={6} md={3}>
              <Box textAlign="center" p={2}>
                <Typography variant="h4" color="success.main">2</Typography>
                <Typography variant="body2" color="textSecondary">–í–∞–ª—é—Ç—ã</Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={6} md={3}>
              <Box textAlign="center" p={2}>
                <Typography variant="h4" color="warning.main">100%</Typography>
                <Typography variant="body2" color="textSecondary">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</Typography>
              </Box>
            </Grid>
            
            <Grid item xs={12} sm={6} md={3}>
              <Box textAlign="center" p={2}>
                <Typography variant="h4" color="info.main">‚úì</Typography>
                <Typography variant="body2" color="textSecondary">Webhook</Typography>
              </Box>
            </Grid>
          </Grid>
          
          <Alert severity="info" sx={{ mt: 2 }}>
            <Typography variant="body2">
              <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:</strong> Click (UZS), Payme (UZS), Kaspi (KZT)
              <br />
              <strong>Backend:</strong> http://localhost:8000
              <br />
              <strong>Frontend:</strong> http://localhost:5173
            </Typography>
          </Alert>
        </CardContent>
      </Card>
    </Container>
  );
};

export default PaymentTest;
