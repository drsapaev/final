/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL WebSocket
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @returns {WebSocket} WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 */
export function createAuthenticatedWebSocket(baseUrl, params = {}, options = {}) {
  const {
    requireAuth = false,
    onAuthError = null,
    onConnect = null,
    onDisconnect = null,
    onMessage = null,
    onError = null
  } = options;

  const token = localStorage.getItem('access_token');
  
  // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –Ω–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
  if (requireAuth && !token) {
    if (onAuthError) {
      onAuthError('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
    }
    throw new Error('Authentication required but no token found');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  const urlParams = new URLSearchParams(params);
  if (token) {
    urlParams.append('token', token);
  }

  const wsUrl = `${baseUrl}?${urlParams.toString()}`;
  console.log(`üîå –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: ${wsUrl}`);

  const ws = new WebSocket(wsUrl);

  ws.onopen = (event) => {
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
    if (onConnect) onConnect(event);
  };

  ws.onclose = (event) => {
    console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ WebSocket –æ—Ç–∫–ª—é—á–µ–Ω–æ', event.code, event.reason);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (event.code === 1008) { // WS_1008_POLICY_VIOLATION
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket:', event.reason);
      if (onAuthError) {
        onAuthError(event.reason || 'Authentication failed');
      }
    }
    
    if (onDisconnect) onDisconnect(event);
  };

  ws.onmessage = (event) => {
    try {
      const data = JSON.parse(event.data);
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket:', data);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      if (data.type === 'error' && data.message && data.message.includes('–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')) {
        if (onAuthError) {
          onAuthError(data.message);
        }
      }
      
      if (onMessage) onMessage(data);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  ws.onerror = (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
    if (onError) onError(error);
  };

  return ws;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç WebSocket –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * @param {string} department - –û—Ç–¥–µ–ª–µ–Ω–∏–µ
 * @param {string} date - –î–∞—Ç–∞ (YYYY-MM-DD)
 * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @returns {WebSocket} WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 */
export function createQueueWebSocket(department, date, options = {}) {
  const baseUrl = `ws://localhost:8000/api/v1/ws-auth/ws/queue/optional-auth`;
  const params = { department, date };
  
  return createAuthenticatedWebSocket(baseUrl, params, options);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç WebSocket –¥–ª—è —Ç–∞–±–ª–æ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * @param {string} boardId - ID —Ç–∞–±–ª–æ
 * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @returns {WebSocket} WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 */
export function createDisplayBoardWebSocket(boardId, options = {}) {
  const baseUrl = `ws://localhost:8000/api/v1/display/ws/board/${encodeURIComponent(boardId)}`;
  const params = {};
  
  return createAuthenticatedWebSocket(baseUrl, params, options);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
 * @param {WebSocket} ws - WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * @param {Object} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export function sendAuthenticatedMessage(ws, message) {
  if (ws.readyState === WebSocket.OPEN) {
    const messageWithAuth = {
      ...message,
      timestamp: new Date().toISOString(),
      token: localStorage.getItem('access_token') // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    };
    
    ws.send(JSON.stringify(messageWithAuth));
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageWithAuth);
  } else {
    console.warn('‚ö†Ô∏è WebSocket –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—â–∏–π—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WebSocket
 * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {Object} options - –û–ø—Ü–∏–∏
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
 */
export function createReconnectingAuthWebSocket(baseUrl, params = {}, options = {}) {
  const {
    maxReconnectAttempts = 5,
    reconnectDelay = 3000,
    ...wsOptions
  } = options;

  let ws = null;
  let reconnectTimeout = null;
  let reconnectAttempts = 0;
  let isManuallyDisconnected = false;

  const connect = () => {
    if (isManuallyDisconnected) return;

    try {
      ws = createAuthenticatedWebSocket(baseUrl, params, {
        ...wsOptions,
        onConnect: (event) => {
          console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—â–∏–π—Å—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
          reconnectAttempts = 0;
          if (wsOptions.onConnect) wsOptions.onConnect(event);
        },
        onDisconnect: (event) => {
          console.log('‚ùå –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—â–∏–π—Å—è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
          if (wsOptions.onDisconnect) wsOptions.onDisconnect(event);
          
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤—Ä—É—á–Ω—É—é
          if (!isManuallyDisconnected && reconnectAttempts < maxReconnectAttempts) {
            reconnectAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${maxReconnectAttempts}`);
            reconnectTimeout = setTimeout(connect, reconnectDelay);
          }
        },
        onAuthError: (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', error);
          isManuallyDisconnected = true; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          if (wsOptions.onAuthError) wsOptions.onAuthError(error);
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
      if (reconnectAttempts < maxReconnectAttempts) {
        reconnectAttempts++;
        reconnectTimeout = setTimeout(connect, reconnectDelay);
      }
    }
  };

  const disconnect = () => {
    isManuallyDisconnected = true;
    if (reconnectTimeout) {
      clearTimeout(reconnectTimeout);
      reconnectTimeout = null;
    }
    if (ws) {
      ws.close();
      ws = null;
    }
  };

  const send = (message) => {
    if (ws) {
      sendAuthenticatedMessage(ws, message);
    }
  };

  // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connect();

  return {
    disconnect,
    send,
    get readyState() {
      return ws ? ws.readyState : WebSocket.CLOSED;
    },
    get isConnected() {
      return ws && ws.readyState === WebSocket.OPEN;
    }
  };
}


