/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
 */

class WizardTester {
  constructor() {
    this.API_BASE = import.meta.env.VITE_API_BASE_URL || '';
    this.token = localStorage.getItem('auth_token');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  getHeaders() {
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${this.token}`
    };
  }

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Ç–µ—Ä–∞
  async testWizardSettings() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Ç–µ—Ä–∞...');
    
    try {
      const response = await fetch(`${this.API_BASE}/api/v1/registrar-wizard/admin/wizard-settings`, {
        headers: this.getHeaders()
      });
      
      const data = await response.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Ç–µ—Ä–∞:', data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return null;
    }
  }

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
  async testCartCreation(testData = null) {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã...');
    
    const defaultTestData = {
      patient: {
        full_name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç",
        phone: "+998901234567",
        date_of_birth: "1990-01-01",
        address: "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å"
      },
      visits: [
        {
          service_id: 1,
          visit_type: "regular",
          visit_date: new Date().toISOString().split('T')[0],
          visit_time: "10:00",
          notes: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
        }
      ],
      payment: {
        method: "cash",
        total_amount: 50000
      }
    };

    const data = testData || defaultTestData;

    try {
      const response = await fetch(`${this.API_BASE}/api/v1/registrar-wizard/registrar/cart`, {
        method: 'POST',
        headers: this.getHeaders(),
        body: JSON.stringify(data)
      });

      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result);
        return result;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', result);
        return null;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return null;
    }
  }

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª—å–≥–æ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async testBenefitSettings() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª—å–≥–æ—Ç...');
    
    try {
      const response = await fetch(`${this.API_BASE}/api/v1/registrar-wizard/admin/benefit-settings`, {
        headers: this.getHeaders()
      });
      
      const data = await response.json();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª—å–≥–æ—Ç:', data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª—å–≥–æ—Ç:', error);
      return null;
    }
  }

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ All Free
  async testAllFreeRequests() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ All Free...');
    
    try {
      const response = await fetch(`${this.API_BASE}/api/v1/registrar-wizard/admin/all-free-requests`, {
        headers: this.getHeaders()
      });
      
      const data = await response.json();
      console.log('‚úÖ –ó–∞—è–≤–∫–∏ All Free:', data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ All Free:', error);
      return null;
    }
  }

  // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
  async testPriceOverrides() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω...');
    
    try {
      const response = await fetch(`${this.API_BASE}/api/v1/registrar-wizard/registrar/price-overrides`, {
        headers: this.getHeaders()
      });
      
      const data = await response.json();
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:', data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω:', error);
      return null;
    }
  }

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  testAutosave() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
    
    const testData = {
      step: 2,
      patient: { full_name: "–¢–µ—Å—Ç –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" },
      services: [{ id: 1, name: "–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞" }],
      timestamp: Date.now()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.setItem('wizard_draft', JSON.stringify(testData));
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    const restored = JSON.parse(localStorage.getItem('wizard_draft'));
    
    if (JSON.stringify(restored) === JSON.stringify(testData)) {
      console.log('‚úÖ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return false;
    }
  }

  // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  validateWizardData(data) {
    console.log('üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞...');
    
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (!data.patient) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞');
    } else {
      if (!data.patient.full_name) errors.push('–ù–µ —É–∫–∞–∑–∞–Ω–æ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞');
      if (!data.patient.phone) errors.push('–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–∑–∏—Ç–æ–≤
    if (!data.visits || data.visits.length === 0) {
      errors.push('–ù–µ –≤—ã–±—Ä–∞–Ω—ã —É—Å–ª—É–≥–∏');
    } else {
      data.visits.forEach((visit, index) => {
        if (!visit.service_id) errors.push(`–í–∏–∑–∏—Ç ${index + 1}: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —É—Å–ª—É–≥–∞`);
        if (!visit.visit_date) errors.push(`–í–∏–∑–∏—Ç ${index + 1}: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞`);
        if (!visit.visit_time) errors.push(`–í–∏–∑–∏—Ç ${index + 1}: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
    if (!data.payment) {
      errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã');
    } else {
      if (!data.payment.method) errors.push('–ù–µ —É–∫–∞–∑–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã');
      if (!data.payment.total_amount || data.payment.total_amount <= 0) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã');
      }
    }

    if (errors.length === 0) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã');
      return { valid: true, errors: [] };
    } else {
      console.error('‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
      return { valid: false, errors };
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    console.log('=' .repeat(50));

    const results = {};

    // –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    results.wizardSettings = await this.testWizardSettings();
    
    // –¢–µ—Å—Ç –ª—å–≥–æ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    results.benefitSettings = await this.testBenefitSettings();
    
    // –¢–µ—Å—Ç –∑–∞—è–≤–æ–∫ All Free
    results.allFreeRequests = await this.testAllFreeRequests();
    
    // –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
    results.priceOverrides = await this.testPriceOverrides();
    
    // –¢–µ—Å—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    results.autosave = this.testAutosave();

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    console.log('‚ÑπÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ service_id)');

    console.log('=' .repeat(50));
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
    
    const passedTests = Object.values(results).filter(result => result !== null && result !== false).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
    
    return results;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  generateTestData(scenario = 'basic') {
    const scenarios = {
      basic: {
        patient: {
          full_name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
          phone: "+998901234567",
          date_of_birth: "1985-05-15",
          address: "–≥. –¢–∞—à–∫–µ–Ω—Ç, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123"
        },
        visits: [
          {
            service_id: 1,
            visit_type: "regular",
            visit_date: new Date().toISOString().split('T')[0],
            visit_time: "10:00",
            notes: "–ü–ª–∞–Ω–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä"
          }
        ],
        payment: {
          method: "cash",
          total_amount: 50000
        }
      },
      
      repeat: {
        patient: {
          full_name: "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á",
          phone: "+998901234568",
          date_of_birth: "1980-03-20"
        },
        visits: [
          {
            service_id: 2, // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞
            visit_type: "repeat",
            visit_date: new Date().toISOString().split('T')[0],
            visit_time: "11:00",
            notes: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
          }
        ],
        payment: {
          method: "cash",
          total_amount: 0 // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ
        }
      },
      
      benefit: {
        patient: {
          full_name: "–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á",
          phone: "+998901234569",
          date_of_birth: "1975-12-10"
        },
        visits: [
          {
            service_id: 2,
            visit_type: "benefit",
            visit_date: new Date().toISOString().split('T')[0],
            visit_time: "12:00",
            notes: "–õ—å–≥–æ—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
          }
        ],
        payment: {
          method: "cash",
          total_amount: 0 // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –ª—å–≥–æ—Ç–Ω–æ–≥–æ
        }
      },
      
      cart: {
        patient: {
          full_name: "–ú–Ω–æ–≥–æ—É—Å–ª—É–≥–æ–≤ –ú–Ω–æ–≥–æ –£—Å–ª—É–≥–æ–≤–∏—á",
          phone: "+998901234570",
          date_of_birth: "1990-07-25"
        },
        visits: [
          {
            service_id: 1, // –≠–ö–ì
            visit_type: "regular",
            visit_date: new Date().toISOString().split('T')[0],
            visit_time: "09:00",
            notes: "–≠–ö–ì"
          },
          {
            service_id: 3, // –≠—Ö–æ–ö–ì
            doctor_id: 1,
            visit_type: "regular",
            visit_date: new Date().toISOString().split('T')[0],
            visit_time: "10:00",
            notes: "–≠—Ö–æ–ö–ì —Å –∫–∞—Ä–¥–∏–æ–ª–æ–≥–æ–º"
          },
          {
            service_id: 4, // –ê–Ω–∞–ª–∏–∑—ã
            visit_type: "regular",
            visit_date: new Date().toISOString().split('T')[0],
            visit_time: "08:00",
            notes: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã"
          }
        ],
        payment: {
          method: "online_click",
          total_amount: 150000
        }
      }
    };

    return scenarios[scenario] || scenarios.basic;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  window.WizardTester = WizardTester;
  window.wizardTester = new WizardTester();
  
  console.log('üß™ WizardTester –∑–∞–≥—Ä—É–∂–µ–Ω!');
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: wizardTester.runAllTests() –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
  console.log('–ò–ª–∏: wizardTester.testCartCreation(wizardTester.generateTestData("cart")) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã');
}

export default WizardTester;
