#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —ç—Ç–∞–ø–∞ 2: –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤
 */

import fs from 'fs';
import path from 'path';

// –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const filesToCheck = [
  'src/theme/tokens.js',
  'src/components/admin/AdminNavigation.jsx',
  'src/components/buttons/ModernButton.jsx'
];

function checkFile(filePath) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${filePath}`);

  if (!fs.existsSync(filePath)) {
    console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');

  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  if (filePath.includes('tokens.js')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Ü–≤–µ—Ç–æ–≤
    const checks = [
      { pattern: /primary.*#0ea5e9/, desc: '–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç primary' },
      { pattern: /status.*success.*#10b981/, desc: '–¶–≤–µ—Ç —É—Å–ø–µ—Ö–∞' },
      { pattern: /medical.*cardiology.*#dc2626/, desc: '–¶–≤–µ—Ç –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏' },
      { pattern: /semantic.*background/, desc: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });
  }

  else if (filePath.includes('AdminNavigation.jsx')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    const checks = [
      { pattern: /colors\.primary\[500\]/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞' },
      { pattern: /colors\.semantic\.surface/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞' },
      { pattern: /colors\.border\.medium/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const oldColors = ['#3b82f6', '#60a5fa'];
    oldColors.forEach(color => {
      const found = content.includes(color);
      console.log(`   ${!found ? '‚úÖ' : '‚ùå'} –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ü–≤–µ—Ç ${color}`);
    });
  }

  else if (filePath.includes('ModernButton.jsx')) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–≤–µ—Ç–æ–≤
    const checks = [
      { pattern: /colors\.primary\[500\]/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã primary' },
      { pattern: /colors\.status\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–æ–≤' },
      { pattern: /colors\.semantic\./, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞' },
      { pattern: /colors\.gray\[300\]/, desc: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä—ã–µ —Ü–≤–µ—Ç–∞' }
    ];

    checks.forEach(check => {
      const found = check.pattern.test(content);
      console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.desc}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π getColor
    const found = content.includes('getColor(');
    console.log(`   ${!found ? '‚úÖ' : '‚ùå'} –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ getColor`);
  }

  return true;
}

function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–¢–ê–ü–ê 2: –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–Ø –¶–í–ï–¢–û–í–û–ô –°–ò–°–¢–ï–ú–´\n');
  console.log('=' .repeat(60));

  let allPassed = true;

  filesToCheck.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    const success = checkFile(filePath);

    if (!success) {
      allPassed = false;
    }
  });

  console.log('\n' + '=' .repeat(60));
  console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);

  if (allPassed) {
    console.log(`   ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!`);
    console.log(`   üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    console.log(`   üöÄ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É`);
    return true;
  } else {
    console.log(`   ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´`);
    console.log(`   üîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã`);
    return false;
  }
}

function generateColorCSS() {
  console.log('\nüé® –ì–ï–ù–ï–†–ê–¶–ò–Ø CSS –ü–ï–†–ï–ú–ï–ù–ù–´–• –î–õ–Ø –ù–û–í–û–ô –¶–í–ï–¢–û–í–û–ô –°–ò–°–¢–ï–ú–´:');
  console.log('=' .repeat(60));

  // –≠—Ç–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ tokens.js
  const css = `:root {
  /* –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ */
  --color-primary-500: #0ea5e9;
  --color-status-success: #10b981;
  --color-status-warning: #f59e0b;
  --color-status-danger: #ef4444;

  /* –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ */
  --color-medical-cardiology: #dc2626;
  --color-medical-dermatology: #7c3aed;
  --color-medical-dentistry: #059669;

  /* –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ */
  --color-background-primary: #ffffff;
  --color-text-primary: #0f172a;
  --color-border-medium: #d1d5db;
}`;

  console.log(css);
  return css;
}

function main() {
  const testsPassed = runTests();
  generateColorCSS();

  if (testsPassed) {
    console.log('\nüöÄ –≠–¢–ê–ü 2 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ —ç—Ç–∞–ø—É 3: –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –û–®–ò–ë–ö–ò –ü–ï–†–ï–î –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï–ú');
    process.exit(1);
  }
}

main();
