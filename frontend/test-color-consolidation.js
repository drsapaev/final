#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
 */

import { colors, medical } from './src/theme/tokens.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤
const testCases = [
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
  { name: 'Primary 500', color: colors.primary[500], expected: '#0ea5e9' },
  { name: 'Success', color: colors.status.success, expected: '#10b981' },
  { name: 'Warning', color: colors.status.warning, expected: '#f59e0b' },
  { name: 'Danger', color: colors.status.danger, expected: '#ef4444' },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤
  { name: 'Cardiology', color: colors.medical.cardiology, expected: '#dc2626' },
  { name: 'Dermatology', color: colors.medical.dermatology, expected: '#7c3aed' },
  { name: 'Dentistry', color: colors.medical.dentistry, expected: '#059669' },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
  { name: 'Patient waiting', color: medical.patientStatus.waiting, expected: '#f59e0b' },
  { name: 'Patient completed', color: medical.patientStatus.completed, expected: '#10b981' },
  { name: 'Patient emergency', color: medical.patientStatus.emergency, expected: '#ef4444' },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
  { name: 'Priority normal', color: medical.priority.normal, expected: '#3b82f6' },
  { name: 'Priority high', color: medical.priority.high, expected: '#f59e0b' },
  { name: 'Priority urgent', color: medical.priority.urgent, expected: '#ef4444' },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π
  { name: 'Department cardiology', color: medical.departments.cardiology, expected: '#dc2626' },
  { name: 'Department dermatology', color: medical.departments.dermatology, expected: '#7c3aed' },
  { name: 'Department general', color: medical.departments.general, expected: '#0ea5e9' }
];

function runTests() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–ò –¶–í–ï–¢–û–í–û–ô –°–ò–°–¢–ï–ú–´\n');
  console.log('=' .repeat(60));

  let passed = 0;
  let failed = 0;

  testCases.forEach((test, index) => {
    const success = test.color === test.expected;
    const status = success ? '‚úÖ' : '‚ùå';

    console.log(`${status} –¢–µ—Å—Ç ${index + 1}: ${test.name}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π: ${test.expected}`);
    console.log(`   –ü–æ–ª—É—á–µ–Ω–Ω—ã–π: ${test.color}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);

    if (success) {
      passed++;
    } else {
      failed++;
      console.log(`   ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢!`);
    }

    console.log('');
  });

  console.log('=' .repeat(60));
  console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / testCases.length) * 100).toFixed(1)}%`);

  if (failed === 0) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –¶–≤–µ—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.');
    return true;
  } else {
    console.log(`\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–û ${failed} –ü–†–û–ë–õ–ï–ú. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–∞.`);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function generateCSSVariables() {
  console.log('\nüé® –ì–ï–ù–ï–†–ê–¶–ò–Ø CSS –ü–ï–†–ï–ú–ï–ù–ù–´–•:');
  console.log('=' .repeat(60));

  const cssVars = [];

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
  Object.entries(colors.primary).forEach(([key, value]) => {
    cssVars.push(`  --color-primary-${key}: ${value};`);
  });

  // –°—Ç–∞—Ç—É—Å–Ω—ã–µ —Ü–≤–µ—Ç–∞
  Object.entries(colors.status).forEach(([key, value]) => {
    cssVars.push(`  --color-status-${key}: ${value};`);
  });

  // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
  Object.entries(colors.medical).forEach(([key, value]) => {
    cssVars.push(`  --color-medical-${key}: ${value};`);
  });

  // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞
  Object.entries(colors.semantic.background).forEach(([key, value]) => {
    cssVars.push(`  --color-background-${key}: ${value};`);
  });

  Object.entries(colors.semantic.text).forEach(([key, value]) => {
    cssVars.push(`  --color-text-${key}: ${value};`);
  });

  console.log(':root {');
  cssVars.forEach(cssVar => console.log(cssVar));
  console.log('}');

  return cssVars;
}

function main() {
  const testsPassed = runTests();
  generateCSSVariables();

  if (testsPassed) {
    console.log('\nüöÄ –ì–û–¢–û–í–û –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –≠–¢–ê–ü–£!');
  } else {
    console.log('\nüîß –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨ –û–®–ò–ë–ö–ò –ü–ï–†–ï–î –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï–ú.');
    process.exit(1);
  }
}

main();
