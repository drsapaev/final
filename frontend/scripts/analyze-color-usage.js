#!/usr/bin/env node

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
const colorSystems = {
  'design-system': {
    primary: '#2196f3',
    success: '#4caf50',
    warning: '#ffc107',
    danger: '#f44336',
    cardiology: '#e91e63'
  },
  'main-theme': {
    primary: '#0ea5e9',
    success: '#10b981',
    warning: '#f59e0b',
    danger: '#ef4444',
    cardiology: '#dc2626'
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö
function findColorsInFile(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const results = {};

  Object.entries(colorSystems).forEach(([system, colors]) => {
    Object.entries(colors).forEach(([colorName, colorValue]) => {
      const regex = new RegExp(colorValue, 'g');
      const matches = content.match(regex);

      if (matches) {
        if (!results[colorValue]) {
          results[colorValue] = {
            count: 0,
            files: [],
            systems: []
          };
        }

        results[colorValue].count += matches.length;
        results[colorValue].files.push(filePath);
        results[colorValue].systems.push(system);
      }
    });
  });

  return results;
}

// –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function analyzeDirectory(dirPath) {
  const results = {};

  function walkDir(currentPath) {
    const files = fs.readdirSync(currentPath);

    files.forEach(file => {
      const filePath = path.join(currentPath, file);
      const stat = fs.statSync(filePath);

      if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
        walkDir(filePath);
      } else if (stat.isFile() && (file.endsWith('.jsx') || file.endsWith('.js') || file.endsWith('.css'))) {
        const fileResults = findColorsInFile(filePath);

        Object.entries(fileResults).forEach(([color, data]) => {
          if (!results[color]) {
            results[color] = {
              count: 0,
              files: [],
              systems: []
            };
          }

          results[color].count += data.count;
          results[color].files.push(...data.files);
          results[color].systems.push(...data.systems);
        });
      }
    });
  }

  walkDir(dirPath);
  return results;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport(results) {
  console.log('üé® –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –¶–í–ï–¢–û–í –í –ü–†–û–ï–ö–¢–ï\n');
  console.log('=' .repeat(60));

  Object.entries(results).forEach(([color, data]) => {
    const uniqueFiles = [...new Set(data.files)];
    const uniqueSystems = [...new Set(data.systems)];

    console.log(`\nüîç –¶–≤–µ—Ç: ${color}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${data.count}`);
    console.log(`   –§–∞–π–ª–æ–≤: ${uniqueFiles.length}`);
    console.log(`   –°–∏—Å—Ç–µ–º: ${uniqueSystems.join(', ')}`);

    if (uniqueFiles.length <= 5) {
      console.log(`   –§–∞–π–ª—ã: ${uniqueFiles.join(', ')}`);
    } else {
      console.log(`   –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤: ${uniqueFiles.slice(0, 5).join(', ')}...`);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–º–µ–Ω–µ
    if (uniqueSystems.length > 1) {
      console.log(`   ‚ö†Ô∏è  –ö–û–ù–§–õ–ò–ö–¢: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${uniqueSystems.length} —Å–∏—Å—Ç–µ–º–∞—Ö`);
    }
  });

  console.log('\n' + '=' .repeat(60));
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í:');

  const conflicts = Object.values(results).filter(r => r.systems.length > 1);
  console.log(`   –¶–≤–µ—Ç–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏: ${conflicts.length}`);
  console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${conflicts.reduce((sum, c) => sum + c.systems.length, 0)}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const frontendPath = path.join(__dirname, '..', 'src');

  if (!fs.existsSync(frontendPath)) {
    console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend/src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤...');
  const results = analyzeDirectory(frontendPath);

  generateReport(results);

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  const reportPath = path.join(__dirname, '..', 'color-usage-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
  console.log(`\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { analyzeDirectory, findColorsInFile };
