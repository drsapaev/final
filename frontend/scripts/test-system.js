#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏...\n');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFileExists(filePath, description) {
  try {
    if (fs.existsSync(filePath)) {
      log(`‚úÖ ${description}: ${filePath}`, 'green');
      return true;
    } else {
      log(`‚ùå ${description}: ${filePath} - –ù–ï –ù–ê–ô–î–ï–ù`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå ${description}: ${filePath} - –û–®–ò–ë–ö–ê: ${error.message}`, 'red');
    return false;
  }
}

function checkFileContent(filePath, requiredContent, description) {
  try {
    if (!fs.existsSync(filePath)) {
      log(`‚ùå ${description}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'red');
      return false;
    }

    const content = fs.readFileSync(filePath, 'utf8');
    const hasContent = requiredContent.some(item => 
      typeof item === 'string' ? content.includes(item) : item.test(content)
    );

    if (hasContent) {
      log(`‚úÖ ${description}: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'green');
      return true;
    } else {
      log(`‚ùå ${description}: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå ${description}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - ${error.message}`, 'red');
    return false;
  }
}

function checkImportSyntax(filePath, description) {
  try {
    if (!fs.existsSync(filePath)) {
      log(`‚ùå ${description}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'red');
      return false;
    }

    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–º–ø–æ—Ä—Ç–æ–≤
    const importRegex = /import\s+.*\s+from\s+['"][^'"]+['"];?/g;
    const imports = content.match(importRegex) || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    const hasValidImports = imports.length > 0 || content.includes('export');
    
    if (hasValidImports) {
      log(`‚úÖ ${description}: –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–º–ø–æ—Ä—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`, 'green');
      return true;
    } else {
      log(`‚ö†Ô∏è  ${description}: –ù–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤/—ç–∫—Å–ø–æ—Ä—Ç–æ–≤`, 'yellow');
      return true; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
  } catch (error) {
    log(`‚ùå ${description}: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ - ${error.message}`, 'red');
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...', 'blue');
const fileChecks = [
  // API —Ñ–∞–π–ª—ã
  ['src/api/client.js', 'API –∫–ª–∏–µ–Ω—Ç'],
  ['src/api/endpoints.js', 'API endpoints'],
  ['src/api/services.js', 'API —Å–µ—Ä–≤–∏—Å—ã'],
  
  // –¢–∏–ø—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  ['src/types/api.js', '–¢–∏–ø—ã API'],
  ['src/constants/routes.js', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤'],
  
  // –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  ['src/providers/AppProviders.jsx', '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
  
  // –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  ['src/components/common/ErrorBoundary.jsx', 'Error Boundary'],
  ['src/components/common/Toast.jsx', 'Toast —Å–∏—Å—Ç–µ–º–∞'],
  ['src/components/common/Loading.jsx', 'Loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'],
  ['src/components/common/Modal.jsx', 'Modal —Å–∏—Å—Ç–µ–º–∞'],
  ['src/components/common/Form.jsx', 'Form —Å–∏—Å—Ç–µ–º–∞'],
  ['src/components/common/Table.jsx', 'Table –∫–æ–º–ø–æ–Ω–µ–Ω—Ç'],
  ['src/components/common/RoleGuard.jsx', 'Role Guard'],
  ['src/components/common/index.js', '–≠–∫—Å–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤'],
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  ['src/components/auth/RequireAuth.jsx', 'Require Auth'],
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  ['src/components/navigation/ProtectedRoute.jsx', 'Protected Route'],
  
  // –£—Ç–∏–ª–∏—Ç—ã
  ['src/utils/themeChecker.js', 'Theme Checker'],
  ['src/utils/frontendAudit.js', 'Frontend Audit'],
  
  // –¢–µ—Å—Ç—ã
  ['src/components/test/ComponentTest.jsx', 'Component Test'],
  ['src/test/integration.test.js', 'Integration Tests']
];

let passedFiles = 0;
fileChecks.forEach(([filePath, description]) => {
  if (checkFileExists(filePath, description)) {
    passedFiles++;
  }
});

log(`\nüìä –§–∞–π–ª—ã: ${passedFiles}/${fileChecks.length} –Ω–∞–π–¥–µ–Ω—ã`, 'blue');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...', 'blue');
const contentChecks = [
  // API –∫–ª–∏–µ–Ω—Ç
  ['src/api/client.js', ['axios.create', 'interceptors', 'setToken'], 'API –∫–ª–∏–µ–Ω—Ç —Å interceptors'],
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
  ['src/constants/routes.js', ['roleToRoute', 'hasRouteAccess', 'ROLE_OPTIONS'], '–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤'],
  
  // –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  ['src/providers/AppProviders.jsx', ['ThemeProvider', 'ToastProvider', 'ErrorBoundary'], '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã'],
  
  // Error Boundary
  ['src/components/common/ErrorBoundary.jsx', ['componentDidCatch', 'ErrorFallback'], 'Error Boundary'],
  
  // Toast —Å–∏—Å—Ç–µ–º–∞
  ['src/components/common/Toast.jsx', ['ToastProvider', 'useToast', 'addToast'], 'Toast —Å–∏—Å—Ç–µ–º–∞'],
  
  // Loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  ['src/components/common/Loading.jsx', ['Loading', 'ButtonLoading', 'useLoading'], 'Loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'],
  
  // Modal —Å–∏—Å—Ç–µ–º–∞
  ['src/components/common/Modal.jsx', ['ModalProvider', 'useModal', 'openModal'], 'Modal —Å–∏—Å—Ç–µ–º–∞'],
  
  // Form —Å–∏—Å—Ç–µ–º–∞
  ['src/components/common/Form.jsx', ['FormProvider', 'useForm', 'FormField'], 'Form —Å–∏—Å—Ç–µ–º–∞'],
  
  // Table –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  ['src/components/common/Table.jsx', ['Table', 'sortable', 'pagination'], 'Table –∫–æ–º–ø–æ–Ω–µ–Ω—Ç'],
  
  // Role Guard
  ['src/components/common/RoleGuard.jsx', ['RoleGuard', 'useRoleAccess', 'hasRole'], 'Role Guard']
];

let passedContent = 0;
contentChecks.forEach(([filePath, requiredContent, description]) => {
  if (checkFileContent(filePath, requiredContent, description)) {
    passedContent++;
  }
});

log(`\nüìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${passedContent}/${contentChecks.length} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'blue');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...', 'blue');
const syntaxChecks = [
  ['src/api/client.js', 'API –∫–ª–∏–µ–Ω—Ç'],
  ['src/pages/Login.jsx', 'Login —Å—Ç—Ä–∞–Ω–∏—Ü–∞'],
  ['src/stores/auth.js', 'Auth store'],
  ['src/App.jsx', '–ì–ª–∞–≤–Ω—ã–π App'],
  ['src/providers/AppProviders.jsx', 'App Providers']
];

let passedSyntax = 0;
syntaxChecks.forEach(([filePath, description]) => {
  if (checkImportSyntax(filePath, description)) {
    passedSyntax++;
  }
});

log(`\nüìä –°–∏–Ω—Ç–∞–∫—Å–∏—Å: ${passedSyntax}/${syntaxChecks.length} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`, 'blue');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'blue');
if (checkFileExists('package.json', 'Package.json')) {
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const requiredDeps = ['react', 'react-dom', 'axios', 'react-router-dom'];
    const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
    
    if (missingDeps.length === 0) {
      log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'green');
    } else {
      log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`, 'red');
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`, 'red');
  }
}

// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const totalChecks = fileChecks.length + contentChecks.length + syntaxChecks.length;
const totalPassed = passedFiles + passedContent + passedSyntax;

log('\n' + '='.repeat(50), 'blue');
log(`üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê`, 'bold');
log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫`, 'green');
log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${totalChecks - totalPassed}/${totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫`, 'red');

if (totalPassed === totalChecks) {
  log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.', 'green');
} else if (totalPassed >= totalChecks * 0.8) {
  log('\n‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞.', 'yellow');
} else {
  log('\n‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.', 'red');
}

log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 'blue');
log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run dev –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'blue');
log('2. –û—Ç–∫—Ä–æ–π—Ç–µ test-components.html –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤', 'blue');
log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏', 'blue');
log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'blue');

console.log('\n');
