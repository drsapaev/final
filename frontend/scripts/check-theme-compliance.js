#!/usr/bin/env node

/**
 * üé® –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º–∏–∑–∞—Ü–∏–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run check-theme
 * –∏–ª–∏
 * node scripts/check-theme-compliance.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
const PATTERNS = {
  duplicatedTokens: /const\s+designTokens\s*=\s*\{/,
  hardcodedHex: /#([0-9a-fA-F]{3,6})(?![0-9a-fA-F])/g,
  hardcodedSpacing: /padding:\s*['"](\d+px|[\d.]+rem)/g,
  hardcodedFonts: /fontSize:\s*['"](\d+px|[\d.]+rem)/g,
  missingThemeImport: /useTheme.*ThemeContext/,
  cssVarsUsage: /var\(--[\w-]+\)/g
};

const SRC_DIR = path.join(__dirname, '../src');
const IGNORE_DIRS = ['test', 'tests', '__tests__', 'node_modules', '.git'];
const FILE_EXTENSIONS = ['.jsx', '.js', '.tsx', '.ts'];

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
function scanDirectory(dir) {
  const files = [];
  
  try {
    const entries = fs.readdirSync(dir);
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        if (!IGNORE_DIRS.includes(entry)) {
          files.push(...scanDirectory(fullPath));
        }
      } else {
        const ext = path.extname(entry);
        if (FILE_EXTENSIONS.includes(ext)) {
          files.push(fullPath);
        }
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`);
  }
  
  return files;
}

// –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
function analyzeFile(filePath) {
  const relativePath = path.relative(SRC_DIR, filePath);
  const content = fs.readFileSync(filePath, 'utf-8');
  
  const analysis = {
    file: relativePath,
    issues: [],
    score: 100
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
  if (PATTERNS.duplicatedTokens.test(content)) {
    analysis.issues.push({
      type: 'error',
      message: 'üö® –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ designTokens',
      suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ const { getColor, designTokens } = useTheme();'
    });
    analysis.score -= 30;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥ —Ü–≤–µ—Ç–æ–≤
  const hexColors = content.match(PATTERNS.hardcodedHex);
  if (hexColors && hexColors.length > 3) {
    analysis.issues.push({
      type: 'warning',
      message: `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${hexColors.length} —Ö–∞—Ä–¥–∫–æ–¥ —Ü–≤–µ—Ç–æ–≤`,
      suggestion: '–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ getColor() –∏–ª–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
    });
    analysis.score -= 15;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è useTheme
  const hasStyles = content.includes('background:') || content.includes('color:');
  const hasThemeImport = PATTERNS.missingThemeImport.test(content);
  
  if (hasStyles && !hasThemeImport) {
    analysis.issues.push({
      type: 'warning',
      message: 'üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∏–ª–∏, –Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç useTheme',
      suggestion: '–î–æ–±–∞–≤—å—Ç–µ import { useTheme } from "../contexts/ThemeContext";'
    });
    analysis.score -= 20;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å)
  const cssVars = content.match(PATTERNS.cssVarsUsage);
  if (cssVars && cssVars.length > 0) {
    analysis.score += 5; // –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  }
  
  analysis.score = Math.max(0, Math.min(100, analysis.score));
  
  return analysis;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function checkThemeCompliance() {
  console.log('üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º–∏–∑–∞—Ü–∏–∏\n');
  
  const files = scanDirectory(SRC_DIR);
  console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n`);
  
  const results = files.map(analyzeFile);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalFiles = results.length;
  const errorFiles = results.filter(r => r.issues.some(i => i.type === 'error')).length;
  const warningFiles = results.filter(r => r.issues.some(i => i.type === 'warning')).length;
  const cleanFiles = results.filter(r => r.issues.length === 0).length;
  
  const avgScore = results.reduce((sum, r) => sum + r.score, 0) / totalFiles;
  
  // –û—Ç—á–µ—Ç
  console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`‚úÖ –ß–∏—Å—Ç—ã–µ —Ñ–∞–π–ª—ã: ${cleanFiles}/${totalFiles} (${Math.round(cleanFiles/totalFiles*100)}%)`);
  console.log(`‚ö†Ô∏è –§–∞–π–ª—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${warningFiles}`);
  console.log(`üö® –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏: ${errorFiles}`);
  console.log(`üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${avgScore.toFixed(1)}/100\n`);
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const problemFiles = results.filter(r => r.issues.length > 0);
  
  if (problemFiles.length === 0) {
    console.log('üéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ç–µ–º–∏–∑–∞—Ü–∏–∏!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞');
    console.log('‚úÖ –ì–æ—Ç–æ–≤–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n');
  } else {
    console.log('üîç –§–ê–ô–õ–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø:\n');
    
    problemFiles.forEach(result => {
      console.log(`üìÑ ${result.file} (–±–∞–ª–ª: ${result.score}/100)`);
      result.issues.forEach(issue => {
        const emoji = issue.type === 'error' ? 'üö®' : '‚ö†Ô∏è';
        console.log(`  ${emoji} ${issue.message}`);
        console.log(`     üí° ${issue.suggestion}\n`);
      });
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:');
  
  if (errorFiles > 0) {
    console.log('üî• –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ designTokens');
  }
  
  if (warningFiles > 0) {
    console.log('‚ö° –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: –ó–∞–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–¥–∫–æ–¥ —Å—Ç–∏–ª–∏ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏');
  }
  
  if (avgScore < 80) {
    console.log('üìñ –ò–ó–£–ß–ò–¢–¨: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é THEME_SYSTEM_GUIDE.md');
  } else {
    console.log('‚ú® –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ç–µ–º–∏–∑–∞—Ü–∏–∏ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!');
  }
  
  return {
    totalFiles,
    cleanFiles,
    errorFiles,
    warningFiles,
    avgScore,
    compliant: avgScore >= 85 && errorFiles === 0
  };
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (import.meta.url === `file://${process.argv[1]}`) {
  const result = checkThemeCompliance();
  process.exit(result.compliant ? 0 : 1);
}

export { checkThemeCompliance, analyzeFile, PATTERNS };
