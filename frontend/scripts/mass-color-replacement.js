#!/usr/bin/env node

/**
 * –ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤ –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –°—Ç–∞—Ä—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
const oldColors = {
  // –°—Ç–∞—Ä—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –¥–∏–∑–∞–π–Ω–∞-—Å–∏—Å—Ç–µ–º—ã
  '#2196f3': 'colors.primary[500]',      // –°—Ç–∞—Ä—ã–π primary —Å–∏–Ω–∏–π
  '#4caf50': 'colors.status.success',    // –°—Ç–∞—Ä—ã–π success –∑–µ–ª–µ–Ω—ã–π
  '#ffc107': 'colors.status.warning',    // –°—Ç–∞—Ä—ã–π warning –∂–µ–ª—Ç—ã–π
  '#f44336': 'colors.status.danger',     // –°—Ç–∞—Ä—ã–π danger –∫—Ä–∞—Å–Ω—ã–π
  '#e91e63': 'colors.medical.cardiology', // –°—Ç–∞—Ä—ã–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è —Ä–æ–∑–æ–≤—ã–π
  '#9c27b0': 'colors.medical.dermatology', // –°—Ç–∞—Ä—ã–π –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π

  // –°—Ç–∞—Ä—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ LoginFormStyled.jsx
  '#667eea': 'colors.primary[500]',      // –°—Ç–∞—Ä—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å–∏–Ω–∏–π
  '#764ba2': 'colors.primary[700]',      // –°—Ç–∞—Ä—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
  '#333': 'colors.semantic.text.primary', // –°—Ç–∞—Ä—ã–π —Ç–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
  '#666': 'colors.semantic.text.secondary', // –°—Ç–∞—Ä—ã–π —Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
};

// –§–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
const excludePatterns = [
  'node_modules/**',
  'dist/**',
  'build/**',
  '*.min.js',
  '*.min.css',
  'package-lock.json',
  'yarn.lock',
  '.git/**'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
function shouldExclude(filePath) {
  return excludePatterns.some(pattern => {
    const regex = new RegExp(pattern.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*'));
    return regex.test(filePath);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
function processFile(filePath) {
  if (shouldExclude(filePath)) {
    return { changed: false, errors: [] };
  }

  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let changed = false;
    const errors = [];

    // –ó–∞–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
    Object.entries(oldColors).forEach(([oldColor, newColor]) => {
      // –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ (–Ω–µ —á–∞—Å—Ç–∏ —Å–ª–æ–≤)
      const regex = new RegExp(`\\b${oldColor.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'g');

      if (regex.test(content)) {
        content = content.replace(regex, newColor);
        changed = true;
        console.log(`  ‚úì ${filePath}: ${oldColor} ‚Üí ${newColor}`);
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (changed) {
      fs.writeFileSync(filePath, content, 'utf8');
    }

    return { changed, errors };
  } catch (error) {
    return { changed: false, errors: [error.message] };
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function processDirectory(dirPath) {
  const results = {
    filesProcessed: 0,
    filesChanged: 0,
    errors: []
  };

  function walkDir(currentPath) {
    const files = fs.readdirSync(currentPath);

    files.forEach(file => {
      const filePath = path.join(currentPath, file);
      const stat = fs.statSync(filePath);

      if (stat.isDirectory() && !shouldExclude(filePath)) {
        walkDir(filePath);
      } else if (stat.isFile() && !shouldExclude(filePath)) {
        results.filesProcessed++;

        const { changed, errors } = processFile(filePath);
        if (changed) {
          results.filesChanged++;
        }
        results.errors.push(...errors);
      }
    });
  }

  walkDir(dirPath);
  return results;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const projectRoot = path.join(__dirname, '..');
  const srcDir = path.join(projectRoot, 'src');

  console.log('üîÑ –ú–ê–°–°–û–í–ê–Ø –ó–ê–ú–ï–ù–ê –¶–í–ï–¢–û–í –í –ü–†–û–ï–ö–¢–ï');
  console.log('=' .repeat(50));
  console.log(`üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${srcDir}`);
  console.log('');

  console.log('üé® –¶–≤–µ—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã:');
  Object.entries(oldColors).forEach(([oldColor, newColor]) => {
    console.log(`   ${oldColor} ‚Üí ${newColor}`);
  });
  console.log('');

  const results = processDirectory(srcDir);

  console.log('=' .repeat(50));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`   –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.filesProcessed}`);
  console.log(`   –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: ${results.filesChanged}`);
  console.log(`   –û—à–∏–±–æ–∫: ${results.errors.length}`);

  if (results.errors.length > 0) {
    console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
    results.errors.forEach(error => console.log(`   ${error}`));
  }

  console.log('\n‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üöÄ –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
