#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–¥–ª–∞
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

console.log('üîç –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–¥–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, description) {
  console.log(`üìã ${description}...`);
  try {
    const output = execSync(command, { 
      cwd: projectRoot, 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    return output;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
function analyzeFileSize(filePath) {
  try {
    const stats = fs.statSync(filePath);
    const sizeInMB = (stats.size / 1024 / 1024).toFixed(2);
    return {
      size: stats.size,
      sizeFormatted: `${sizeInMB} MB`,
      exists: true
    };
  } catch {
    return { exists: false };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function getDirectorySize(dirPath) {
  let totalSize = 0;
  
  try {
    const files = fs.readdirSync(dirPath, { withFileTypes: true });
    
    for (const file of files) {
      const fullPath = path.join(dirPath, file.name);
      
      if (file.isDirectory()) {
        totalSize += getDirectorySize(fullPath);
      } else {
        const stats = fs.statSync(fullPath);
        totalSize += stats.size;
      }
    }
  } catch (error) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}: ${error.message}`);
  }
  
  return totalSize;
}

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function analyzeCurrentBundle() {
  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω–¥–ª–∞:\n');
  
  const distPath = path.join(projectRoot, 'dist');
  const nodeModulesPath = path.join(projectRoot, 'node_modules');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ dist
  if (!fs.existsSync(distPath)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É: npm run build');
    return false;
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
  const distSize = getDirectorySize(distPath);
  const nodeModulesSize = getDirectorySize(nodeModulesPath);
  
  console.log(`üìÅ –†–∞–∑–º–µ—Ä dist: ${(distSize / 1024 / 1024).toFixed(2)} MB`);
  console.log(`üì¶ –†–∞–∑–º–µ—Ä node_modules: ${(nodeModulesSize / 1024 / 1024).toFixed(2)} MB`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ dist
  const assetsPath = path.join(distPath, 'assets');
  if (fs.existsSync(assetsPath)) {
    console.log('\nüìã –§–∞–π–ª—ã –≤ assets:');
    
    const files = fs.readdirSync(assetsPath)
      .map(file => {
        const filePath = path.join(assetsPath, file);
        const stats = fs.statSync(filePath);
        return {
          name: file,
          size: stats.size,
          sizeFormatted: `${(stats.size / 1024).toFixed(1)} KB`
        };
      })
      .sort((a, b) => b.size - a.size);
    
    files.forEach(file => {
      console.log(`   ${file.name}: ${file.sizeFormatted}`);
    });
  }
  
  return true;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function analyzeDependencies() {
  console.log('\nüì¶ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:\n');
  
  const packageJsonPath = path.join(projectRoot, 'package.json');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    const dependencies = Object.keys(packageJson.dependencies || {});
    const devDependencies = Object.keys(packageJson.devDependencies || {});
    
    console.log(`üìã –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${dependencies.length}`);
    console.log(`üîß Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${devDependencies.length}`);
    
    // –ö—Ä—É–ø–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const largeDependencies = [
      '@mui/material',
      '@mui/icons-material', 
      'react',
      'react-dom',
      'react-router-dom'
    ];
    
    console.log('\nüìä –ö—Ä—É–ø–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
    largeDependencies.forEach(dep => {
      if (dependencies.includes(dep)) {
        console.log(`   ‚úÖ ${dep}`);
      } else {
        console.log(`   ‚ùå ${dep} (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)`);
      }
    });
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`);
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function generateOptimizationRecommendations() {
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n');
  
  const recommendations = [
    {
      title: 'Code Splitting',
      description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ React.lazy() –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      implemented: fs.existsSync(path.join(projectRoot, 'src', 'AppOptimized.jsx')),
      priority: '–í—ã—Å–æ–∫–∏–π'
    },
    {
      title: 'Tree Shaking',
      description: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫',
      check: () => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã Material-UI
        const files = ['src/App.jsx', 'src/components/layout/Header.jsx'];
        return files.some(file => {
          const filePath = path.join(projectRoot, file);
          if (fs.existsSync(filePath)) {
            const content = fs.readFileSync(filePath, 'utf8');
            return content.includes("import { ") && content.includes("} from '@mui/material'");
          }
          return false;
        });
      },
      priority: '–°—Ä–µ–¥–Ω–∏–π'
    },
    {
      title: 'Bundle Analysis',
      description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webpack-bundle-analyzer –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞',
      check: () => {
        const packageJson = JSON.parse(fs.readFileSync(path.join(projectRoot, 'package.json'), 'utf8'));
        return packageJson.devDependencies && packageJson.devDependencies['rollup-plugin-visualizer'];
      },
      priority: '–ù–∏–∑–∫–∏–π'
    },
    {
      title: 'Image Optimization',
      description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã',
      check: () => {
        const publicPath = path.join(projectRoot, 'public');
        if (fs.existsSync(publicPath)) {
          const files = fs.readdirSync(publicPath);
          return files.some(file => file.endsWith('.webp') || file.endsWith('.avif'));
        }
        return false;
      },
      priority: '–°—Ä–µ–¥–Ω–∏–π'
    },
    {
      title: 'Service Worker',
      description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
      implemented: fs.existsSync(path.join(projectRoot, 'public', 'sw.js')),
      priority: '–í—ã—Å–æ–∫–∏–π'
    }
  ];
  
  recommendations.forEach(rec => {
    const status = rec.implemented !== undefined 
      ? (rec.implemented ? '‚úÖ' : '‚ùå')
      : (rec.check && rec.check() ? '‚úÖ' : '‚ùå');
    
    console.log(`${status} ${rec.title} (${rec.priority})`);
    console.log(`   ${rec.description}\n`);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function checkPerformance() {
  console.log('\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n');
  
  const checks = [
    {
      name: 'Lazy Loading –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
      check: () => {
        const appOptimized = path.join(projectRoot, 'src', 'AppOptimized.jsx');
        if (fs.existsSync(appOptimized)) {
          const content = fs.readFileSync(appOptimized, 'utf8');
          return content.includes('React.lazy') || content.includes('lazy(');
        }
        return false;
      }
    },
    {
      name: 'Vite –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
      check: () => {
        const viteConfig = path.join(projectRoot, 'vite.config.js');
        if (fs.existsSync(viteConfig)) {
          const content = fs.readFileSync(viteConfig, 'utf8');
          return content.includes('manualChunks') && content.includes('terser');
        }
        return false;
      }
    },
    {
      name: 'API –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
      check: () => {
        const apiCache = path.join(projectRoot, 'src', 'utils', 'apiCache.js');
        return fs.existsSync(apiCache);
      }
    },
    {
      name: 'PWA –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
      check: () => {
        const manifest = path.join(projectRoot, 'public', 'manifest.json');
        const sw = path.join(projectRoot, 'public', 'sw.js');
        return fs.existsSync(manifest) && fs.existsSync(sw);
      }
    }
  ];
  
  checks.forEach(check => {
    const status = check.check() ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${check.name}`);
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport() {
  console.log('\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...\n');
  
  const report = {
    timestamp: new Date().toISOString(),
    analysis: {
      bundleExists: fs.existsSync(path.join(projectRoot, 'dist')),
      optimizedAppExists: fs.existsSync(path.join(projectRoot, 'src', 'AppOptimized.jsx')),
      apiCacheExists: fs.existsSync(path.join(projectRoot, 'src', 'utils', 'apiCache.js')),
      serviceWorkerExists: fs.existsSync(path.join(projectRoot, 'public', 'sw.js'))
    }
  };
  
  // –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
  if (report.analysis.bundleExists) {
    const distSize = getDirectorySize(path.join(projectRoot, 'dist'));
    report.bundleSize = {
      bytes: distSize,
      mb: (distSize / 1024 / 1024).toFixed(2)
    };
  }
  
  const reportPath = path.join(projectRoot, 'bundle-analysis-report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  
  console.log(`üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
  
  return report;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–Ω–¥–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n');
  
  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–Ω–¥–ª
    const bundleExists = analyzeCurrentBundle();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    analyzeDependencies();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    checkPerformance();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generateOptimizationRecommendations();
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = generateReport();
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    if (!bundleExists) {
      console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.log('   npm run build');
      console.log('   npm run analyze');
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
