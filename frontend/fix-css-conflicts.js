#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã
 * –ò—â–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É shorthand –∏ non-shorthand CSS —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–∞—Ä—ã CSS —Å–≤–æ–π—Å—Ç–≤
const CSS_CONFLICTS = [
  {
    shorthand: 'border',
    longhand: ['borderTop', 'borderRight', 'borderBottom', 'borderLeft', 'borderWidth', 'borderStyle', 'borderColor']
  },
  {
    shorthand: 'margin',
    longhand: ['marginTop', 'marginRight', 'marginBottom', 'marginLeft']
  },
  {
    shorthand: 'padding',
    longhand: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft']
  },
  {
    shorthand: 'background',
    longhand: ['backgroundColor', 'backgroundImage', 'backgroundRepeat', 'backgroundPosition', 'backgroundSize']
  },
  {
    shorthand: 'font',
    longhand: ['fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'lineHeight']
  },
  {
    shorthand: 'borderRadius',
    longhand: ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomLeftRadius', 'borderBottomRightRadius']
  }
];

// –°—á–µ—Ç—á–∏–∫–∏
let filesScanned = 0;
let conflictsFound = 0;
let conflictsFixed = 0;

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ CSS –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
 */
function checkFileForConflicts(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const conflicts = [];

    // –ü–æ–∏—Å–∫ style –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSX
    const styleRegex = /style\s*=\s*\{\{([^}]+)\}\}/g;
    let match;

    while ((match = styleRegex.exec(content)) !== null) {
      const styleContent = match[1];
      const styleLines = styleContent.split(',');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      CSS_CONFLICTS.forEach(conflict => {
        const hasShorthand = styleLines.some(line => 
          line.trim().startsWith(conflict.shorthand + ':')
        );
        
        const hasLonghand = conflict.longhand.some(prop =>
          styleLines.some(line => line.trim().startsWith(prop + ':'))
        );

        if (hasShorthand && hasLonghand) {
          conflicts.push({
            type: 'style_object',
            shorthand: conflict.shorthand,
            longhand: conflict.longhand.filter(prop =>
              styleLines.some(line => line.trim().startsWith(prop + ':'))
            ),
            match: match[0],
            position: match.index
          });
        }
      });
    }

    // –ü–æ–∏—Å–∫ CSS-in-JS –æ–±—ä–µ–∫—Ç–æ–≤
    const cssObjectRegex = /\{\s*([^}]*(?:border|margin|padding|background|font)[^}]*)\s*\}/g;
    while ((match = cssObjectRegex.exec(content)) !== null) {
      const cssContent = match[1];
      
      CSS_CONFLICTS.forEach(conflict => {
        const hasShorthand = new RegExp(`\\b${conflict.shorthand}\\s*:`).test(cssContent);
        const hasLonghand = conflict.longhand.some(prop =>
          new RegExp(`\\b${prop}\\s*:`).test(cssContent)
        );

        if (hasShorthand && hasLonghand) {
          conflicts.push({
            type: 'css_object',
            shorthand: conflict.shorthand,
            longhand: conflict.longhand.filter(prop =>
              new RegExp(`\\b${prop}\\s*:`).test(cssContent)
            ),
            match: match[0],
            position: match.index
          });
        }
      });
    }

    return conflicts;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return [];
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ —Ñ–∞–π–ª–µ
 */
function fixConflictsInFile(filePath, conflicts) {
  if (conflicts.length === 0) return false;

  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let fixed = 0;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
    conflicts.sort((a, b) => b.position - a.position);

    conflicts.forEach(conflict => {
      if (conflict.shorthand === 'border' && conflict.longhand.includes('borderBottom')) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è border/borderBottom –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        const beforeMatch = content.substring(0, conflict.position);
        const afterMatch = content.substring(conflict.position + conflict.match.length);
        
        // –ó–∞–º–µ–Ω—è–µ–º border –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        let fixedMatch = conflict.match.replace(
          /border\s*:\s*([^,}]+)/g,
          (match, value) => {
            if (value.includes('none') || value.includes('transparent')) {
              return `borderTop: ${value}, borderLeft: ${value}, borderRight: ${value}`;
            } else {
              return `borderTop: ${value}, borderLeft: ${value}, borderRight: ${value}`;
            }
          }
        );

        content = beforeMatch + fixedMatch + afterMatch;
        fixed++;
      }
    });

    if (fixed > 0) {
      fs.writeFileSync(filePath, content, 'utf8');
      return true;
    }

    return false;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
function scanDirectory(dirPath, extensions = ['.jsx', '.js', '.tsx', '.ts']) {
  const results = [];

  try {
    const items = fs.readdirSync(dirPath);

    items.forEach(item => {
      const itemPath = path.join(dirPath, item);
      const stat = fs.statSync(itemPath);

      if (stat.isDirectory()) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
        if (!['node_modules', '.git', 'dist', 'build', '.next'].includes(item)) {
          results.push(...scanDirectory(itemPath, extensions));
        }
      } else if (stat.isFile()) {
        const ext = path.extname(item);
        if (extensions.includes(ext)) {
          results.push(itemPath);
        }
      }
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error.message);
  }

  return results;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  console.log('üîç –ü–æ–∏—Å–∫ CSS –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã...\n');

  const srcPath = path.join(__dirname, 'src');
  const files = scanDirectory(srcPath);

  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);

  const problemFiles = [];

  files.forEach(filePath => {
    filesScanned++;
    const conflicts = checkFileForConflicts(filePath);
    
    if (conflicts.length > 0) {
      conflictsFound += conflicts.length;
      problemFiles.push({ filePath, conflicts });
      
      console.log(`‚ö†Ô∏è  ${path.relative(__dirname, filePath)}`);
      conflicts.forEach(conflict => {
        console.log(`   - ${conflict.shorthand} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å ${conflict.longhand.join(', ')}`);
      });
      console.log();
    }
  });

  if (problemFiles.length === 0) {
    console.log('‚úÖ CSS –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    return;
  }

  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${filesScanned}`);
  console.log(`   –§–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏: ${problemFiles.length}`);
  console.log(`   –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${conflictsFound}`);

  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã...`);

  problemFiles.forEach(({ filePath, conflicts }) => {
    const fixed = fixConflictsInFile(filePath, conflicts);
    if (fixed) {
      conflictsFixed += conflicts.length;
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(__dirname, filePath)}`);
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: ${path.relative(__dirname, filePath)}`);
    }
  });

  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:`);
  console.log(`   –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${conflictsFixed}/${conflictsFound}`);
  
  if (conflictsFixed < conflictsFound) {
    console.log(`\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è`);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}


