#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
"""
import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000/api/v1"

def test_payment_providers_api():
    """–¢–µ—Å—Ç API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üè¶ 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    try:
        response = requests.get(f"{BASE_URL}/payments/providers")
        
        if response.status_code == 200:
            data = response.json()
            providers = data.get("providers", [])
            
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
            for provider in providers:
                name = provider.get("name", "Unknown")
                code = provider.get("code", "unknown")
                currencies = provider.get("supported_currencies", [])
                features = provider.get("features", {})
                
                print(f"      üí≥ {name} ({code})")
                print(f"         üí∞ –í–∞–ª—é—Ç—ã: {', '.join(currencies)}")
                print(f"         üîß –§—É–Ω–∫—Ü–∏–∏: {', '.join([k for k, v in features.items() if v])}")
            
            return len(providers) > 0
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_webhook_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    print("\nüîó 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook...")
    
    webhook_tests = [
        {
            "name": "Click webhook (—É—Å–ø–µ—à–Ω—ã–π)",
            "url": f"{BASE_URL}/payments/webhook/click",
            "data": {
                "click_trans_id": "12345",
                "merchant_trans_id": "clinic_test_001",
                "amount": 50000,
                "action": 1,  # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
                "error": 0,
                "sign_string": "test_signature"
            },
            "expected_status": 200
        },
        {
            "name": "Payme webhook (–ø—Ä–æ–≤–µ—Ä–∫–∞)",
            "url": f"{BASE_URL}/payments/webhook/payme",
            "data": {
                "method": "CheckPerformTransaction",
                "params": {
                    "account": {"order_id": "clinic_test_002"},
                    "amount": 75000
                },
                "id": 1
            },
            "expected_status": 200
        },
        {
            "name": "Kaspi webhook (—É—Å–ø–µ—à–Ω—ã–π)",
            "url": f"{BASE_URL}/payments/webhook/kaspi",
            "data": {
                "transaction_id": "kaspi_12345",
                "order_id": "clinic_test_003",
                "amount": 2500,
                "currency": "KZT",
                "status": "SUCCESS",
                "signature": "test_signature"
            },
            "expected_status": 200
        }
    ]
    
    results = []
    
    for test in webhook_tests:
        print(f"   üß™ {test['name']}...")
        
        try:
            response = requests.post(test["url"], json=test["data"])
            
            if response.status_code == test["expected_status"]:
                result = response.json()
                print(f"      ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"         –û—Ç–≤–µ—Ç: {str(result)[:100]}...")
                results.append(True)
            else:
                print(f"      ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"         –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                results.append(True)  # Webhook –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    return all(results)

def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î"""
    print("\nüóÑÔ∏è 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ë–î...")
    
    try:
        import sqlite3
        
        conn = sqlite3.connect('clinic.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ë–î
        cursor.execute("SELECT COUNT(*) FROM payment_providers WHERE is_active = 1")
        active_providers = cursor.fetchone()[0]
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ë–î: {active_providers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        tables_to_check = ['payment_providers', 'payment_webhooks', 'payment_transactions', 'payments']
        
        for table in tables_to_check:
            cursor.execute(f"PRAGMA table_info({table})")
            columns = cursor.fetchall()
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='index' AND name LIKE 'ix_payment%'")
        indexes = cursor.fetchall()
        print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}")
        
        conn.close()
        return active_providers > 0
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_payment_flow_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    print("\nüí≥ 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –ø–ª–∞—Ç–µ–∂–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
        import sqlite3
        
        conn = sqlite3.connect('clinic.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        test_payment_data = {
            'amount': 50000,
            'currency': 'UZS',
            'method': 'online',
            'status': 'pending',
            'provider': 'click',
            'provider_payment_id': 'test_payment_001',
            'payment_url': 'https://my.click.uz/services/pay?service_id=test',
            'created_at': datetime.now().isoformat()
        }
        
        cursor.execute("""
            INSERT INTO payments (amount, currency, method, status, provider, provider_payment_id, payment_url, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            test_payment_data['amount'],
            test_payment_data['currency'],
            test_payment_data['method'],
            test_payment_data['status'],
            test_payment_data['provider'],
            test_payment_data['provider_payment_id'],
            test_payment_data['payment_url'],
            test_payment_data['created_at']
        ))
        
        payment_id = cursor.lastrowid
        conn.commit()
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ ID: {payment_id}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º webhook
        webhook_data = {
            'provider': 'click',
            'webhook_id': f'webhook_{payment_id}',
            'transaction_id': test_payment_data['provider_payment_id'],
            'status': 'success',
            'amount': test_payment_data['amount'],
            'currency': test_payment_data['currency'],
            'raw_data': json.dumps(test_payment_data),
            'created_at': datetime.now().isoformat()
        }
        
        cursor.execute("""
            INSERT INTO payment_webhooks (provider, webhook_id, transaction_id, status, amount, currency, raw_data, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            webhook_data['provider'],
            webhook_data['webhook_id'],
            webhook_data['transaction_id'],
            webhook_data['status'],
            webhook_data['amount'],
            webhook_data['currency'],
            webhook_data['raw_data'],
            webhook_data['created_at']
        ))
        
        webhook_id = cursor.lastrowid
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π webhook ID: {webhook_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        cursor.execute("""
            UPDATE payments 
            SET status = 'paid', paid_at = ? 
            WHERE id = ?
        """, (datetime.now().isoformat(), payment_id))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT * FROM payments WHERE id = ?", (payment_id,))
        payment = cursor.fetchone()
        
        cursor.execute("SELECT * FROM payment_webhooks WHERE id = ?", (webhook_id,))
        webhook = cursor.fetchone()
        
        print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª–µ–Ω: —Å—Ç–∞—Ç—É—Å = {payment[5] if payment else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        print(f"   ‚úÖ Webhook –∑–∞–ø–∏—Å–∞–Ω: ID = {webhook[0] if webhook else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        conn.close()
        return payment is not None and webhook is not None
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        return False

def run_comprehensive_db_test():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å –ë–î"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´ –° –ë–î")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç—ã
    results.append(("API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", test_payment_providers_api()))
    results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook", test_webhook_processing()))
    results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î", test_database_integration()))
    results.append(("–°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Ç–æ–∫–∞", test_payment_flow_simulation()))
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<25} {status}")
        if result:
            passed += 1
    
    print("=" * 60)
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
        status = "excellent"
    elif passed >= total * 0.75:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∞.")
        status = "good"
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        status = "needs_work"
    
    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    
    if status == "excellent":
        print("1. ‚úÖ Backend API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("2. ‚úÖ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("3. ‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        print("4. ‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–ª–∞—Ç–µ–∂–µ–π –≥–æ—Ç–æ–≤—ã")
        print("5. üöÄ –ì–û–¢–û–í–û –ö –°–û–ó–î–ê–ù–ò–Æ FRONTEND!")
        
        print("\nüìã –ì–û–¢–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
        print("   üí≥ 3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (Click, Payme, Kaspi)")
        print("   üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("   üóÑÔ∏è –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î")
        print("   üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π")
        print("   üåç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ UZS –∏ KZT")
        
    elif status == "good":
        print("1. ‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("2. üîß –ï—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("3. üß™ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
    else:
        print("1. üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã")
        print("2. üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î")
        print("3. üîç –ò–∑—É—á–∏—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫")
    
    return status

if __name__ == "__main__":
    result = run_comprehensive_db_test()
    
    if result == "excellent":
        print("\nüéä –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!")
        print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ frontend.")
