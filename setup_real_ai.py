#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (Gemini)
"""
import os
import sys

def setup_gemini_api():
    print("=" * 60)
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê GEMINI AI –ü–†–û–í–ê–ô–î–ï–†–ê")
    print("=" * 60)
    
    env_path = os.path.join("backend", ".env")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(env_path):
        print(f"\nüìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª {env_path}...")
        with open(env_path, "w", encoding="utf-8") as f:
            f.write("# AI Provider API Keys\n")
            f.write("GEMINI_API_KEY=\n")
            f.write("\n# Other settings\n")
        print(f"‚úÖ –§–∞–π–ª {env_path} —Å–æ–∑–¥–∞–Ω")
    else:
        print(f"‚úÖ –§–∞–π–ª {env_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(env_path, "r", encoding="utf-8") as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
    if "GEMINI_API_KEY=" in content:
        if "GEMINI_API_KEY=AIza" in content:
            print("\n‚úÖ GEMINI_API_KEY —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á (—á–∞—Å—Ç–∏—á–Ω–æ)
            for line in content.split("\n"):
                if line.startswith("GEMINI_API_KEY="):
                    key = line.split("=")[1].strip()
                    if key and key != "":
                        print(f"   –¢–µ–∫—É—â–∏–π –∫–ª—é—á: {key[:20]}...")
                        
                        update = input("\nüîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á? (y/n): ").strip().lower()
                        if update != 'y':
                            print("\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á")
                            return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    print("\n" + "=" * 60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print("=" * 60)
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ https://aistudio.google.com/app/apikey")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç")
    print("3. –ù–∞–∂–º–∏—Ç–µ 'Create API Key' –∏–ª–∏ 'Get API key'")
    print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª—é—á (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AIza...)")
    print("=" * 60)
    
    api_key = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à GEMINI_API_KEY: ").strip()
    
    if not api_key:
        print("\n‚ùå –ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω. –û—Ç–º–µ–Ω–∞.")
        return
    
    if not api_key.startswith("AIza"):
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'AIza'")
        confirm = input("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å–µ —Ä–∞–≤–Ω–æ? (y/n): ").strip().lower()
        if confirm != 'y':
            print("\n‚ùå –û—Ç–º–µ–Ω–∞.")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª .env
    lines = content.split("\n")
    updated_lines = []
    key_updated = False
    
    for line in lines:
        if line.startswith("GEMINI_API_KEY="):
            updated_lines.append(f"GEMINI_API_KEY={api_key}")
            key_updated = True
        else:
            updated_lines.append(line)
    
    if not key_updated:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –≤ –∫–æ–Ω–µ—Ü
        updated_lines.append(f"\nGEMINI_API_KEY={api_key}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(env_path, "w", encoding="utf-8") as f:
        f.write("\n".join(updated_lines))
    
    print("\n" + "=" * 60)
    print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print(f"üìÅ –§–∞–π–ª: {env_path}")
    print(f"üîë –ö–ª—é—á: {api_key[:20]}...")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
    print("2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ Gemini AI")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ HTML —Ç–µ—Å—Ç–µ—Ä–µ")
    print("=" * 60)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
    restart = input("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å? (y/n): ").strip().lower()
    if restart == 'y':
        print("\n‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä...")
        os.system("taskkill /F /IM python.exe /T >nul 2>&1")
        
        print("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä...")
        print("   –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   cd backend && uvicorn app.main:app --reload --host 0.0.0.0 --port 8000")
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    try:
        setup_gemini_api()
    except KeyboardInterrupt:
        print("\n\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

