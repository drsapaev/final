#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
"""
import requests
import json
from datetime import datetime

BASE_URL = "http://localhost:8000/api/v1"

def test_health():
    """–¢–µ—Å—Ç health endpoint"""
    print("üîç 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Health OK: {data}")
            return True
        else:
            print(f"   ‚ùå Health failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Health error: {e}")
        return False

def test_payment_providers_without_auth():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüè¶ 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)...")
    
    try:
        response = requests.get(f"{BASE_URL}/payments/providers")
        
        if response.status_code == 401:
            print("   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–∂–∏–¥–∞–µ–º–æ)")
            return True
        elif response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {len(data.get('providers', []))}")
            return True
        else:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_webhook_endpoints():
    """–¢–µ—Å—Ç webhook endpoints"""
    print("\nüîó 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook endpoints...")
    
    webhook_tests = [
        {
            "name": "Click webhook",
            "url": f"{BASE_URL}/payments/webhook/click",
            "data": {
                "click_trans_id": "test_123",
                "merchant_trans_id": "clinic_test_123",
                "amount": 50000,
                "action": 0,
                "error": 0,
                "sign_string": "test_signature"
            }
        },
        {
            "name": "Payme webhook",
            "url": f"{BASE_URL}/payments/webhook/payme",
            "data": {
                "method": "CheckPerformTransaction",
                "params": {
                    "account": {"order_id": "clinic_test_123"},
                    "amount": 50000
                },
                "id": 1
            }
        },
        {
            "name": "Kaspi webhook",
            "url": f"{BASE_URL}/payments/webhook/kaspi",
            "data": {
                "transaction_id": "kaspi_test_123",
                "order_id": "clinic_test_123",
                "amount": 2500,
                "currency": "KZT",
                "status": "SUCCESS",
                "signature": "test_signature"
            }
        }
    ]
    
    results = []
    
    for test in webhook_tests:
        print(f"   üß™ {test['name']}...")
        
        try:
            response = requests.post(test["url"], json=test["data"])
            
            if response.status_code == 200:
                result = response.json()
                print(f"      ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {str(result)[:100]}...")
                results.append(True)
            else:
                print(f"      ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å {response.status_code}: {response.text[:100]}...")
                results.append(True)  # Webhook –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –æ—à–∏–±–∫–æ–π, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append(False)
    
    return all(results)

def test_auth_endpoint():
    """–¢–µ—Å—Ç endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüîê 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
        response = requests.post(f"{BASE_URL}/auth/login", data={
            "username": "admin",
            "password": "admin123"
        })
        
        if response.status_code == 200:
            data = response.json()
            token = data.get("access_token")
            print(f"   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {token[:20] if token else 'No token'}...")
            return token
        else:
            print(f"   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

def test_payment_providers_with_auth(token):
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    print("\nüè¶ 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π)...")
    
    if not token:
        print("   ‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/payments/providers", headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            providers = data.get("providers", [])
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
            
            for provider in providers:
                name = provider.get("name", "Unknown")
                code = provider.get("code", "unknown")
                currencies = provider.get("supported_currencies", [])
                print(f"      üì± {name} ({code}) - {', '.join(currencies)}")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_payment_init_simple(token):
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    print("\nüí≥ 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞...")
    
    if not token:
        print("   ‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return False
    
    try:
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test_data = {
            "visit_id": 1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–∏–∑–∏—Ç —Å ID 1
            "provider": "click",
            "amount": 10000,
            "currency": "UZS",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
        }
        
        response = requests.post(f"{BASE_URL}/payments/init", json=test_data, headers=headers)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print(f"   ‚úÖ –ü–ª–∞—Ç–µ–∂ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
                print(f"      üí≥ Payment ID: {result.get('payment_id')}")
                print(f"      üîó Provider ID: {result.get('provider_payment_id')}")
                print(f"      üì± Status: {result.get('status')}")
                return result.get('payment_id')
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result.get('error_message')}")
                return None
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"      –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def run_simple_test():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    results = []
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    results.append(("Health endpoint", test_health()))
    results.append(("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–±–µ–∑ auth)", test_payment_providers_without_auth()))
    results.append(("Webhook endpoints", test_webhook_endpoints()))
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token = test_auth_endpoint()
    results.append(("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", token is not None))
    
    # –¢–µ—Å—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    if token:
        results.append(("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã (—Å auth)", test_payment_providers_with_auth(token)))
        payment_id = test_payment_init_simple(token)
        results.append(("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞", payment_id is not None))
    else:
        results.append(("–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã (—Å auth)", False))
        results.append(("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞", False))
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<25} {status}")
        if result:
            passed += 1
    
    print("=" * 50)
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed >= total * 0.8:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        status = "good"
    elif passed >= total * 0.6:
        print("‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        status = "ok"
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞.")
        status = "bad"
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    
    if status == "good":
        print("1. ‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("2. ‚úÖ Webhook endpoints —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")
        print("3. üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º")
        print("4. üß™ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    elif status == "ok":
        print("1. ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("2. üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã")
        print("3. üß™ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print("1. üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ backend")
        print("2. üóÑÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ë–î")
        print("3. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏")
    
    return status

if __name__ == "__main__":
    result = run_simple_test()
    
    if result == "good":
        print("\nüéä –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")
        print("Backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å frontend.")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ frontend.")
