#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

def test_frontend_logic_fixed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –§–†–û–ù–¢–ï–ù–î–ê")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getServiceCategoryByCode –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    def getServiceCategoryByCode(serviceCode):
        if not serviceCode:
            return None

        # –≠–ö–ì - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Ç–æ–ª—å–∫–æ –≠–ö–ì)
        if serviceCode == 'ECG01' or serviceCode == 'CARD_ECG' or 'ECG' in serviceCode or '–≠–ö–ì' in serviceCode:
            return 'ECG'

        # –≠—Ö–æ–ö–ì - –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞ –∏ –≠—Ö–æ–ö–ì)
        if serviceCode == 'K11' or serviceCode == 'CARD_ECHO' or 'ECHO' in serviceCode or '–≠—Ö–æ–ö–ì' in serviceCode:
            return 'ECHO'

        # –§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è (–¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è) - –∫–æ–¥—ã P01-P05
        if serviceCode and serviceCode.startswith('P') and serviceCode[1:].isdigit():
            return 'P'

        # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã - –∫–æ–¥—ã D_PROC01-D_PROC04
        if serviceCode and serviceCode.startswith('D_PROC') and serviceCode[6:].isdigit():
            return 'D_PROC'

        # –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã - –∫–æ–¥—ã C01-C12
        if serviceCode and serviceCode.startswith('C') and serviceCode[1:].isdigit():
            return 'C'

        # –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è - –∫–æ–¥—ã K01, K11
        if serviceCode and serviceCode.startswith('K') and serviceCode[1:].isdigit():
            return 'K'

        # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è - –∫–æ–¥—ã S01, S10
        if serviceCode and serviceCode.startswith('S') and serviceCode[1:].isdigit():
            return 'S'

        # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è - –∫–æ–¥—ã L01-L65
        if serviceCode and serviceCode.startswith('L') and serviceCode[1:].isdigit():
            return 'L'

        # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è - —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (D01)
        if serviceCode == 'D01':
            return 'D'

        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–æ–≤ (–ø—Ä–µ—Ñ–∏–∫—Å—ã) - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
        if serviceCode.startswith('CONS_CARD'):
            return 'K'  # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∞
        if serviceCode.startswith('CONS_DERM') or serviceCode.startswith('DERMA_'):
            return 'D'  # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è-–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è
        if serviceCode.startswith('CONS_DENT') or serviceCode.startswith('DENT_') or serviceCode.startswith('STOM_'):
            return 'S'  # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
        if serviceCode.startswith('LAB_'):
            return 'L'  # –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
        if serviceCode.startswith('COSM_'):
            return 'C'  # –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è
        if serviceCode.startswith('PHYSIO_'):
            return 'P'  # –§–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏—è
        if serviceCode.startswith('DERM_PROC_'):
            return 'D_PROC'  # –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏
        if serviceCode.startswith('CARD_') and 'ECG' not in serviceCode:
            return 'K'

        return None

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥ –∏–∑ API (services_by_group)
    services_by_group = {
        'procedures': [
            {'id': 100, 'name': '–î–∞—Ä—Å–æ–Ω–≤–∞–ª—å', 'service_code': 'P01', 'category_code': 'P'},
            {'id': 101, 'name': '–£–§–û —Ç–µ—Ä–∞–ø–∏—è', 'service_code': 'P02', 'category_code': 'P'},
            {'id': 102, 'name': '–î–∏–æ–¥–Ω–∞—è –º–∞—Å–∫–∞ –ª–∏—Ü–∞', 'service_code': 'P03', 'category_code': 'P'},
            {'id': 103, 'name': '–ë–∏–æ–ø—Ç—Ä–æ–Ω - —Å–≤–µ—Ç–æ—Ç–µ—Ä–∞–ø–∏—è', 'service_code': 'P04', 'category_code': 'P'},
            {'id': 104, 'name': '–≠–∫—Å–∏–º–µ—Ä –ª–∞–∑–µ—Ä', 'service_code': 'P05', 'category_code': 'P'},
            {'id': 120, 'name': '–ö—Ä–∏–æ–¥–µ—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ä–æ–¥–∞–≤–æ–∫', 'service_code': 'D_PROC01', 'category_code': 'D_PROC'},
            {'id': 121, 'name': '–ö—Ä–∏–æ–¥–µ—Å—Ç—Ä—É–∫—Ü–∏—è –ø–∞–ø–∏–ª–ª–æ–º', 'service_code': 'D_PROC02', 'category_code': 'D_PROC'},
            {'id': 122, 'name': '–ú–µ–∑–æ—Ç–µ—Ä–∞–ø–∏—è –∫–µ–ª–ª–æ–∏–¥–Ω—ã—Ö —Ä—É–±—Ü–æ–≤', 'service_code': 'D_PROC03', 'category_code': 'D_PROC'},
        ],
        'cosmetology': [
            {'id': 110, 'name': '–ü–ª–∞–∑–º–æ–ª–∏—Ñ—Ç–∏–Ω–≥ –ª–∏—Ü–∞', 'service_code': 'C01', 'category_code': 'C'},
            {'id': 111, 'name': '–ü–ª–∞–∑–º–æ–ª–∏—Ñ—Ç–∏–Ω–≥ –≤–æ–ª–æ—Å', 'service_code': 'C02', 'category_code': 'C'},
            {'id': 112, 'name': '–ú–µ–∑–æ—Ç–µ—Ä–∞–ø–∏—è', 'service_code': 'C03', 'category_code': 'C'},
            {'id': 113, 'name': '–ß–∏—Å—Ç–∫–∞ –ª–∏—Ü–∞', 'service_code': 'C04', 'category_code': 'C'},
            {'id': 114, 'name': '–ë–µ–∑–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –±–ª–µ—Ñ–∞—Ä–æ–ø–ª–∞—Å—Ç–∏–∫–∞', 'service_code': 'C05', 'category_code': 'C'},
            {'id': 115, 'name': '–£–¥–∞–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤–∏–∫', 'service_code': 'C06', 'category_code': 'C'},
            {'id': 116, 'name': '–õ–∞–∑–µ—Ä–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ç—É–∞–∂ –∏ —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫', 'service_code': 'C07', 'category_code': 'C'},
            {'id': 117, 'name': '–ö–∞—Ä–±–æ–Ω–æ–≤—ã–π –ø–∏–ª–∏–Ω–≥', 'service_code': 'C08', 'category_code': 'C'},
        ],
        'dermatology': [
            {'id': 1, 'name': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞-–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞', 'service_code': 'D01', 'category_code': 'D'},
        ]
    }
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –≤ –∫–æ–¥—ã
    def convertServiceIdsToCodes(serviceIds, services):
        serviceCodesFromIds = []
        for serviceId in serviceIds:
            if isinstance(serviceId, str):
                serviceId = int(serviceId)
            if services and isinstance(services, dict):
                # –ò—â–µ–º —É—Å–ª—É–≥—É –ø–æ ID –≤–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–∞—Ö
                for groupName in services:
                    groupServices = services[groupName]
                    if isinstance(groupServices, list):
                        service = next((s for s in groupServices if s['id'] == serviceId), None)
                        if service and service.get('service_code'):
                            serviceCodesFromIds.append(service['service_code'])
                            break
        return serviceCodesFromIds
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π
    test_appointments = [
        {
            'id': 1,
            'name': '–ó–∞–ø–∏—Å—å —Å —Ñ–∏–∑–∏–æ—Ç–µ—Ä–∞–ø–∏–µ–π',
            'services': [100, 101],  # P01, P02
            'service_codes': [],
            'department': 'cardiology'
        },
        {
            'id': 2,
            'name': '–ó–∞–ø–∏—Å—å —Å –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–µ–π',
            'services': [110, 111],  # C01, C02
            'service_codes': [],
            'department': 'dermatology'
        },
        {
            'id': 3,
            'name': '–ó–∞–ø–∏—Å—å —Å –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏',
            'services': [120, 121],  # D_PROC01, D_PROC02
            'service_codes': [],
            'department': 'dermatology'
        },
        {
            'id': 4,
            'name': '–ó–∞–ø–∏—Å—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞',
            'services': [1],  # D01
            'service_codes': [],
            'department': 'dermatology'
        },
        {
            'id': 5,
            'name': '–ó–∞–ø–∏—Å—å —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏',
            'services': [100, 110, 120],  # P01, C01, D_PROC01
            'service_codes': [],
            'department': 'cardiology'
        }
    ]
    
    departmentCategoryMapping = {
        'cardio': ['K', 'ECHO'],
        'echokg': ['ECG'],
        'derma': ['D'],
        'dental': ['S'],
        'lab': ['L'],
        'procedures': ['P', 'C', 'D_PROC']
    }
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–ò–°–ï–ô:")
    print("-" * 40)
    
    for appointment in test_appointments:
        print(f"\nüìã {appointment['name']}:")
        print(f"  –£—Å–ª—É–≥–∏ (ID): {appointment['services']}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ –∫–æ–¥—ã
        serviceCodesFromIds = convertServiceIdsToCodes(appointment['services'], services_by_group)
        allServiceCodes = appointment['service_codes'] + serviceCodesFromIds
        
        print(f"  –ö–æ–¥—ã —É—Å–ª—É–≥: {allServiceCodes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
        for dept, categories in departmentCategoryMapping.items():
            matches = any(getServiceCategoryByCode(code) in categories for code in allServiceCodes)
            if matches:
                print(f"  ‚úÖ –ü–æ–ø–∞–¥–∞–µ—Ç –≤ –≤–∫–ª–∞–¥–∫—É '{dept}'")
            else:
                print(f"  ‚ùå –ù–ï –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –≤–∫–ª–∞–¥–∫—É '{dept}'")
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è
    procedures_codes = ['P01', 'P02', 'P03', 'P04', 'P05', 'C01', 'C02', 'C03', 'C04', 'C05', 'C06', 'C07', 'C08', 'D_PROC01', 'D_PROC02', 'D_PROC03']
    
    print("–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –≤–∫–ª–∞–¥–∫—É 'procedures':")
    for code in procedures_codes:
        category = getServiceCategoryByCode(code)
        if category in ['P', 'C', 'D_PROC']:
            print(f"  ‚úÖ {code} ‚Üí {category} ‚Üí procedures")
        else:
            print(f"  ‚ùå {code} ‚Üí {category} ‚Üí –ù–ï procedures")
    
    print("\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ –≤–∫–ª–∞–¥–∫—É 'derma':")
    derma_codes = ['D01']
    for code in derma_codes:
        category = getServiceCategoryByCode(code)
        if category == 'D':
            print(f"  ‚úÖ {code} ‚Üí {category} ‚Üí derma")
        else:
            print(f"  ‚ùå {code} ‚Üí {category} ‚Üí –ù–ï derma")

if __name__ == "__main__":
    test_frontend_logic_fixed()
