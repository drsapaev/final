"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ú–ö–ë-10 –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
"""
import os
import sys
import asyncio
import json
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from backend.app.services.ai.ai_manager import get_ai_manager, AIProviderType

async def test_improved_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    ai_manager = get_ai_manager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    available_providers = ai_manager.get_available_providers()
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {available_providers}")
    print(f"üìã Default –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {ai_manager.default_provider}")
    
    # –¢–µ—Å—Ç 1: –ú–ö–ë-10 –ø–æ–¥—Å–∫–∞–∑–∫–∏ —á–µ—Ä–µ–∑ Mock
    print(f"\nüîç –¢–ï–°–¢ 1: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10 (Mock)")
    symptoms = ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–æ—à–Ω–æ—Ç–∞", "—Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å"]
    diagnosis = "–ú–∏–≥—Ä–µ–Ω—å"
    
    try:
        result = await ai_manager.suggest_icd10(
            symptoms=symptoms,
            diagnosis=diagnosis,
            provider_type=AIProviderType.MOCK
        )
        
        print(f"üìù –°–∏–º–ø—Ç–æ–º—ã: {symptoms}")
        print(f"üìù –î–∏–∞–≥–Ω–æ–∑: {diagnosis}")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
        
        if isinstance(result, list) and len(result) > 0:
            print("‚úÖ –ú–ö–ë-10 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ú–ö–ë-10 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ú–ö–ë-10: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ Mock
    print(f"\nüîç –¢–ï–°–¢ 2: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (Mock)")
    lab_results = [
        {
            "name": "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω",
            "value": "120",
            "unit": "–≥/–ª",
            "reference": "120-160"
        },
        {
            "name": "–õ–µ–π–∫–æ—Ü–∏—Ç—ã",
            "value": "15.2",
            "unit": "√ó10‚Åπ/–ª",
            "reference": "4.0-9.0"
        },
        {
            "name": "–°–û–≠",
            "value": "25",
            "unit": "–º–º/—á",
            "reference": "2-15"
        }
    ]
    
    patient_info = {"age": 45, "gender": "female"}
    
    try:
        result = await ai_manager.interpret_lab_results(
            results=lab_results,
            patient_info=patient_info,
            provider_type=AIProviderType.MOCK
        )
        
        print(f"üìù –ê–Ω–∞–ª–∏–∑—ã: {len(lab_results)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"üìù –ü–∞—Ü–∏–µ–Ω—Ç: {patient_info}")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")
        
        if isinstance(result, dict) and "summary" in result:
            print("‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 3: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    print(f"\nüîç –¢–ï–°–¢ 3: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    
    try:
        mock_provider = ai_manager.get_provider(AIProviderType.MOCK)
        
        if mock_provider:
            print("‚úÖ Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–ª—É—á–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ú–ö–ë-10 –Ω–∞–ø—Ä—è–º—É—é
            icd_result = await mock_provider.suggest_icd10(symptoms, diagnosis)
            print(f"üìä –ü—Ä—è–º–æ–π –ú–ö–ë-10: {json.dumps(icd_result, ensure_ascii=False, indent=2)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–ø—Ä—è–º—É—é
            lab_result = await mock_provider.interpret_lab_results(lab_results, patient_info)
            print(f"üìä –ü—Ä—è–º—ã–µ –∞–Ω–∞–ª–∏–∑—ã: {json.dumps(lab_result, ensure_ascii=False, indent=2)}")
        else:
            print("‚ùå Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_improved_functions())
