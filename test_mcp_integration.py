"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import asyncio
import json
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from backend.app.services.mcp.mcp_manager import get_mcp_manager
from backend.app.services.mcp.mcp_client import get_mcp_client


async def test_mcp_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è MCP —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è MCP —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç
        client = await get_mcp_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        health = await client.health_check()
        
        print(f"‚úÖ –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {health.get('overall', 'unknown')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
        for server_name, status in health.get('servers', {}).items():
            status_icon = "‚úÖ" if status['status'] == 'healthy' else "‚ùå"
            print(f"  {status_icon} {server_name}: {status['status']}")
            if 'tools_count' in status:
                print(f"      –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {status['tools_count']}")
            if 'resources_count' in status:
                print(f"      –†–µ—Å—É—Ä—Å–æ–≤: {status['resources_count']}")
        
        return health.get('overall') == 'healthy'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")
        return False


async def test_complaint_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ MCP"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ MCP...")
    
    test_complaints = [
        {
            "complaint": "–ë–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞ —É–∂–µ 3 –¥–Ω—è, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏—Å–∫–æ–≤. –£—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∫–ª–æ–Ω–µ.",
            "patient_info": {"age": 35, "gender": "female"}
        },
        {
            "complaint": "–û–¥—ã—à–∫–∞ –ø—Ä–∏ –ø–æ–¥—ä–µ–º–µ –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ –Ω–∞ 2 —ç—Ç–∞–∂, —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, –æ—Ç–µ–∫–∏ –Ω–æ–≥ –∫ –≤–µ—á–µ—Ä—É.",
            "patient_info": {"age": 65, "gender": "male"}
        },
        {
            "complaint": "–í—ã—Å—ã–ø–∞–Ω–∏—è –Ω–∞ –∫–æ–∂–µ –ª–∏—Ü–∞, –∑—É–¥, –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ. –ü–æ—è–≤–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∫–æ—Å–º–µ—Ç–∏–∫–∏.",
            "patient_info": {"age": 25, "gender": "female"}
        }
    ]
    
    try:
        client = await get_mcp_client()
        results = []
        
        for i, test_case in enumerate(test_complaints, 1):
            print(f"\n  –¢–µ—Å—Ç {i}: {test_case['complaint'][:50]}...")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∂–∞–ª–æ–±—ã
            validation = await client.validate_complaint(test_case['complaint'])
            print(f"    –í–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ' if validation.get('valid') else '‚ùå'} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {validation.get('confidence', 0)})")
            
            # –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±—ã
            analysis = await client.analyze_complaint(
                complaint=test_case['complaint'],
                patient_info=test_case['patient_info'],
                urgency_assessment=True
            )
            
            if analysis.get('status') == 'success':
                data = analysis.get('data', {})
                print(f"    ‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if 'data' in data:
                    result_data = data['data']
                    if 'preliminary_diagnosis' in result_data:
                        print(f"    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã: {len(result_data['preliminary_diagnosis'])}")
                    if 'urgency' in result_data:
                        print(f"    –°—Ä–æ—á–Ω–æ—Å—Ç—å: {result_data['urgency']}")
                    if 'examinations' in result_data:
                        print(f"    –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(result_data['examinations'])}")
                
                results.append({
                    'test': i,
                    'success': True,
                    'data': data
                })
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis.get('error', 'unknown')}")
                results.append({
                    'test': i,
                    'success': False,
                    'error': analysis.get('error')
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('mcp_test_results_complaint.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        success_count = sum(1 for r in results if r['success'])
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        
        return success_count == len(results)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∞–ª–æ–±: {str(e)}")
        return False


async def test_icd10_suggestions():
    """–¢–µ—Å—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ú–ö–ë-10 —á–µ—Ä–µ–∑ MCP"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ú–ö–ë-10 —á–µ—Ä–µ–∑ MCP...")
    
    test_cases = [
        {
            "symptoms": ["–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "—Ç–æ—à–Ω–æ—Ç–∞", "—Å–≤–µ—Ç–æ–±–æ—è–∑–Ω—å"],
            "diagnosis": "–ú–∏–≥—Ä–µ–Ω—å"
        },
        {
            "symptoms": ["–∫–∞—à–µ–ª—å", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–±–æ–ª—å –≤ –≥—Ä—É–¥–∏"],
            "diagnosis": "–ü–Ω–µ–≤–º–æ–Ω–∏—è"
        },
        {
            "symptoms": ["–±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ", "–∏–∑–∂–æ–≥–∞", "—Ç–æ—à–Ω–æ—Ç–∞"],
            "diagnosis": "–ì–∞—Å—Ç—Ä–∏—Ç"
        }
    ]
    
    try:
        client = await get_mcp_client()
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\n  –¢–µ—Å—Ç {i}: {test_case['diagnosis']}")
            print(f"    –°–∏–º–ø—Ç–æ–º—ã: {', '.join(test_case['symptoms'])}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            result = await client.suggest_icd10(
                symptoms=test_case['symptoms'],
                diagnosis=test_case['diagnosis'],
                max_suggestions=5
            )
            
            if result.get('status') == 'success':
                suggestions = result.get('data', {}).get('suggestions', [])
                print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {len(suggestions)}")
                
                for j, suggestion in enumerate(suggestions[:3], 1):
                    print(f"      {j}. {suggestion.get('code', 'N/A')}: {suggestion.get('description', 'N/A')}")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'unknown')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–ö–ë-10: {str(e)}")
        return False


async def test_lab_interpretation():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ MCP"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ MCP...")
    
    test_results = [
        {"test_name": "glucose", "value": 7.2, "unit": "–º–º–æ–ª—å/–ª"},
        {"test_name": "hemoglobin", "value": 110, "unit": "–≥/–ª"},
        {"test_name": "alt", "value": 65, "unit": "–ï–¥/–ª"},
        {"test_name": "creatinine", "value": 150, "unit": "–º–∫–º–æ–ª—å/–ª"}
    ]
    
    try:
        client = await get_mcp_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print("\n  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
        critical_check = await client.check_critical_lab_values(test_results)
        
        if critical_check.get('status') == 'success':
            data = critical_check.get('data', {})
            has_critical = data.get('has_critical', False)
            print(f"    {'‚ö†Ô∏è' if has_critical else '‚úÖ'} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã' if has_critical else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}")
            
            if has_critical:
                for critical in data.get('critical_values', []):
                    print(f"      ‚ùó {critical['test']}: {critical['value']} {critical['unit']} ({critical['type']})")
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n  –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        interpretation = await client.interpret_lab_results(
            results=test_results,
            patient_info={"age": 45, "gender": "male"},
            include_recommendations=True
        )
        
        if interpretation.get('status') == 'success':
            data = interpretation.get('data', {})
            summary = data.get('summary', {})
            
            print(f"    ‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            print(f"    –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary.get('total_tests', 0)}")
            print(f"    –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π: {summary.get('abnormal_count', 0)}")
            print(f"    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {summary.get('critical_count', 0)}")
            print(f"    –û—Ü–µ–Ω–∫–∞: {summary.get('overall_assessment', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = data.get('recommendations', [])
            if recommendations:
                print("    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in recommendations[:3]:
                    print(f"      ‚Ä¢ {rec}")
        else:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {interpretation.get('error', 'unknown')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: {str(e)}")
        return False


async def test_mcp_metrics():
    """–¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ MCP"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ MCP...")
    
    try:
        manager = await get_mcp_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = manager.get_metrics()
        
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ MCP:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics['requests_total']}")
        print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {metrics['requests_success']}")
        print(f"  –û—à–∏–±–æ–∫: {metrics['requests_failed']}")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
        if metrics['server_stats']:
            print("\n  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:")
            for server, stats in metrics['server_stats'].items():
                print(f"    {server}:")
                print(f"      –ó–∞–ø—Ä–æ—Å–æ–≤: {stats.get('requests', 0)}")
                print(f"      –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
                print(f"      –°—Ä. –≤—Ä–µ–º—è: {stats.get('avg_response_time', 0):.3f}—Å")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        if metrics['config']:
            print("\n  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            print(f"    MCP –≤–∫–ª—é—á–µ–Ω: {metrics['config'].get('enabled', False)}")
            print(f"    Fallback: {metrics['config'].get('fallback_to_direct', False)}")
            print(f"    –¢–∞–π–º–∞—É—Ç: {metrics['config'].get('request_timeout', 0)}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {str(e)}")
        return False


async def test_batch_processing():
    """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MCP"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ MCP...")
    
    try:
        manager = await get_mcp_manager()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        batch_requests = [
            {
                "server": "complaint",
                "method": "tool/validate_complaint",
                "params": {"complaint": "–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"}
            },
            {
                "server": "icd10",
                "method": "resource/common_icd10_codes",
                "params": {"category": "neurological"}
            },
            {
                "server": "lab",
                "method": "resource/normal_ranges",
                "params": {"test_name": "glucose"}
            }
        ]
        
        print(f"  –û—Ç–ø—Ä–∞–≤–∫–∞ {len(batch_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        results = await manager.batch_execute(batch_requests, parallel=True)
        
        success_count = sum(1 for r in results if r.get('status') == 'success')
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{len(results)}")
        
        for i, result in enumerate(results):
            status_icon = "‚úÖ" if result.get('status') == 'success' else "‚ùå"
            print(f"    {status_icon} –ó–∞–ø—Ä–æ—Å {i+1}: {result.get('status', 'unknown')}")
        
        return success_count == len(results)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    results = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", test_mcp_health),
        ("–ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±", test_complaint_analysis),
        ("–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10", test_icd10_suggestions),
        ("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã", test_lab_interpretation),
        ("–ú–µ—Ç—Ä–∏–∫–∏ MCP", test_mcp_metrics),
        ("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", test_batch_processing)
    ]
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results[test_name] = result
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    for test_name, success in results.items():
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"{status_icon} {test_name}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    print("\n" + "-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print(f"‚ö†Ô∏è {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('mcp_test_report.json', 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'results': results,
            'summary': {
                'total': total_count,
                'success': success_count,
                'failed': total_count - success_count,
                'success_rate': f"{(success_count/total_count)*100:.1f}%"
            }
        }, f, ensure_ascii=False, indent=2)
    
    print("\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ mcp_test_report.json")


if __name__ == "__main__":
    asyncio.run(main())
