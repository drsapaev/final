"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP API endpoints —á–µ—Ä–µ–∑ HTTP
"""
import requests
import json
import time

BASE_URL = "http://localhost:8000/api/v1"

def test_mcp_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è MCP —á–µ—Ä–µ–∑ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP Health endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/mcp/health", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ MCP Health: {data.get('overall', 'unknown')}")
            
            if 'servers' in data:
                for server, status in data['servers'].items():
                    print(f"  {server}: {status.get('status', 'unknown')}")
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_mcp_status():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ MCP —á–µ—Ä–µ–∑ API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP Status endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/mcp/status", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ MCP Status: {data.get('healthy', False)}")
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_mcp_capabilities():
    """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π MCP —á–µ—Ä–µ–∑ API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP Capabilities endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/mcp/capabilities", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if 'servers' in data:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(data['servers'])}")
                for server_name in data['servers'].keys():
                    print(f"  - {server_name}")
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_complaint_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∂–∞–ª–æ–± —á–µ—Ä–µ–∑ API...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
        response = requests.post(
            f"{BASE_URL}/mcp/complaint/validate",
            params={"complaint": "–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"},
            timeout=10
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 401:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (401 Unauthorized)")
            return True
        elif response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
            return True
        else:
            print(f"‚ùå Unexpected status: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_api_docs():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    try:
        response = requests.get("http://localhost:8000/docs", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Connection error: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("=" * 60)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP API ENDPOINTS")
    print("=" * 60)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    tests = [
        ("API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_api_docs),
        ("MCP Health", test_mcp_health),
        ("MCP Status", test_mcp_status),
        ("MCP Capabilities", test_mcp_capabilities),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –∂–∞–ª–æ–±", test_complaint_validation),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ API –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    for test_name, success in results.items():
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"{status_icon} {test_name}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    print("\n" + "-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í–°–ï API –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ MCP endpoints:")
        print("  GET  /api/v1/mcp/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        print("  GET  /api/v1/mcp/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("  GET  /api/v1/mcp/metrics - –ú–µ—Ç—Ä–∏–∫–∏")
        print("  GET  /api/v1/mcp/capabilities - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        print("  POST /api/v1/mcp/complaint/analyze - –ê–Ω–∞–ª–∏–∑ –∂–∞–ª–æ–±")
        print("  POST /api/v1/mcp/icd10/suggest - –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ú–ö–ë-10")
        print("  POST /api/v1/mcp/lab/interpret - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
        print("  POST /api/v1/mcp/imaging/analyze - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("\nüåê API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    else:
        print(f"‚ö†Ô∏è {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
