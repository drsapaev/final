"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini API —Å –∑–∞–≥—Ä—É–∑–∫–æ–π .env
"""
import google.generativeai as genai
import os
from dotenv import load_dotenv

def test_gemini_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini API...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    load_dotenv('.env')
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
    genai.configure(api_key=api_key)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        models = genai.list_models()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
        models_list = list(models)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_list)}")
        
        gemini_models = []
        all_models = []
        for model in models_list:
            all_models.append(model.name)
            if 'gemini' in model.name.lower():
                gemini_models.append(model.name)
                print(f"  - {model.name}")
        
        if not gemini_models:
            print("‚ùå –ú–æ–¥–µ–ª–∏ Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"\nüìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ({len(all_models)}):")
            for model_name in all_models[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  - {model_name}")
            if len(all_models) > 10:
                print(f"  ... –∏ –µ—â–µ {len(all_models) - 10} –º–æ–¥–µ–ª–µ–π")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(gemini_models)} –º–æ–¥–µ–ª–µ–π Gemini...")
        
        working_model = None
        for model_name in gemini_models:
            try:
                print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
                model = genai.GenerativeModel(model_name)
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                response = model.generate_content("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
                print(f"  ‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.text[:50]}...")
                
                # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                working_model = model_name
                print(f"  üéØ –†–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_name}")
                break
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        if working_model:
            print(f"\nüéâ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {working_model}")
        else:
            print("\n‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {str(e)}")

if __name__ == "__main__":
    test_gemini_models()