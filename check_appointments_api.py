#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ API
"""

import requests
import json

BASE_URL = "http://localhost:8000/api/v1"
USERNAME = "registrar"
PASSWORD = "registrar123"

def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    login_url = f"{BASE_URL}/auth/minimal-login"
    credentials = {
        "username": USERNAME,
        "password": PASSWORD
    }
    try:
        response = requests.post(login_url, json=credentials)
        response.raise_for_status()
        token = response.json().get("access_token")
        if token:
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:30]}...")
            return token
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def check_appointments_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ API"""
    token = get_auth_token()
    if not token:
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ API...")
    queues_url = f"{BASE_URL}/registrar/queues/today"
    
    try:
        response = requests.get(queues_url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if 'queues' in data:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {len(data['queues'])}")
            
            for queue in data['queues']:
                specialty = queue.get('specialty', 'unknown')
                entries = queue.get('entries', [])
                print(f"\nüè∑Ô∏è –û—á–µ—Ä–µ–¥—å '{specialty}': {len(entries)} –∑–∞–ø–∏—Å–µ–π")
                
                for i, entry in enumerate(entries[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                    print(f"  –ó–∞–ø–∏—Å—å {i+1}:")
                    print(f"    ID: {entry.get('id')}")
                    print(f"    –ü–∞—Ü–∏–µ–Ω—Ç: {entry.get('patient_fio')}")
                    print(f"    –£—Å–ª—É–≥–∏ (ID): {entry.get('services', [])}")
                    print(f"    –ö–æ–¥—ã —É—Å–ª—É–≥: {entry.get('service_codes', [])}")
                    print(f"    –°—Ç–∞—Ç—É—Å: {entry.get('status')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
                    services = entry.get('services', [])
                    if services:
                        print(f"    üîç –ê–Ω–∞–ª–∏–∑ —É—Å–ª—É–≥:")
                        for service_id in services:
                            print(f"      ID {service_id}: –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")

def check_services_mapping():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —É—Å–ª—É–≥"""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —É—Å–ª—É–≥...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª—É–≥–∏ –∏–∑ API
    token = get_auth_token()
    if not token:
        return
        
    headers = {"Authorization": f"Bearer {token}"}
    services_url = f"{BASE_URL}/registrar/services"
    
    try:
        response = requests.get(services_url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        services_by_group = data.get('services_by_group', {})
        
        print(f"üìä –ì—Ä—É–ø–ø—ã —É—Å–ª—É–≥: {list(services_by_group.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        procedures_group = services_by_group.get('procedures', [])
        print(f"\nüéØ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã ({len(procedures_group)} —É—Å–ª—É–≥):")
        
        for service in procedures_group:
            service_id = service.get('id')
            service_code = service.get('service_code')
            category_code = service.get('category_code')
            name = service.get('name')
            print(f"  ID {service_id}: {service_code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_code})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—é
        derma_group = services_by_group.get('dermatology', [])
        print(f"\nüë®‚Äç‚öïÔ∏è –î–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è ({len(derma_group)} —É—Å–ª—É–≥):")
        
        for service in derma_group:
            service_id = service.get('id')
            service_code = service.get('service_code')
            category_code = service.get('category_code')
            name = service.get('name')
            print(f"  ID {service_id}: {service_code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_code})")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")

if __name__ == "__main__":
    check_appointments_data()
    check_services_mapping()
