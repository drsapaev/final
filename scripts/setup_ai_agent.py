#!/usr/bin/env python3
"""
ü§ñ –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import json
from pathlib import Path

def setup_cursor_rules():
    """–°–æ–∑–¥–∞—Ç—å .cursorrules —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤"""
    rules_content = """# ü§ñ –ü–†–ê–í–ò–õ–ê –î–õ–Ø –ò–ò-–ê–ì–ï–ù–¢–û–í –í CURSOR

## üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ß–ò–¢–ê–¢–¨ –ü–ï–†–ï–î –õ–Æ–ë–û–ô –†–ê–ë–û–¢–û–ô!

### üìñ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:
- `docs/AUTHENTICATION_SYSTEM_FINAL_GUIDE.md` - –ü–û–õ–ù–û–ï —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–∏—Å—Ç–µ–º–µ
- `docs/AUTHENTICATION_LAWS_FOR_AI.md` - –ó–ê–ö–û–ù–´ –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
- `docs/ROLE_SYSTEM_PROTECTION.md` - –ü—Ä–∞–≤–∏–ª–∞ –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã

### üö® –ê–ë–°–û–õ–Æ–¢–ù–´–ï –ó–ê–ü–†–ï–¢–´ (–ù–ò–ö–û–ì–î–ê –ù–ï –ù–ê–†–£–®–ê–¢–¨!):
1. **–ù–ï –ù–ê–†–£–®–ê–¢–¨** –±–ª–æ–∫–∏—Ä—É—é—â–∏–π 2FA —Ñ–ª–æ—É - —Ç–æ–∫–µ–Ω—ã –≤—ã–¥–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
2. **–ù–ï –î–£–ë–õ–ò–†–û–í–ê–¢–¨** –º–æ–¥–µ–ª–∏ —Ä–æ–ª–µ–π - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û `app/models/role_permission.py`
3. **–ù–ï –°–ú–ï–®–ò–í–ê–¢–¨** —Å—Ö–µ–º—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π - —Ç–æ–ª—å–∫–æ argon2 –¥–ª—è –Ω–æ–≤—ã—Ö
4. **–ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨** —Å—Ç–∞—Ä—É—é —Ñ–æ—Ä–º—É `Login.jsx` - —Ç–æ–ª—å–∫–æ `LoginFormStyled.jsx`
5. **–ù–ï –£–î–ê–õ–Ø–¢–¨** –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (admin, registrar, doctor, cardio, derma, dentist)

### ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
1. **–ß–ò–¢–ê–¢–¨** `docs/AUTHENTICATION_LAWS_FOR_AI.md` –ø–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
2. **–ó–ê–ü–£–°–ö–ê–¢–¨** —Ç–µ—Å—Ç—ã: `python test_role_routing.py` –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π
3. **–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨** —Ç–æ–ª—å–∫–æ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ `role_permission.py`
4. **–°–õ–ï–î–û–í–ê–¢–¨** –±–ª–æ–∫–∏—Ä—É—é—â–µ–º—É 2FA —Ñ–ª–æ—É: login ‚Üí pending_token ‚Üí verify ‚Üí access_token

**–ü–û–ú–ù–ò–¢–ï: –õ—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å, —á–µ–º —Å–ª–æ–º–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!** üõ°Ô∏è
"""
    
    with open('.cursorrules', 'w', encoding='utf-8') as f:
        f.write(rules_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω .cursorrules —Ñ–∞–π–ª")

def setup_git_hooks():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å git —Ö—É–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª"""
    hooks_dir = Path('.git/hooks')
    if not hooks_dir.exists():
        print("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .git/hooks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.")
        return
    
    # Pre-commit hook
    pre_commit_content = """#!/bin/bash
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
cd backend
python test_role_routing.py
if [ $? -ne 0 ]; then
    echo "‚ùå –¢–µ—Å—Ç—ã —Ä–æ–ª–µ–π –Ω–µ –ø—Ä–æ—à–ª–∏! –ö–æ–º–º–∏—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω."
    echo "üìñ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ: docs/AUTHENTICATION_LAWS_FOR_AI.md"
    exit 1
fi
echo "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–±–ª—é–¥–µ–Ω—ã. –ö–æ–º–º–∏—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω."
"""
    
    pre_commit_path = hooks_dir / 'pre-commit'
    with open(pre_commit_path, 'w', encoding='utf-8') as f:
        f.write(pre_commit_content)
    
    # –°–¥–µ–ª–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (Unix)
    if os.name != 'nt':
        os.chmod(pre_commit_path, 0o755)
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω pre-commit hook")

def setup_vscode_settings():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å VS Code settings –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    vscode_dir = Path('.vscode')
    vscode_dir.mkdir(exist_ok=True)
    
    settings = {
        "files.associations": {
            ".cursorrules": "markdown"
        },
        "files.watcherExclude": {
            "docs/AUTHENTICATION_LAWS_FOR_AI.md": False
        },
        "editor.rulers": [80, 120],
        "python.defaultInterpreterPath": "./backend/.venv/bin/python",
        "python.testing.pytestEnabled": True,
        "python.testing.pytestArgs": ["backend/tests"]
    }
    
    settings_path = vscode_dir / 'settings.json'
    with open(settings_path, 'w', encoding='utf-8') as f:
        json.dump(settings, f, indent=2)
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã VS Code settings")

def create_reminder_script():
    """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö"""
    script_content = """#!/usr/bin/env python3
import os
import sys

def show_auth_reminder():
    print("\\n" + "="*60)
    print("üö® –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ü–†–ê–í–ò–õ–ê–• –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("="*60)
    print("üìñ –ü–µ—Ä–µ–¥ —Ä–∞–±–æ—Ç–æ–π –ø—Ä–æ—á–∏—Ç–∞—Ç—å:")
    print("   - docs/AUTHENTICATION_LAWS_FOR_AI.md")
    print("   - docs/AUTHENTICATION_SYSTEM_FINAL_GUIDE.md")
    print("\\nüß™ –ü–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
    print("   cd backend && python test_role_routing.py")
    print("\\nüõ°Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:")
    print("   - –ù–ï –Ω–∞—Ä—É—à–∞—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–∏–π 2FA —Ñ–ª–æ—É")
    print("   - –ù–ï –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ —Ä–æ–ª–µ–π")
    print("   - –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ —Ç–æ–ª—å–∫–æ LoginFormStyled.jsx")
    print("="*60 + "\\n")

if __name__ == "__main__":
    show_auth_reminder()
"""
    
    scripts_dir = Path('scripts')
    scripts_dir.mkdir(exist_ok=True)
    
    reminder_path = scripts_dir / 'remind_auth_rules.py'
    with open(reminder_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    # –°–¥–µ–ª–∞—Ç—å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º (Unix)
    if os.name != 'nt':
        os.chmod(reminder_path, 0o755)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

def setup_package_json_scripts():
    """–î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json"""
    package_json_path = Path('package.json')
    
    if package_json_path.exists():
        with open(package_json_path, 'r', encoding='utf-8') as f:
            package_data = json.load(f)
    else:
        package_data = {"name": "clinic-system", "version": "1.0.0"}
    
    if 'scripts' not in package_data:
        package_data['scripts'] = {}
    
    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    new_scripts = {
        "check-auth": "cd backend && python test_role_routing.py",
        "check-system": "cd backend && python check_system_integrity.py",
        "remind-rules": "python scripts/remind_auth_rules.py",
        "pre-commit": "npm run check-auth && npm run check-system"
    }
    
    package_data['scripts'].update(new_scripts)
    
    with open(package_json_path, 'w', encoding='utf-8') as f:
        json.dump(package_data, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω package.json —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞...")
    print("="*50)
    
    try:
        setup_cursor_rules()
        setup_git_hooks()
        setup_vscode_settings()
        create_reminder_script()
        setup_package_json_scripts()
        
        print("\\n" + "="*50)
        print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*50)
        print("\\nüìã –ß—Ç–æ –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
        print("   - .cursorrules - –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è Cursor IDE")
        print("   - Git hooks - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("   - VS Code settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
        print("   - –°–∫—Ä–∏–ø—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - scripts/remind_auth_rules.py")
        print("   - NPM —Å–∫—Ä–∏–ø—Ç—ã - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("\\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å IDE")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å: npm run remind-rules")
        print("   3. –ü—Ä–æ—á–∏—Ç–∞—Ç—å: docs/AUTHENTICATION_LAWS_FOR_AI.md")
        print("\\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ê –û–¢ –ù–ê–†–£–®–ï–ù–ò–ô!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

