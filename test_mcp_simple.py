"""
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP API –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
import requests
import json

BASE_URL = "http://localhost:8000/api/v1"

def test_api_docs():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    try:
        response = requests.get("http://localhost:8000/docs", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("üìñ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_openapi_schema():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAPI —Å—Ö–µ–º—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAPI —Å—Ö–µ–º—ã...")
    
    try:
        response = requests.get("http://localhost:8000/openapi.json", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            schema = response.json()
            print("‚úÖ OpenAPI —Å—Ö–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ MCP endpoints
            paths = schema.get("paths", {})
            mcp_paths = [path for path in paths.keys() if "mcp" in path.lower()]
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ MCP endpoints: {len(mcp_paths)}")
            for path in mcp_paths[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  - {path}")
            
            if len(mcp_paths) > 5:
                print(f"  ... –∏ –µ—â–µ {len(mcp_paths) - 5}")
            
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_server_health():
    """–¢–µ—Å—Ç –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        response = requests.get("http://localhost:8000/api/v1/health", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"  –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            return True
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_mcp_endpoints_exist():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è MCP endpoints"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è MCP endpoints...")
    
    try:
        response = requests.get("http://localhost:8000/openapi.json", timeout=10)
        
        if response.status_code == 200:
            schema = response.json()
            paths = schema.get("paths", {})
            
            # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö MCP endpoints
            expected_endpoints = [
                "/api/v1/mcp/health",
                "/api/v1/mcp/status", 
                "/api/v1/mcp/metrics",
                "/api/v1/mcp/capabilities",
                "/api/v1/mcp/complaint/analyze",
                "/api/v1/mcp/complaint/validate",
                "/api/v1/mcp/icd10/suggest",
                "/api/v1/mcp/lab/interpret",
                "/api/v1/mcp/imaging/analyze"
            ]
            
            found_endpoints = []
            missing_endpoints = []
            
            for endpoint in expected_endpoints:
                if endpoint in paths:
                    found_endpoints.append(endpoint)
                else:
                    missing_endpoints.append(endpoint)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ endpoints: {len(found_endpoints)}/{len(expected_endpoints)}")
            
            if found_endpoints:
                print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ MCP endpoints:")
                for endpoint in found_endpoints:
                    print(f"  ‚úÖ {endpoint}")
            
            if missing_endpoints:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ endpoints:")
                for endpoint in missing_endpoints:
                    print(f"  ‚ùå {endpoint}")
            
            return len(found_endpoints) == len(expected_endpoints)
        else:
            print(f"‚ùå Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False

def test_mcp_requires_auth():
    """–¢–µ—Å—Ç —á—Ç–æ MCP endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ MCP endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    
    test_endpoints = [
        "/api/v1/mcp/health",
        "/api/v1/mcp/status",
        "/api/v1/mcp/capabilities"
    ]
    
    auth_required_count = 0
    
    for endpoint in test_endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=10)
            
            if response.status_code == 401:
                print(f"‚úÖ {endpoint}: —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (401)")
                auth_required_count += 1
            elif response.status_code == 200:
                print(f"‚ö†Ô∏è {endpoint}: –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (200)")
            else:
                print(f"‚ùì {endpoint}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({response.status_code})")
                
        except Exception as e:
            print(f"‚ùå {endpoint}: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {auth_required_count}/{len(test_endpoints)} endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    return auth_required_count == len(test_endpoints)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üöÄ –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP API")
    print("=" * 60)
    
    tests = [
        ("API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", test_api_docs),
        ("OpenAPI —Å—Ö–µ–º–∞", test_openapi_schema),
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞", test_server_health),
        ("MCP endpoints —Å—É—â–µ—Å—Ç–≤—É—é—Ç", test_mcp_endpoints_exist),
        ("MCP —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", test_mcp_requires_auth),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {str(e)}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    success_count = sum(1 for r in results.values() if r)
    total_count = len(results)
    
    for test_name, success in results.items():
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"{status_icon} {test_name}: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
    
    print("\n" + "-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã MCP API –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω:")
        print("  ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  ‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        print("  ‚úÖ MCP endpoints –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("  ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüåê –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/docs –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        print("  2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /api/v1/auth/minimal-login")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ MCP endpoints —Å —Ç–æ–∫–µ–Ω–æ–º")
        print("  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MCP –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–∞–Ω–µ–ª—è—Ö")
    else:
        print(f"‚ö†Ô∏è {total_count - success_count} —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
