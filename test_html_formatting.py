"""
–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ HTML —Ç–µ—Å—Ç–µ—Ä–µ
"""
import requests
import json

def test_html_tester_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    
    base_url = "http://localhost:8000/api/v1"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    try:
        auth_response = requests.post(
            f"{base_url}/auth/minimal-login",
            json={"username": "mcp_test", "password": "test123"},
            headers={"Content-Type": "application/json"}
        )
        
        if auth_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_response.status_code}")
            return
        
        token = auth_response.json()["access_token"]
        headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
        
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤
    print(f"\nüîç –¢–ï–°–¢: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    lab_data = {
        "results": [
            {
                "name": "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω",
                "value": "120",
                "unit": "–≥/–ª",
                "reference": "120-160"
            },
            {
                "name": "–õ–µ–π–∫–æ—Ü–∏—Ç—ã",
                "value": "15.2",
                "unit": "√ó10‚Åπ/–ª",
                "reference": "4.0-9.0"
            },
            {
                "name": "–°–û–≠",
                "value": "25",
                "unit": "–º–º/—á",
                "reference": "2-15"
            }
        ],
        "patient_age": 45,
        "patient_gender": "female",
        "include_recommendations": True
    }
    
    try:
        response = requests.post(
            f"{base_url}/mcp/lab/interpret",
            json=lab_data,
            headers=headers
        )
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"  - status: {data.get('status')}")
            print(f"  - data.status: {data.get('data', {}).get('status')}")
            print(f"  - data.ai_interpretation: {'–µ—Å—Ç—å' if data.get('data', {}).get('ai_interpretation') else '–Ω–µ—Ç'}")
            
            if data.get('data', {}).get('ai_interpretation'):
                ai = data['data']['ai_interpretation']
                print(f"\nü§ñ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
                print(f"  - summary: {ai.get('summary')}")
                print(f"  - abnormal_values: {len(ai.get('abnormal_values', []))} —à—Ç.")
                print(f"  - possible_conditions: {len(ai.get('possible_conditions', []))} —à—Ç.")
                print(f"  - recommendations: {len(ai.get('recommendations', []))} —à—Ç.")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print(f"\nüìã –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
                print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                print(f"")
                print(f"üìä {ai.get('summary')}")
                print(f"")
                
                if ai.get('abnormal_values'):
                    print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã:")
                    for i, item in enumerate(ai['abnormal_values'], 1):
                        print(f"{i}. {item['parameter']}: {item['value']}")
                        print(f"   {item['interpretation']}")
                        print(f"   –ö–ª–∏–Ω–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {item['clinical_significance']}")
                        print(f"")
                
                if ai.get('possible_conditions'):
                    print(f"üîç –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
                    for i, condition in enumerate(ai['possible_conditions'], 1):
                        print(f"{i}. {condition}")
                    print(f"")
                
                if ai.get('recommendations'):
                    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for i, rec in enumerate(ai['recommendations'], 1):
                        print(f"{i}. {rec}")
                    print(f"")
                
                print(f"üö® –°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if ai.get('urgency') == '–¥–∞' else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}")
                
            else:
                print(f"‚ùå AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False, indent=2)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    test_html_tester_formatting()
