#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /registrar/services
"""

import requests
import json

BASE_URL = "http://localhost:8000/api/v1"
USERNAME = "registrar"
PASSWORD = "registrar123"

def get_auth_token():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    login_url = f"{BASE_URL}/auth/login"
    credentials = {
        "username": USERNAME,
        "password": PASSWORD,
        "remember_me": False
    }
    try:
        response = requests.post(login_url, json=credentials)
        response.raise_for_status()
        token = response.json().get("access_token")
        if token:
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:30]}...")
            return token
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def check_services_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç —É—Å–ª—É–≥"""
    token = get_auth_token()
    if not token:
        return
    
    headers = {"Authorization": f"Bearer {token}"}
    url = f"{BASE_URL}/registrar/services"
    
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º API: {url}")
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        services = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥: {len(services)}")
        
        print(f"\nüìã –í–°–ï –£–°–õ–£–ì–ò:")
        print("-" * 50)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for service in services:
            category = service.get('category_code', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            if category not in categories:
                categories[category] = []
            categories[category].append(service)
        
        for category, service_list in categories.items():
            print(f"\nüè∑Ô∏è –ö–ê–¢–ï–ì–û–†–ò–Ø '{category}' ({len(service_list)} —É—Å–ª—É–≥):")
            for service in service_list:
                code = service.get('service_code', '–ë–µ–∑ –∫–æ–¥–∞')
                name = service.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                print(f"  {code} - {name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
        print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–î–£–†:")
        print("-" * 30)
        
        procedure_categories = ['P', 'C', 'D_PROC']
        procedure_services = [s for s in services if s.get('category_code') in procedure_categories]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ–¥—É—Ä: {len(procedure_services)}")
        
        for service in procedure_services:
            code = service.get('service_code', '–ë–µ–∑ –∫–æ–¥–∞')
            name = service.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            category = service.get('category_code', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            print(f"  {code} - {name} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.response.text}")

if __name__ == "__main__":
    check_services_api()
