#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç frontend —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏
"""
import requests
import time
import json
from datetime import datetime, date, timedelta

BASE_URL_API = "http://localhost:8000/api/v1"
BASE_URL_FRONTEND = "http://localhost:5173"

def test_frontend_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ frontend"""
    print("üîç 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend...")
    
    try:
        response = requests.get(BASE_URL_FRONTEND, timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"   ‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: {e}")
        return False

def test_queue_join_page():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
    print("\nüîç 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º
        test_url = f"{BASE_URL_FRONTEND}/queue/join?token=test-token-123"
        response = requests.get(test_url, timeout=5)
        
        if response.status_code == 200:
            print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ /queue/join –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            content = response.text
            if "–û–Ω–ª–∞–π–Ω-–æ—á–µ—Ä–µ–¥—å" in content or "queue" in content.lower():
                print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –æ—á–µ—Ä–µ–¥–∏")
            else:
                print("   ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            return True
        else:
            print(f"   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç API endpoints –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"""
    print("\nüîç 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints...")
    
    # –¢–µ—Å—Ç health
    try:
        response = requests.get(f"{BASE_URL_API}/health")
        if response.status_code == 200:
            print("   ‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ùå Health endpoint: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Health endpoint –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ queue endpoint
    try:
        response = requests.get(f"{BASE_URL_API}/queue/test")
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ Queue test endpoint: {result.get('message', 'OK')}")
        else:
            print(f"   ‚ùå Queue test endpoint: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Queue test endpoint –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç join-fixed endpoint
    try:
        test_data = {
            "token": "frontend-test-token",
            "patient_name": "Frontend Test User",
            "phone": "+998901234567"
        }
        
        response = requests.post(f"{BASE_URL_API}/queue/join-fixed", json=test_data)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print(f"   ‚úÖ Join-fixed endpoint: {result.get('message')}")
            else:
                print(f"   ‚ö†Ô∏è Join-fixed endpoint: {result.get('message')}")
        else:
            print(f"   ‚ùå Join-fixed endpoint: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Join-fixed endpoint –æ—à–∏–±–∫–∞: {e}")

def test_registrar_panel_access():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüîç 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        login_url = f"{BASE_URL_FRONTEND}/login"
        response = requests.get(login_url, timeout=5)
        
        if response.status_code == 200:
            print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            registrar_url = f"{BASE_URL_FRONTEND}/registrar-panel"
            response = requests.get(registrar_url, timeout=5)
            
            if response.status_code == 200:
                print("   ‚úÖ –ü–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–±—É–¥–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)")
                return True
            else:
                print(f"   ‚ö†Ô∏è –ü–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {response.status_code} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)")
                return True
        else:
            print(f"   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏: {e}")
        return False

def test_queue_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –æ—á–µ—Ä–µ–¥–∏"""
    print("\nüîç 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π workflow –æ—á–µ—Ä–µ–¥–∏...")
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–∞—á–µ–π)
        print("   üìã –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π...")
        try:
            response = requests.get(f"{BASE_URL_API}/users/users")
            if response.status_code == 200:
                users = response.json()
                doctors = [u for u in users if u.get('role') == 'Doctor']
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(doctors)} –≤—Ä–∞—á–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
                
                if doctors:
                    test_doctor = doctors[0]
                    print(f"   üìù –¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á: {test_doctor.get('full_name', test_doctor.get('username'))}")
                else:
                    print("   ‚ö†Ô∏è –í—Ä–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID")
                    test_doctor = {"id": 1, "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á"}
            else:
                print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
                test_doctor = {"id": 1, "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á"}
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–∞—á–µ–π: {e}")
            test_doctor = {"id": 1, "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á"}
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å
        print("   üìã –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å...")
        test_data = {
            "token": "workflow-test-token",
            "patient_name": "Workflow Test Patient",
            "phone": "+998901111111"
        }
        
        response = requests.post(f"{BASE_URL_API}/queue/join-fixed", json=test_data)
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print(f"   ‚úÖ –ó–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å: {result.get('message')}")
                if result.get('number'):
                    print(f"   üé´ –ù–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {result.get('number')}")
            else:
                print(f"   ‚ö†Ô∏è –ó–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å: {result.get('message')}")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        print("   üìã –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏...")
        try:
            response = requests.get(f"{BASE_URL_API}/queue/today", params={
                "specialist_id": test_doctor["id"]
            })
            if response.status_code == 200:
                queue_data = response.json()
                print(f"   ‚úÖ –û—á–µ—Ä–µ–¥—å –ø–æ–ª—É—á–µ–Ω–∞: {queue_data.get('total_entries', 0)} –∑–∞–ø–∏—Å–µ–π")
            elif response.status_code == 404:
                print("   ‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {response.status_code}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ workflow: {e}")
        return False

def test_component_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\nüîç 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    import os
    
    components_to_check = [
        "frontend/src/pages/QueueJoin.jsx",
        "frontend/src/components/queue/OnlineQueueManager.jsx", 
        "frontend/src/components/queue/QRScanner.jsx"
    ]
    
    for component in components_to_check:
        if os.path.exists(component):
            print(f"   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {component}")
        else:
            print(f"   ‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {component}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ App.jsx
    try:
        with open("frontend/src/App.jsx", "r", encoding="utf-8") as f:
            app_content = f.read()
            
        if "/queue/join" in app_content:
            print("   ‚úÖ –ú–∞—Ä—à—Ä—É—Ç /queue/join –¥–æ–±–∞–≤–ª–µ–Ω –≤ App.jsx")
        else:
            print("   ‚ùå –ú–∞—Ä—à—Ä—É—Ç /queue/join –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ App.jsx")
            
        if "QueueJoin" in app_content:
            print("   ‚úÖ –ò–º–ø–æ—Ä—Ç QueueJoin –Ω–∞–π–¥–µ–Ω –≤ App.jsx")
        else:
            print("   ‚ùå –ò–º–ø–æ—Ä—Ç QueueJoin –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ App.jsx")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ App.jsx: {e}")
    
    return True

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è frontend —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏...")
    print("=" * 70)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results.append(("Frontend –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", test_frontend_availability()))
    results.append(("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å", test_queue_join_page()))
    results.append(("API endpoints", test_api_endpoints()))
    results.append(("–ü–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", test_registrar_panel_access()))
    results.append(("Workflow –æ—á–µ—Ä–µ–¥–∏", test_queue_workflow()))
    results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", test_component_integration()))
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<30} {status}")
        if result:
            passed += 1
    
    print("=" * 70)
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    elif passed >= total * 0.8:
        print("‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û! –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    else:
        print("‚ö†Ô∏è –ú–ù–û–ì–û –û–®–ò–ë–û–ö! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173/queue/join?token=test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin/admin123 –≤ http://localhost:5173/login")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR –∫–æ–¥–æ–≤ –∏ –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ backend –∏ frontend –∑–∞–ø—É—â–µ–Ω—ã")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
